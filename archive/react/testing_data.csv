IS,onChange get executed only once react 15 6 1,Do you want to request a feature or report a bug bug What is the current behavior React 15 6 1 onChange gets fire only once reproduced bug link If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior Onchange should get executed as maany times as we select radio button Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React 15 6 1,,jquense,2017-10-09 12:59:46,2017-10-09 13:01:47
PR,Bump peer deps of react to 16 0 0,Just noticed a few of the packages have the beta flag for react peer dep Maybe okay maybe not,,"iamdustan,gaearon,sebmarkbage,gaearon",2017-10-09 14:51:01,2017-10-09 15:00:51
IS,React 16 Expected server HTML to contain a matching noscript in body,It seems like putting noscript at the very end of the body tag makes React think it is missing So React warns and compensates by adding another one img width 661 alt screen shot 2017 10 09 at 3 50 17 pm src img width 227 alt screen shot 2017 10 09 at 3 49 53 pm src This looks like a bug to me Another but different issue about noscript,,"gaearon,gaearon",2017-10-09 14:50:54,2017-10-09 15:32:10
IS,TypeError Cannot read property 'create' of undefined when using areact test renderer',Do you want to request a feature or report a bug Bug What is the current behavior Trying to run a simple Jest snapshot test but failing on react test renderer If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 import as React from areact' import Header from ' components Header HeaderContainer' import renderer from areact test renderer' test 'Header is loaded correctly' const component renderer create Header let tree component toJSON expect tree toMatchSnapshot When running Jest throws the following error Header is loaded correctly TypeError Cannot read property 'create' of undefined at Object anonymous src tests unit Header test tsx 6 31 at Promise anonymous at anonymous at process tickCallback internal process next tick js 188 7 Header is loaded correctly 144ms What is the expected behavior Snpashot test should pass Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React react test renderer 16 0 0 react 16 0 react dom 16 0,,"gaearon,gaearon,gaearon",2017-10-09 15:40:07,2017-10-09 16:01:19
IS,Server rendering meta tags attributes non camelcase result in warning,Do you want to request a feature or report a bug Bug What is the current behavior Server rendering meta charset utf 8 or srcSet and other attributes which used to be needed to be camelcased Results in And when we change it to charSet it renders the camelcased version We should remove this warning It also happens with srcSet httpEquiv etc If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior No warning should be given Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React In previous versions of React we passed in the camelcase and it rendered the case correctly either snake or lowercase Now it renders the camelcase when this is executed on the server We are using React v16 happening in latest Chrome,,"gaearon,gaearon",2017-10-09 16:16:27,2017-10-09 16:48:15
IS,Background color issue,Hi I have got this issue with background colors This is just a simple component rendering a div with h1 in it Tested with Crome Safari Firefox and it is only visible in Chrome The size of the dark rectangle is affected by the rendered div only when I give it a background color react,,gaearon,2017-10-09 17:49:57,2017-10-09 17:53:38
IS,In React 16 onMouseEnter is triggered an extra time when entering a new child,versions react 16 0 0 react dom 16 0 0 description onMouseEnter onMouseEnter demo,,"gaearon,gaearon,gaearon,jquense,aweary,aweary,gaearon,gaearon,gaearon,gaearon",2017-09-28 07:06:35,2017-10-09 19:30:04
PR,Fix incorrect calculation of onMouseEnter Leave component path,Fixes and We forgot to compare alternates so in some cases the from to path was calculated incorrectly See individual commits The first one adds a test the last one fixes the bug The ones in the middle prepare the code to look readable after the bugfix I verified both and reproduced before but no longer reproduce after the bugfix,,"gaearon,sebmarkbage,gaearon,gaearon,gaearon,gaearon,gaearon",2017-10-09 19:07:54,2017-10-09 19:30:04
IS,onMouseEnter triggered on children in React 16,Hi I'm having an issue with onMouseEnter being triggered on children of a component It only occurs with React 16 I have created a CodePen that shows the issue Simplified structure is as below Card is a component that needs to capture onMouseMove events and trigger a render and Cover is a simple component that waits for an image passed as a prop to be loaded before displaying it using onload on an Image created in the constructor If you open the console you will see that onMouseEnter is triggered when hovering Card normal behavior but also when hovering the text div which is not supposed to happen If you remove the whole onload logic from the Cover element then onMouseEnter works as intended It is possible that I'm coding this in a way that is not appropriate but it does look like a bug anyway,,"gaearon,gaearon,gaearon,gaearon",2017-10-09 09:57:11,2017-10-09 19:30:27
IS,Can someone point me to where React actually updates the DOM,I want to learn more about performance in React so I'm trying to get a sense of exactly how and when React manipulates the DOM Stepping through the source or inspecting in the devtools profiler I can see that scheduleFlush is finally called when React triggers an update to the DOM I understand how reconciliation works but I'm looking for the actual mechanics read specific line of code where React appends new elements to the DOM e g rootElement appendChild newElement Can someone point me in the right direction I asked this on the reactjs freenode but did not get the response I was looking for Thanks in advance,,"jquense,gaearon,gaearon",2017-10-09 20:44:20,2017-10-09 20:58:22
IS,react test renderer 'find' method is documented incorrectly,There is a mismatch between the behavior of react test renderer is testInstance find and findByType and findByProps method and the documentation find claims to Find the first descendant test instance for which test testInstance returns true but in fact it throws an error if there are multiple such descendant test instances With the way the docs are worded I expected it to work like Array prototype find I'm happy to submit a PR fixing this but I would like some guidance on whether the docs are incorrect or the implementation is incorrect For what it is worth the implementation is wrapped in an expectOne so it seems more likely to me that the docs are incorrect i e this was a very intentional choice by whoever wrote the methods I'm also happy to go in and split these out into two separate methods e g findExactlyOne and find,,gaearon,2017-10-09 21:29:57,2017-10-09 22:27:50
PR,Allow custom attribute named on to be passed on to elements,Hi there It seems that currently is not possible to pass a custom property named on on custom components We would like to render AMP pages on the server in which you define the event handlers like so amp image on tap do something In order to do so I made the check a bit more specific to allow the property to be passed if it is just named on Even though the tests are passing please let me know if that would be the right approach Thanks Georgios,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,sebmarkbage,gaearon",2017-10-09 10:25:29,2017-10-10 00:31:25
PR,Expiration times,An expiration time represents a time in the future by which an update should flush The priority of the update is related to the difference between the current clock time and the expiration time This has the effect of increasing the priority of updates as time progresses to prevent starvation,,"acdlite,acdlite,acdlite,sebmarkbage,sebmarkbage,acdlite,flarnie,flarnie,flarnie,acdlite,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,acdlite,acdlite,acdlite,sebmarkbage,sebmarkbage,sebmarkbage,acdlite,acdlite,acdlite,sebmarkbage,acdlite,acdlite",2017-08-09 23:06:14,2017-10-10 01:39:54
PR,add classWithRenderNotExtended warning,Hi adding the fix for 10103 test prettier lint flow all done and passing,,sebmarkbage,2017-10-08 01:42:54,2017-10-10 02:01:18
IS,React official site does not work in Chrome,React official site show only white screen and show this error,,,2017-10-10 03:49:27,2017-10-10 10:32:32
IS,dangerouslySetInnerHTML in IE11 for svg elements,Do you want to request a feature or report a bug Bug What is the current behavior When using dangerouslySetInnerHtml of svg elements the DOM nodes from the previous render are not being removed If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template See this fiddle What is the expected behavior The DOM should only contain the last rendered value for dangerouslySetInnerHTML Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 15 5 4 Browser IE11 Did this work in previous versions of React Not sure After digging around I found 6982 Which made me think this is happening because of this line L37 in setInnerHTML js where it looks like this Because there is a call to node appendChild svgNode firstChild it will never remove all of the previous nodes but only add the new ones But that is just a guess,,"gaearon,gaearon,gaearon,gaearon",2017-06-20 16:38:38,2017-10-10 10:54:47
PR,Clear previous children when SVG node does not have innerHTML,Fixes 10013 I also fixed the UT but they only work in node 6 using Proxy I saw that node 4 5 are still supported as development environments so if this upgrade is not possible right now I will revert them Could not get the tests to work otherwise,,"gaearon,gaearon,gaearon,nhunzaker,nhunzaker,gaearon",2017-10-05 10:55:42,2017-10-10 10:54:48
IS,update props in commitUpdate,Given an instance which contains some object attempts to update that object in commitUpdate result in an error since the object is frozen What is the correct approach to set the new props to an instance in commitUpdate I see in the ART renderer for example it sets the properties on the instance directly e g L152 Is that the correct approach Is there no ability to wrap these changing properties in a container object,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2017-10-08 11:02:48,2017-10-10 11:12:55
PR,Shallow renderer support multiple setState invocation,Issue 11161 This PR ensures that subsequent calls to setState 1 Use the result of previous setState as base state when shallow merging 2 Pass it to updater function if any,,"gaearon,gaearon,gaearon",2017-10-09 21:42:46,2017-10-10 11:33:58
IS,Shallow renderer subsequent setState calls inside componentWillMount discard the previous ones,What is the current behavior If componentWillMount has multiple setState calls only the last one works in shallow renderer If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Here DOM renderer correctly renders Hello world while test shallow renderer renders undefined world Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Issue is introduced in React 16 The reason must be those lines replacing publicInstance state with this renderer newState should fix it L212 L215,,"gaearon,gaearon,gaearon",2017-10-09 17:10:11,2017-10-10 13:22:17
IS,Reset of select ignores defaultValue,Do you want to request a feature or report a bug I report a bug What is the current behavior When resetting a form which contains a select with a defaultValue the selected option becomes the first option element in the list not the one with value defaultValue If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template I have put a piece of code here 0 Click on the reset button which just does a form reset on the form What is the expected behavior I expect the select to select the option with value defaultValue like applying a form reset on a input Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React DOM 15 6 2 It seems to be browser independent tried with Chromium 61 and firefox 55 for Fedora I did not try this on prior version of React,,"gaearon,aweary,aweary,aweary,gaearon,gaearon",2017-10-01 14:57:47,2017-10-10 15:54:59
PR,Fix form reset for uncontrolled select elements,Resolves defaultSelected will now be set on the select is option is elements based on the value s in defaultValue Added a test fixture too,,"aweary,jquense,aweary,jquense,jquense,aweary,jquense,nhunzaker,nhunzaker,gaearon,nhunzaker,aweary",2017-10-03 00:06:08,2017-10-10 15:54:59
PR,Remove broken link from ReadMe file,,,,2017-10-10 15:44:12,2017-10-10 15:57:00
PR,Fix obscure error message when passing an invalid style value for SSR,This may be a regression to add to 11065 Adding a reduced test case for this issue by opening a PR When trying to server render an iframe with an invalid style tag the following error is thrown This can be traced back to this line here where we are missing the third argument to assertValidProps L783 This file is not checked by flow which is possibly how the missed argument slipped through though naively ading the flow pragma to that file has 39 errors What should the fix be I included a commit to implement the only solution I ve considered thus far Add a noop third argument to checkValidProps since the only other owner ref in that file is explicitly set to null at L57 alternative,,"iamdustan,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,iamdustan,gaearon",2017-10-10 14:22:12,2017-10-10 15:57:26
IS,React 16 does not render text area placeholder initially in IE11 Win10,Bug What is the current behavior IE11 Windows 10 text area placeholder not rendering initially What is the expected behavior Placeholder should be visible on initial render Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React 16 0 0 IE11 Windows 10 Appears to be a regression in 16 0 0 6731,,"gaearon,aweary,gaearon,gaearon,gaearon,aweary,gaearon,aweary,gaearon",2017-10-10 13:34:55,2017-10-10 16:50:00
PR,Do not set empty placeholder to work around IE11 bug,Should probably fix 11172 Based on 15 branch code L830 L839 I made the fix more targeted to make it clearer I have not tested because I do not have IE,,"gaearon,aweary",2017-10-10 16:11:54,2017-10-10 16:50:00
IS,Strange performance problem in Google Chrome putListener appears in the timeline,Do you want to request a feature or report a bug A performance problem in the latest Chrome on Windows 10 Firefox Edge work fine What is the current behavior Chrome freezes for a few seconds on the second render If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template Please open In the first input type 2 This will cause that all items to be redrawn Observe how browser freezes for a few seconds Afterward everything works fine Chrome Inspector timeline reveals strange React behavior image What is the expected behavior This should not happen Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React I tried React 15 4 1 and 15 3 1 on Windows 10,,"gaearon,monkindey,monkindey,gaearon",2016-12-22 12:53:38,2017-10-10 18:08:19
IS,Unexpected SSR difference warning with SVG filter primitives,Do you want to request a feature or report a bug Bug What is the current behavior I have started recieving this warning about my SVGs which is using feGaussianBlur Warning Expected server HTML to contain a matching feGaussianBlur in filter What is the expected behavior Should be no warnings because there are no difference Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Such behavior started right after updating to React 16 0 0 rc 3 and never happened with React 15 6 1,,"nhunzaker,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2017-09-21 16:05:03,2017-10-10 18:34:38
PR,Fix false positive SVG hydration warning for mixed case tags,Fixes I opted for the fix suggested by in issuecomment 334154356 It seems like the easiest and I don t see a realistic situation in which it wouldn t work I guess it could break if you rendered femorphology on the server but feMorphology on the client but who would possibly do that,,"gaearon,gaearon",2017-10-10 14:55:48,2017-10-10 18:34:38
IS,React 16 fails to rehydrate noscripts,Do you want to request a feature or report a bug Bug What is the current behavior As of React 16 noscript dangerouslySetInnerHTML s are not properly rehydrated Equivalent code works in React 15 If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template Consider the following server side code but this is not consistent with the output of the server side code neither the Contents nor the final markup emitted has HTML entities Please note that this is important because it breaks the only known workaround workaround to 1252 workaround issuecomment 246161590 I believe that this may be specific to noscript s because if one replaces all occurrences of noscript with div then the example works fine in React 16 What is the expected behavior Rendering a component with renderToString and then rehydrating that component verbatim should not yield an error Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Regression from 15 to 16 Tested in Chrome v61,,"gaearon,gaearon,gaearon,gaearon",2017-09-30 18:25:41,2017-10-10 18:35:44
PR,Fix false positive noscript rehydration text difference warning in React 16,Fixes It doesn t seem like jsdom reproduces the original issue so instead I added a noscript into our SSR fixture I verified the warning appears without the fix and disappears after the fix The noscript tag is special because the browser parses it as text content when scripting is enabled However the way we normalized HTML did not reproduce the same behavior faithfully because we didn t include the noscript tag itself into that HTML Therefore it didn t switch the parsing mode to treat its content as text The fix adds a special case for noscript to wrap it an extra time I decided to special case it because it seemed more solid than always wrapping which is not always possible to do one level e g tr td case,,"gaearon,syranide,gaearon,sebmarkbage,sebmarkbage,gaearon,gaearon,sebmarkbage,sebmarkbage,gaearon,syranide,gaearon,syranide,gaearon,syranide,gaearon,gaearon,syranide,syranide,gaearon,sebmarkbage,gaearon,gaearon,gaearon,gaearon,gaearon",2017-10-09 15:38:02,2017-10-10 18:35:44
IS,React 16 Mismatched HTML Warning logged when hydrating Portals rendered to document head,Do you want to request a feature or report a bug Bug What is the current behavior Rendering a portal to document head on the server causes React to log a Warning on unexpected markup while hydrating server markup Currently this happens when using react head If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 I'm not sure if it is possible to simulate this in jsfiddle since it requires server rendering and access to document head but a fairly minimal repro case is in react head is example app which you can clone and run via doing the following You will then see the React warning logged If you have thoughts on a simpler way to repro this happy to do that as well What is the expected behavior It is entirely possible that this is just a usage of React Portals that was not anticipated but i'm not sure if this is an invalid use case Would like to get your thoughts and if there is a better approach than what I'm currently doing with react head Besides the warning the module app seems to function exactly as expected At a high level this is how react head works During server rendering head tags e g meta etc are collected in an array L41 which are renderToString d and placed in the server template head L39 then on the client these server rendered tags are querySelected and removed L20 L30 to be replaced by ReactDOM createPortal L38 in order to support SPA functionality from then on Here is the issue in react head Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16,,gaearon,2017-10-10 02:23:41,2017-10-10 19:14:36
PR,Update build scripts to put RN RT files in the right places,Contents of build folder after yarn build type RN includes,,"bvaughn,gaearon,bvaughn",2017-10-10 18:21:00,2017-10-10 20:44:44
IS,How to use TestRenderer,Do you want to request a feature or report a bug I do not know What is the current behavior My codes as below If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior just like Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React jsdom 11 3 0 mocha 4 0 1 use mocha not jest babel core 6 26 0 react 15 6 2 react dom 15 6 2 react test renderer 15 6 2 chai 4 1 2 os win10 npm 5 3,,"gaearon,gaearon,gaearon",2017-10-11 08:08:12,2017-10-11 08:15:18
IS,Update Performance Optimization Documentation to Reflect React 16,Do you want to request a feature or report a bug Bug Out of date documentation What is the current behavior The current React documentation profiling components with the chrome performance tab talks about a flag react perf however since React 16 it appears this behavior is the new default in development builds And with shinier output Yay This pull request seems to be where it became the new normal What is the expected behavior I would expect the first step suggesting to add react perf gets deleted I would also expect the screenshot to reflect the new and improved output perhaps one of the screenshots from ispull request linked above Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 I am more than happy to make this pull request if my expectation is aligned with the projects,,gaearon,2017-10-10 19:57:41,2017-10-11 08:23:57
IS,onMouseEnter lost when hovering over children,Do you want to request a feature or report a bug Bug What is the current behavior When a onMouseEnter event is triggered on an element the event is lost when the mouse comes over a child rendered based on this event This did not happen in React 15 where hovering over the newly created child would persist the event If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 React 15 expected behavior React 16 same code To reproduce hover anywhere in the red Then when the menu opens try to hover anywhere with blue background What is the expected behavior Hovering over the newly created child element should persist the onMouseEnter event Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Testes with React 16 on Chrome Linux latest Ubuntu Mate have not tested anywhere else,,"gaearon,gaearon",2017-10-11 09:33:04,2017-10-11 09:43:23
IS,DOM Test Fixtures Unable to Load React 16,As far as I can tell the path to the UMD version of React 16 changed which makes it impossible to test the latest version of React through the test fixtures We probably need to add a condition to the react loader to change the path above a certain version L45 L46,,"nhunzaker,aweary,nhunzaker,gaearon,nhunzaker",2017-10-06 11:15:15,2017-10-11 09:50:38
PR,Move loop init variable assignment,Just a random drive by change Does not change the logic but avoids it being undefined Maybe this can prevent a deopt because now it is always an integer dogscience,,gaearon,2017-10-10 18:07:33,2017-10-11 10:46:16
PR,Keep autoFocus attribute in the DOM,This is the simplest thing we could do Changes to always emit autofocus into the DOM both on the server and on the client We still have the JS hook too although it doesn t run during hydration s We ll need to also add a test verifying that the current behavior Fiber doesn t call JS focus on hydration doesn t regress It was unintentional but we now consciously want to do it to prevent JS focus jumps when hydrating I ll work on that next s Done We could still blacklist autoFocus on the client and only emit it on the server The argument for doing that is it s less likely to conflict with our JS hooks and matches the current behavior for non SSR apps The argument against it is that it s an extra weird special case and it will be confusing to people to see autoFocus only on SSR d content s In this PR I emit it on the client too I haven t decided if that s right and the input is welcome s I decided to always omit it on the client for extra safety cc,,"gaearon,sebmarkbage,gaearon,sebmarkbage,gaearon,gaearon,syranide,jquense,gaearon,syranide,gaearon,jquense,gaearon,gaearon,gaearon",2017-10-11 13:20:34,2017-10-11 17:52:12
IS,Add warnings on adding functions and components on State,Do you want to request a feature or report a bug Feature Hey I wanted to add a type check on the state on development in order to educate I saw a couple of times some codebase that saves Functions or even Components into the state I was checking the codebase for the first time blush and I saw that you check on the setState method You allow functions to be part of the state I would say that may be wrong and we could warn the developer to not do it Well I do not see any case where a function should live inside the state I saw a lot of posts on StakOverflow about putting Components or Functions on the Redux global State It might be the same conception I want to create a PR in order to address this warning only on development What do you think,,gaearon,2017-10-11 14:52:47,2017-10-11 17:55:46
IS,React 16 Known Regressions,Going to track them here since website issues are creating a lot of noise Fixed in Master x Extra variable in UMDs fixed in x null instead of component stack in a warning fixed in x Crash when hydrating on IE11 in development fixed in x tabIndex getting lost on SVG fixed in x Crash rendering into shadow root fixed in x We should allow running test and shallow renderers in production again fixed in x SSR does not separate unrelated text nodes in some cases fixed in x SSR ReactDOM client and server handling newlines differently causing mismatch warnings fixed in x Peer dependencies warn for beta x onMouseEnter fires twice after a child is added fixed in x onMouseEnter fires when hovered over a child fixed in x Shallow renderer doesn t merge multiple setState calls in componentWillMount correctly fixed in x SSR throws an obscure error on bad style prop fixed in x IE11 loses textarea placeholder on first render fixed in x False positive warning when rehydrating camel case SVG tag names fixed in x False positive warning when rehydrating noscript fixed in x autoFocus does not work with SSR New Features Added in Master x Allow on attribute but not other on attributes x Allow explicitly shallow ignore of hydration warning,,"gaearon,iamdustan,gaearon,gaearon",2017-10-03 15:38:16,2017-10-11 17:57:21
IS,autoFocus does not work with SSR in React 16,input autoFocus works on the client but not when hydrated That is because this used to be implemented in JS as a special case but hydrateInstance does not cause a commit effect to be scheduled that can call focus like finalizeChildren does The question here is should we even bother implementing this in JS anymore or should we just emit the autofocus attribute in SSR and let the browser take care of it,,"sebmarkbage,nhunzaker,sebmarkbage,sebmarkbage,nhunzaker,gaearon,syranide,gaearon,syranide,gaearon,gaearon,gaearon",2017-10-09 15:48:25,2017-10-11 18:05:49
PR,React Reconciler Package,Alternative approach to 10641 Rather than create the entire packaging and bundling script this exposes the React Reconciler as a factory package so all private global state is unique per reconciler which solves the original concerns raised by in issuecomment 319750290 I think it also solves the open question How should we handle React specific stuff pretty well since it doesn t change the current rollup build script at this point I added a really cheap fixtures reconciler directory that requires some manual node modules react reconciler cjs js modifications to test for now but did test both versions This also rather sloppily modifies the scripts rollup tasks to special case the react reconciler wrapping TODO Generate a react reconciler js flow file in the output package so external reconcilers can use flow for writing and maintaining reconcilers x Versioning scheme I would suspect this to have separate versioning from React and ReactDOM discussion r140011585 x Change rollup bundle regex match to a bundle type enum discussion r140012249 x Unbreak the build cc,,"iamdustan,iamdustan,bvaughn,bvaughn,bvaughn,bvaughn,iamdustan,iamdustan,gaearon,gaearon,gaearon,bvaughn,sophiebits,iamdustan,koba04,koba04,koba04,iamdustan,gaearon,gaearon,iamdustan,gaearon,gaearon,gaearon,gaearon,iamdustan,iamdustan,gaearon,gaearon,gaearon,gaearon,iamdustan,gaearon,gaearon,iamdustan,iamdustan,gaearon,iamdustan,gaearon,bvaughn,iamdustan,gaearon,gaearon,iamdustan,gaearon,iamdustan,gaearon,iamdustan,iamdustan,gaearon,iamdustan,gaearon,gaearon,iamdustan,iamdustan,gaearon,iamdustan,gaearon,iamdustan,iamdustan,iamdustan,gaearon",2017-09-20 15:12:02,2017-10-11 18:29:26
IS,React16 not compatible with x3dom,This is both bug feature I used to be able to use x3dom with React It was great React 15 I was able to use the is property to generate custom elements and custom attributes that could be picked up by x3dom i e shape is render true Now with React16 i get many warning messages for all of the custom x3dom tag elements Likewise it seems that certain attributes are not getting rendered either For instance if I do x3dom elements like so fontstyle size 0 6 I will get fontstyle output without the size attribute I do not think React should have to know what x3dom tags are nor should they be hard coded into React There has got to be a way to have React output custom tags without throwing warning messsages Why not just re introduce the is attribute to indicate that it is a custom tag with custom attributes,,sebmarkbage,2017-10-10 19:25:21,2017-10-11 20:44:33
PR,Remove priority coalescing and PriorityLevel module,Coalescing is the only feature that depends on PriorityLevel Since we are not sure if coalescing is even valuable we will remove it for now If it turns out we need it we can add it back later,,"acdlite,sebmarkbage,acdlite,acdlite",2017-10-11 00:37:48,2017-10-11 21:48:45
IS,Docs for older versions of React are unavailable,Do you want to request a feature or report a bug bug What is the current behavior Documentation for older versions of React have been deleted The React documentation website only shows documentation for the current version of React If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior Documentation for previous versions of React is available somewhere Ideally there is a version picker at the top of the page to select which version of React you are working with like python org for example Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Every version of React before the latest,,gaearon,2017-10-11 22:42:15,2017-10-11 23:32:51
IS,React error decoder page broken,For example following decode page is broken and this which is described in,,"gaearon,gaearon",2017-10-12 00:42:35,2017-10-12 10:48:14
IS,React Test Renderer 16 breaks trying to use internal property,Using version 16 0 0 I get a TypeError Cannot read property 'ReactCurrentOwner' of undefined Sample test case but really its just Seems like maybe from this change,,"gaearon,gaearon,iamdustan,gaearon,gaearon",2017-10-11 19:29:33,2017-10-12 11:01:26
IS,React component passed as children to some component down nullifies effect of PureComponent,I do not know if this would come under feature request or a bug or if this is just expected and things should be handled differently in shouldComponentUpdate Current behaviour If A is a component which renders B and passes C as children to B Now if A re renders for some state change of which no part is passed to B or C so basically nothing changes in the subtree of B B still always re renders this is the fiddle to reproduce this issue Click on C to make state change in A and B re renders Here the effect is not much but in some cases children is passed some level deep and can cause un necessary re renders this is in React 16 and previous versions this is a question where some of the observations are posted feel free to answer there only if this is expected or should be handled in a different way,,gaearon,2017-10-12 07:46:48,2017-10-12 11:05:17
PR,Use value on select instead of setting selected on option,,,,2017-10-12 11:33:54,2017-10-12 11:39:32
PR,Added component stack to contentEditable warning,In ref to 8497 I have added the componentStack to the contentEditable warning message Update test suite and all tests pass Closes 8497,,"Ethan-Arrowood,gaearon,Ethan-Arrowood,gaearon,Ethan-Arrowood,Ethan-Arrowood,gaearon,Ethan-Arrowood,gaearon,Ethan-Arrowood,Ethan-Arrowood,gaearon,Ethan-Arrowood",2017-10-06 21:01:30,2017-10-12 16:40:43
PR,Add exception for 16 alpha when loading React in DOM Fixtures,The file structure was updated in 16 This was not the case for alphas We need to load the old module location for anything less than 16 RC Follow up from issuecomment 335757661 screen shot 2017 10 11 at 7 21 49 pm,,nhunzaker,2017-10-11 23:22:04,2017-10-12 21:30:05
PR,chore syntheticEvent remove IE8 code,Since IE8 has been deprecated for a while I thought it might be useful to remove some IE8 only code If this is not something you want to focus on yet or is too much work to test feel free to close this PR Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 If you have added code that should be tested add tests 3 If you have changed APIs update the documentation 4 Ensure the test suite passes npm test 5 Format your code with prettier npm run prettier 6 Make sure your code lints npm run lint 7 Run the Flow typechecks npm run flow 8 If you have not already complete the CLA,,"Haroenv,jquense,nhunzaker,nhunzaker,nhunzaker,Haroenv,gaearon,Haroenv,gaearon,Haroenv,syranide,nhunzaker,Haroenv,Haroenv,nhunzaker,nhunzaker,syranide,nhunzaker,Haroenv",2017-10-10 17:25:27,2017-10-12 21:30:48
PR,Add playground homescreen to DOM Fixtures,This pull request adds a new home screen for the DOM test fixtures that should make it easier to produce test cases without having to setup React locally Additionally it provides a file github issue button that will generate a new issue with auto populated browser information example Check it out here Why this PR is so big In order for this to work I'm leaning on Formidable is component playground Naturally they import React using commonjs This is problematic for our existing way of handling versioned React code const React window React Webpack can smooth this over using the externals configuration but that we can not as far as I know do that with create react app So I have ejected create react app added this configuration and updated all of the fixtures to use import React instead of const React window React I have also tried my best to simplify cut some fat but this change set is bigger than I would have liked Other thoughts Long term I would love to deploy this and make it a part of the release process It would be awesome if we could farm out manual DOM testing to the community though this is more of a pipe dream at the moment,,"nhunzaker,gaearon,aweary,gaearon,nhunzaker,nhunzaker,aweary,jquense,nhunzaker,nhunzaker,nhunzaker,nhunzaker",2017-07-17 12:21:17,2017-10-12 21:37:02
IS,vs push,Do you want to request a feature or report a bug What is the current behavior If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React,,,2017-10-12 22:26:31,2017-10-12 22:26:51
PR,Sync setStates inside willUpdate and didUpdate should flush at same time,In sync mode we downgrade sync priority work to task work when we are in the commit phase but not in the render phase That means if you schedule updates in both phases the render phase update will flush first and the commit phase update will flush after that What should really happen is that both updates flush at the same time To solve this updates in the commit phase are now given sync priority The distinction between task and sync really only exists to account for a historical quirk in the behavior of top level mounts Refer to the test case titled initial mount is sync inside batchedUpdates Ideally there would only be one priority for both sync and task This gets us closer to that model while still accounting for top level mounts,,acdlite,2017-10-13 03:31:58,2017-10-13 04:05:59
PR,CS Split Host Config Out into a Mutable or Immutable Mode,The immutable mode assumes that the output of React is a persistent tree not mutations on a mutable DOM tree Useful for targeting frameworks that accept immutable data structures as input Also adding another experimental RN renderer CS to try this out,,"sebmarkbage,acdlite,acdlite",2017-10-13 08:39:44,2017-10-13 21:30:00
PR,Deterministic updates,High priority updates typically require less work to render than low priority ones It is beneficial to flush those first in their own batch before working on more expensive low priority ones We do this even if a high priority is scheduled after a low priority one However we do not want this reordering of updates to affect the terminal state State should be deterministic once all work has been flushed the final state should be the same regardless of how they were scheduled To get both properties we store updates on the queue in insertion order instead of priority order always append Then when processing the queue we skip over updates with insufficient priority Instead of removing updates from the queue right after processing them we only remove them if there are no unprocessed updates before it in the list This means that updates may be processed more than once As a bonus the new implementation is simpler and requires less code To avoid conflicts this works off my expiration times 10426 and prerendering 10624 PRs,,"acdlite,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,acdlite,acdlite,clemmy,acdlite",2017-09-15 02:57:01,2017-10-14 00:21:26
PR,ReactDOM createRoot,Introduce new API for creating roots Only root render and root unmount are implemented Later we will add root prerender and support for lazy roots roots with DOM containers that resolve lazily,,"acdlite,sebmarkbage,acdlite",2017-10-14 01:07:30,2017-10-14 03:08:36
IS,Investigate the nested update overflow caused by coalescing,We had an internal issue T22633912 which manifested itself as an infinite nested update loop triggering our invariant investigated that it was introduced in and then fixed in We don t however have any failing tests related to that Even though we removed that coalescing implementation I feel like we need to investigate what happened and add a regression test to prevent the same issue from occurring in the future It might also be valuable to think about any additional information we can surface in the error at least in development For example component names for last ten fibers that scheduled an update,,"gaearon,gaearon,iamdustan,acdlite",2017-10-12 14:32:20,2017-10-14 03:14:19
IS,Issue with dangerouslySetInnerHTML and markup rehydration,Do you want to request a feature or report a bug Bug What is the current behavior When trying to rehydrate markup in IE11 'Argument is not optional' error is thrown It happens only if component has dangerouslySetInnerHTML prop Example What is the expected behavior No error should be thrown Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React version 16 Browser IE11,,"nhunzaker,gaearon",2017-10-14 20:17:18,2017-10-14 20:24:48
PR,Fix typos,This Pull Request fixes a few minor typos that are in three different README md files,,"nhunzaker,nhunzaker",2017-10-12 09:54:20,2017-10-14 20:26:10
IS,react warning keys thrown for components not returned in an iterator,Do you want to request a feature or report a bug Bug What is the current behavior Steps to reproduce See What is the expected behavior No key warning Which versions of React Affects v16 0 0 Chrome v62 macOS 10 12 No warnings in React v15 Solutions Fix the key warning or Edit the docs to explain that a key is needed on any react element with dynamic props changed on every render not just elements returned from an iterator,,"aweary,aweary",2017-10-13 21:38:32,2017-10-15 18:10:08
PR,0 5 stable,Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 If you have added code that should be tested add tests 3 If you have changed APIs update the documentation 4 Ensure the test suite passes npm test 5 Format your code with prettier npm run prettier 6 Make sure your code lints npm run lint 7 Run the Flow typechecks npm run flow 8 If you have not already complete the CLA,,,2017-10-15 17:05:34,2017-10-15 18:19:16
PR,Not for commit Demonstrate async bug,During a recent sync to Facebook is internal repo we encountered a bug introduced by and fixed by Even though the bug is fixed in the latest master we decided to investigate the root cause of the bug to protect against future regressions Thanks to some debugging by and I think I have a good sense of what caused the bug I was not able to figure out a test case that reproduces the original error in the old commit but I'm reasonably confident that it is related to how we calculate the expiration time of an incoming update Updates that occur during the commit phase componentDidUpdate should receive task priority so that they are flushed in the next batch Updates that occur during the render phase like componentWillReceiveProps should receive the same expiration time as whatever is currently rendering so that they are flushed in the current batch If we are rendering sync work then the update should have sync expiration It should not be downgraded to task Otherwise wo not be rendered until the next batch which could lead to an infinite loop of updates In the commit that introduced this bug this check is incorrect L1544 L1549 It should be checking isCommitting not isPerforming work because we do not want to downgrade if we are in the render phase only the commit phase Even though this is wrong it did not manifest as a bug in our units tests because of other code that happened to mask it in most cases removed the incidental complexity that was masking the bug While working on that PR I discovered the error and corrected that check L1520 L1523 This PR demonstrates that if you change that line back from isCommitting to isPerformingWork it causes several unit test failures,,acdlite,2017-10-12 23:14:59,2017-10-15 20:43:49
PR,Use value on select instead of setting selected on option,,,"nhunzaker,nhunzaker",2017-10-12 11:41:41,2017-10-16 11:46:24
IS,React props are not available when arguments are set in html tag,Do you want to request a feature or report a bug bug What is the current behavior The props passed to the dom element is not available in react via this props attribute If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 The issue is visible here What is the expected behavior When an attribute is passed in an html tag it should be passed to the react props The props is empty inside the App react element Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React All browsers tested with react 16,,,2017-10-16 12:46:26,2017-10-16 12:55:14
IS,test,test,,,2017-10-16 15:24:08,2017-10-16 15:24:12
IS,Code snippet in docs unexpectedly throws,Bug Report The docs present an example code snippet which crashes the js process See adding a ref to a dom element In particular notice the highlighted parts of the code snippet and the first sentence under the snipppet which reads React will call the ref callback with the DOM element when the component mounts and call it with null when it unmounts 1 If the ref callback is called with null the callback will be doing this textInput null 2 From that moment on if a user clicks the second input the button the focusTextInput method will do this textInput focus 3 But since this textInput is null it is really doing this null focus 4 Yet focus is not a method of null so this will throw I would suggest adding a little guard for this in the code snippet so that people can copy paste without worry replacing this or something like this This was found in the docs for React v16 0 0,,"Ethan-Arrowood,gaearon",2017-10-13 21:35:41,2017-10-16 20:03:58
IS,React addons test utils needs older version of react dom,I installed the latest react addons test utils latest in npm and also the latest version of react dom also npm As react dom is a dependency you would expect that this would do the trick However npm sends out warnings Do I really need an older version of react dom be able to use the test utils or is it ok to use the latest react dom version I am using react 3 7 2 react dom 16 0 0 react addons test utils 15 6 2,,,2017-10-13 09:15:14,2017-10-16 20:05:51
IS,ReactiveFormsModule like angular4 in react,I'm struggling with forms in react redux form library is the only library that can arrive to do what reactive forms in angular4 can do but have a lot of bugs and have no all what angular4 reactive form has import ReactiveFormsModule from ' angular forms' I can control field state in nice way angular4 control state transitions anim group fields validations asyn validations and validator librarary included is there any library can I can do in react ecosystem or it is better do build a own library how i did with templates css another libraries have a lot of bugs too or they are in beta mode new versions example material ui or not compatible with react 16 and it is frustating devine the future when they solve the important bugs,,"gaearon,gaearon",2017-10-15 07:20:12,2017-10-16 20:10:37
IS,How to combine theme breakpoints on React,I need some configuration on my app to be resposnive For example I used a component SearchIcon from material ui and I want to adjust it on the screen and also for the second option I'm using React v15 6 2 and Google Chrome browser,,gaearon,2017-10-16 15:39:55,2017-10-16 20:14:22
PR,Bump Jest version,Up to 21 2 Everything seems to work Finally fixes the watch mode which used to crash,,gaearon,2017-10-16 20:27:00,2017-10-16 20:38:35
IS,Automated release script,Create a command line tool to automate the release steps outlined in 10620,,bvaughn,2017-10-11 21:26:31,2017-10-16 22:01:15
PR,Release script,This script automates the release process outlined in 10620 thanks but with the following deviations The steps have been rearranged slightly to combine building the release yarn build and generating updated error codes yarn build extract errors so that we do not have to do this slow step twice I did not implement Bower support We can add this to the CHANGELOG for the upcoming 16 1 release At a high level the new release script runs in 2 passes build and publish The build script does the heavy lifting eg checking CI running automated tests building Rollup bundles and then prints instructions for manual verification This script could be run multiple times if problems are detected during testing although it might require some slight resetting of state unless you are using the dry option The release script is run after manual tests It publishes the built artifacts to NPM and pushes commits and tags to GitHub It also prints some post deploy instructions Both scripts support a dry flag which will log rather than executing commands like git commit or npm publish This is useful for testing an upcoming build without committing to publishing it as well as for working on the release scripts themselves These scripts also support running against a separate git checkout to simplify the process of testing changes to the release scripts themselves Everybody likes pictures so here is a few build usage screen shot 2017 10 13 at 3 21 38 pm successful dry run screen shot 2017 10 13 at 3 26 58 pm example errors screen shot 2017 10 13 at 3 48 56 pm screen shot 2017 10 13 at 3 29 22 pm publish usage screen shot 2017 10 13 at 3 21 45 pm successful dry run screen shot 2017 10 13 at 3 30 34 pm example error screen shot 2017 10 13 at 3 31 34 pm Resolves 11198,,"bvaughn,iamdustan,Daniel15,bvaughn,sophiebits,bvaughn,nhunzaker,bvaughn,bvaughn,flarnie,iamdustan,iamdustan,iamdustan,iamdustan,iamdustan,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,flarnie,bvaughn,iamdustan,iamdustan,flarnie,flarnie,flarnie,flarnie,bvaughn,flarnie,bvaughn,flarnie,flarnie,bvaughn,bvaughn,gaearon,gaearon,bvaughn,gaearon,bvaughn,bvaughn,flarnie,bvaughn,bvaughn,clemmy,bvaughn,Daniel15,Daniel15,bvaughn,bvaughn,bvaughn,bvaughn,Daniel15,bvaughn,mxstbr,bvaughn,nhunzaker,Daniel15,flarnie,bvaughn,flarnie,bvaughn,gaearon,bvaughn",2017-10-13 22:31:53,2017-10-16 22:01:15
PR,Simplify Jest config a little bit,See individual commits,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,bvaughn,gaearon,gaearon,bvaughn",2017-10-16 21:57:42,2017-10-16 22:17:00
IS,The defaultValue of select may be broken,I would like to report a bug In re filing another outstanding bug that was closed despite being reproducible I decided to create a repro case Since the repro involves setting defaultValue on a select I confronted the human inability to remember whether HTML is zero indexed or one indexed Since the repro also involves determining whether a given option is selectable I decided to just have a control with four option s and to select 3 to see which I would get the third or the fourth Joke is on me I got neither I got the first selectable option A winner is testcase If the series is 1 indexed you should see joe if 0 indexed you should see stan Instead you see bob As such I currently believe that defaultValue is not honored on select This is the first time I have noticed this I have only tested it under 16 0 0,,"jquense,jquense,aweary,jquense,nhunzaker,aweary,aweary,nhunzaker,aweary,nhunzaker,aweary,nhunzaker,jquense",2017-10-04 22:46:24,2017-10-17 04:56:12
PR,Fix typo in createReactClassIntegration test js,Small fix Fix typo in createReactClassIntegration test js mispelling is a misspelling of misspelling,,,2017-10-17 06:36:24,2017-10-17 06:42:29
IS,React 16 Server Side Rendering client server mismatched Html differences,Do you want to request a feature or report a bug Bug What is the current behavior Migrating to React 16 helped us discover a bug in our code for only Safari IOS devices where the sort functionality would cause the result to return in a different order compared to node is server response or chrome firefox The rendered component is a component with an A tag wrapping an optional image and h2 elements In React 15 the components completely re rendered overriding the a tag with the new url from the client In React 16 the client component re rendered everything inside of the a but did not change the wrapped a url Which lead to links leading peoples to incorrect locations Hopefully that makes sense If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 I do not know a good way of creating a fiddle for this However I will do my best to answer any questions What is the expected behavior I would have expected the client side html to have overridden the server side html the same as React 15 did and completely rerender the component Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Functionally different from React 15 to React 16 Not sure if what I have listed was intended changes in React 16 which is why I'm raising it to make you aware just incase it is an issue,,"gaearon,gaearon,gaearon",2017-10-17 10:14:26,2017-10-17 11:03:39
IS,Cannot create property for a non extensible object,Do you want to request a feature or report a bug Bug What is the current behavior An error is thrown in IE 11 The error message states Cannot create property for a non extensible object It originates from the following location File webpack line 98 What is the expected behavior No errors Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React The version number is react dom 15 6 1 This used to work and the error messages started when I implemented DLLPlugin on Webpack which involved outputting all dependencies in a single file I'm not sure why that would be a problem though,,"volkanunsal,gaearon",2017-10-16 16:00:03,2017-10-17 11:05:29
PR,Simplify Jest specific tests,It was a bit hard to say what is being tested there This was relevant in the past but today the only special case we have for Jest is here L1450 L1452 and here L412 L415 So I just test those specifically instead now The automock system is also legacy and has been disabled by default on www this year The other things these tests were testing are related to Jest mocking itself but it doesn t make sense for me that we should test Jest Especially since we don t necessarily use the same version as www If Jest breaks any of this behavior they will notice it during their www sync so it shouldn t be on our plate See individual commits for details,,gaearon,2017-10-16 23:31:10,2017-10-17 12:05:45
PR,Remove unnecessary fields from root package json,A bit opinionated but here goes Let me know if you disagree I don t feel very strongly about either just cutting down things that aren t necessary name It is not published on npm so there is no need for a name there Having a name makes it a bit more confusing because then it seems like it would be published s version It too doesn t really mean anything and can be safely deleted People who want to see the current version would be better advised to look at the changelog since it also describes what s new in that version s Decided to keep it in in case some services depend on it commonerConfig Commoner has long been archived Since this file isn t on npm dropping this can t be a breaking change,,"gaearon,gaearon,gaearon,bvaughn,gaearon",2017-10-17 00:34:09,2017-10-17 12:34:02
PR,Delete adler32 implementation,It was only used by Stack SSR,,gaearon,2017-10-17 13:00:35,2017-10-17 13:19:48
PR,Move Flow environment into scripts flow,I m trying to clean up the top level repo structure The flow folder at the root is a bit confusing since it feels like a place for Flow definitions for React itself wrong I m moving it to scripts flow to live next to all other internal environment setup configs e g scripts jest scripts rollup scripts babel Flow passes,,gaearon,2017-10-17 12:42:30,2017-10-17 13:20:00
IS,Uncaught TypeError this updater enqueueCallback is not a function,BUG Stack Trace,,,2017-10-17 14:38:27,2017-10-17 15:02:04
IS,Is there a way to input before rendering checking strategy in ReactDOM,I'm not sure if that is the appropriate way to ask this but I would like to have your opinion I notice that I have the use of PureComponent very often in code but I'm wondering if there is a way in which you build all pure function components and then apply the logic of shallow comparison before rendering while rendering component using ReactDOM Is there a reason not to have something like this What do you guys think,,gaearon,2017-10-13 15:05:40,2017-10-17 18:21:12
PR,remove unused isPortal function,Grepping the codebase had no references to this function,,iamdustan,2017-10-17 18:50:36,2017-10-17 19:27:54
PR,CS Clone container instead of new root concept,The extra root concept is kind of unnecessary Instead of having a mutable container even in the persistent mode I will instead make the container be immutable too and be cloned Then the commit just becomes swapping the previous container for the new one I might have to implement this in a hacky way since we currently can not have two different host containers since the HostRoot stateNode slot is occupied by FiberRoot,,"sebmarkbage,sebmarkbage",2017-10-17 07:17:48,2017-10-17 19:41:48
PR,Do not mark portals for updates,sebmarkbage noticed we don t need this because portals don t have callbacks,,gaearon,2017-10-17 18:39:17,2017-10-17 19:53:16
PR,Removed test utils dependency on test renderer from bundle config,For react 15 4 and below the shallow renderer was exposed via For a little time prior to the 16 0 release we exposed it in both places along with a deprecation warning The backwards compatible route and warning were removed in commit 43dae74 but we missed the associated dependency in the Rollup bundle config This commit cleans that up too Verified by running yarn build test locally without any build errors,,"bvaughn,gaearon,bvaughn",2017-10-17 21:19:19,2017-10-17 21:31:13
IS,ref set to null on every render,Do you want to request a feature or report a bug Possible bug What is the current behavior ref callbacks are always passed null once before subsequently being passed the reference If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 With the attached code sample the following life cycle functions and ref callbacks are executed null ref example zip What is the expected behavior I was not expecting all refs to be set to null on each render although it gets set again shortly thereafter If this is expected behaviour I did not see it in the documentation Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 MacOS Chrome 61 Safari 11,,gaearon,2017-10-17 20:40:22,2017-10-17 21:36:25
PR,Delete netlify,We don t need this now that the website lives separately,,gaearon,2017-10-17 22:25:16,2017-10-17 22:37:12
IS,No way to set SVG transform origin attribute,There is no transformOrigin in a list of supported SVG attributes actually but it is transform origin supported in DOM Current behavior Attribute transformOrigin is ignored and a warning is shown in a console that the property is not not supported It is possible to set transform origin but there is another error that the attribute is not valid of course but it is set to the DOM and makes the spinner look correct Expected behavior The attribute should be set to the g tag,,gaearon,2017-10-18 11:05:04,2017-10-18 12:21:51
PR,Put NativeCS bundles into their own directory,They used to be put into RN directory which does not match how RT bundles were treated,,gaearon,2017-10-18 12:48:21,2017-10-18 12:56:08
IS,Add component stack to the contentEditable warning,feature Warning A component is contentEditable and contains children managed by React It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated This is probably not intentional It would help heaps if I would know which component is causing this,,"gaearon,Ethan-Arrowood,gaearon,Ethan-Arrowood",2016-12-05 03:10:57,2017-10-18 12:59:44
PR,Added component stack to contentEditable warning,In ref to 8497 I have added the componentStack to the contentEditable warning message Update test suite and all tests pass Closes 8497 This is a new PR after I failed on this previous one,,"Ethan-Arrowood,gaearon",2017-10-12 16:49:37,2017-10-18 12:59:44
PR,Remove unused bundle flag,Verified it s unused by running the build on these bundles They didn t change,,gaearon,2017-10-18 12:55:53,2017-10-18 13:00:44
IS,Shallow test renderer calls shouldComponentUpdate on forceUpdate,There is no extra guard or clause in enqueueForceUpdate when calling render which means the render always calls shouldComponentUpdate which can block even forced re render during tests This for example breaks shallow rendering in Enzyme when using MobX and observables Minimal test case,,"d4rky-pl,gaearon,d4rky-pl",2017-10-16 15:10:37,2017-10-18 13:54:06
PR,Fix forceUpdate in shallow test renderer,Fixes 11236 by adding a flag during enqueueForceUpdate to make sure the shouldComponentUpdate is not being tested against,,"d4rky-pl,gaearon,d4rky-pl,gaearon",2017-10-16 15:49:12,2017-10-18 13:54:07
PR,Matches like performance improvement,According to L25 styleValue is already string,,"243083df,gaearon",2017-10-13 10:51:15,2017-10-18 14:00:57
IS,ReactDOM hydrate falsely warns about text content mismatch,Do you want to request a feature or report a bug Bug What is the current behavior What is the expected behavior No warning Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React react 16 0 0 react dom 16 0 0,,"gaearon,gaearon",2017-10-18 14:29:24,2017-10-18 14:44:30
PR,Add note to 'unreleased' CHANGELOG about deprecating Bower,what is the change We will no longer release new versions of React to Bower and we should announce that as part of our CHANGELOG why make this change We decided on this as a team test plan Visual inspection and spell check issue Just follow up for,,"flarnie,gaearon,flarnie,gaearon,flarnie",2017-10-17 23:13:36,2017-10-18 15:42:22
PR,Add static injection for feature flags,Related to discussion in This does two things Removes ReactDOMFeatureFlags as a separate entity instead opting for unified feature flag list across the whole codebase in ReactFeatureFlags Adds a mechanism to specify build time overrides for the whole ReactFeatureFlags file for a particular bundle For example let s say we have a flag called includePersistenceImplementation and react native cs wants to flip it to true To introduce it we would need to 1 Add it to ReactFeatureFlags js This should be enough to enable DCE for cases like because GCC which we use for react dom is smart enough to read static boolean flags Potential pitfalls of this approach Might not be obvious ReactFeatureFlags needs to be mocked in tests Might not be obvious flags need to be specified in all overrides rather than merged Potential future work Remove the configuration bit and locate per package FeatureFlags override automatically Generalize this as a static injection system for overriding any modules Maybe split out into ReactBuildFlags and ReactRuntimeFlags for extra clarity,,gaearon,2017-10-18 16:39:30,2017-10-18 17:40:53
PR,CS Persistent Updates Dead Code Elimination,A copy of 11260 but trying to apply DCE based on Not too bad,,"gaearon,gaearon",2017-10-18 17:49:03,2017-10-18 20:59:24
IS,dangerouslySetInnerHTML not working in IE,Hello Today I have spotted the bug in IE10 IE11 while setting the inner HTML on any element p div span using dangerouslySetInnerHTML property the browser will raise an error Argument not optional I use this with SSR but the actual HTML received from the server is good so probably there is a problem with ReactDOM hydrate func Some code where label is some string that contains HTML image,,"nhunzaker,gaearon",2017-10-18 20:45:51,2017-10-18 20:59:41
PR,Render phase setState bugfix,Fixes a bug surfaced by www unit test I'm not yet sure the best way to test this in the interest of landing this fix quickly I will save the test for a follow up,,"acdlite,sebmarkbage,acdlite,sebmarkbage",2017-10-18 21:24:50,2017-10-18 21:32:32
PR,Better fix for base state bug,This time with a test Not super happy with the solution but I think it is good enough for now,,"acdlite,acdlite,gaearon,acdlite,gaearon,gaearon,acdlite,acdlite,gaearon,acdlite,gaearon,acdlite,acdlite,gaearon,acdlite,gaearon",2017-10-18 21:56:42,2017-10-18 22:11:48
IS,Redirect to first doc page,Do you want to request a feature or report a bug Bug broken link in Thinking in React section of docs line 347 What is the current behavior Broken link Sends user to Page Not Found If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior Go to appropriate link for those who need help executing this step Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React,,"gaearon,gaearon,gaearon",2017-10-18 22:35:07,2017-10-18 22:37:52
PR,Use Yarn Workspaces,Here s an overview of what happened src is gone packages is now the source of truth Running yarn in the root sets up the symlinks in root node modules Sources live in packages src I intentionally haven t touched them Entry points in packages js redirect to the sources They are used for Jest and Rollup Entry points in packages npm js redirect to flat bundles They are used for npm For now you can still use Haste but I plan to tighten it up see future work below Internal fixtures now only work with Yarn not npm We depend on it anyway The 13K line diff is due to a bunch of lockfiles I added to fixtures Must Do x Move all code x Fix the build x Update all configs referencing src x Why did some files get lost first time I committed Any bad gitignores x Fix release script x Fix fixtures now that NODE PATH does not work,,"gaearon,hzoo,gaearon,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,gaearon",2017-10-17 14:13:27,2017-10-18 23:22:22
PR,Update contribution instructions,See,,gaearon,2017-10-19 00:01:19,2017-10-19 00:03:56
PR,CS Persistent Updates,Implements the rest of the persistent updates protocol The gist of it is that host components gets cloned in the complete phase if they or their children changed Host containers either in a root or portal also get cloned if their children has changed Finally in the commit phase they are replaced by issuing in a replacement command See individual commits,,"sebmarkbage,sebmarkbage,gaearon,gaearon,sebmarkbage,gaearon,sophiebits,gaearon,sophiebits,sebmarkbage,sebmarkbage,gaearon,gaearon,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,bvaughn,gaearon,bvaughn,bvaughn,bvaughn,gaearon,bvaughn,gaearon,bvaughn,gaearon,sebmarkbage,gaearon,sebmarkbage,sebmarkbage,gaearon,sebmarkbage,gaearon,sebmarkbage,acdlite,sebmarkbage,gaearon,gaearon,gaearon,gaearon,sebmarkbage,gaearon,gaearon",2017-10-17 22:13:40,2017-10-19 01:28:24
IS,The latest version of react deleted content such as'prop types' can be provided to allow users to decide whether to delete or contain these contents,For example when react releases a new version it may require two new versions one containing deleted content and the other not included,,"milesj,gaearon",2017-10-19 03:44:00,2017-10-19 10:09:17
PR,Only renderers should depend on reconciler code,This addresses We forbid TestUtils and ShallowRenderer from bundling the reconciler code The build breaks since they depend on some Fiber modules However those modules happen to be stateless helpers So I move those to shared acknowledging their nature just like ReactTypeOfWork already lives there We can and maybe will need to fix this in a different way by moving them to the reconciler and making them exports on it Since third party renderers might need them anyway However this is a reasonable solution while we re untangling dependencies Again it doesn t change how it works just formally encodes what we already do I added some todos for server dependencies on reconciler modules Should be easy follow up fix,,"gaearon,gaearon,gaearon",2017-10-19 14:34:30,2017-10-19 14:52:46
IS,React Test Utils should not bundle a copy of the reconciler,The way it is currently set up is incorrect It is not downright broken but can blow up in our faces later Specifically it currently uses ReactFiberTreeReflection which brings in a copy of some parts of the reconciler Such as ReactInstanceMap However it also depends on ReactDOM which has its own ReactInstanceMap So for example ReactFiberTreeReflection isMounted would not give accurate results We did not bump into this just because we only use ReactFiberTreeReflection findCurrentFiberUsingSlowPath which is stateless We can fix this by forbidding TestUtils to bundle its own reconciler If there is more secret stuff that should be exposed from ReactDOM for that to work so be it Or we could separate ReactFiberTreeReflection findCurrentFiberUsingSlowPath into a stateless helper that is safe to share That seems easier,,"gaearon,gaearon,gaearon",2017-10-19 14:03:17,2017-10-19 14:52:55
PR,Add component stack to invalid style warnings,This is good by itself but also moves us closer to fixing the unintenional server side dependency on reconciler modules I took the same approach as we already do with getStack e g like in ReactControlledPropTypes It returns an empty string on the server but this has already been the case So this doesn t regress on anything,,"gaearon,gaearon,gaearon,gaearon,gaearon",2017-10-19 15:04:58,2017-10-19 15:46:40
PR,Include component stack in more places including SSR,This includes component stack instead of owner name in more places including previously TODO would places in the server renderer It also gets rid of the last SSR dependency on reconciler modules so I could remove react reconciler from the source whitelist for SSR bundles,,"gaearon,bvaughn,gaearon,gaearon,gaearon,bvaughn,gaearon,bvaughn,bvaughn",2017-10-19 16:12:02,2017-10-19 16:43:41
PR,Fix production crash,Fixes an embarrassing production crash I introduced in I misunderstood what this fbjs function does Verified this fixes it by trying the rebuilt bundle on FB com in production mode Also by newly added regression test which fails on master,,"gaearon,bvaughn,gaearon,bvaughn,gaearon",2017-10-19 18:06:41,2017-10-19 18:12:08
IS,Add me,Do you want to request a feature or report a bug What is the current behavior If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React,,,2017-10-19 18:17:31,2017-10-19 18:35:49
PR,Reorganize code structure,A few changes as a followup to Workspaces Entry points now have natural names e g React ReactDOM Just like before Fiber We now use npm package entry points when importing in the few places we were not Such as ReactFiberReconciler react reconciler Since DOM tests often test both client and server I removed the mostly arbitary distinction and put most of them together into packages dom tests For DOM implementation I did another pass at checking which files are client only server only shared and separated them into dom client dom server and dom shared I deleted a few dead files I moved FB specific preventMunge directives into flat bundle itself instead of individual source files I separated TestUtils and ReactDOMUnstableNativeDependencies into a separate bundle type called RENDERER UTILS The main difference is it should not bundle a reconciler inside itself unlike a real renderer This is how I uncovered which I fixed in The build products look mostly the same to me except for minor dependency order changes Bundle fixture works img width 1560 alt screen shot 2017 10 19 at 6 31 10 pm src Also verified that UFI and Power Editor work in DEV and PROD,,"gaearon,bvaughn,bvaughn,bvaughn,gaearon,bvaughn,Yeti-or,bvaughn,gaearon",2017-10-19 18:19:43,2017-10-19 18:50:25
IS,React spread operator is still in the official documentation,Bug in documentation What is the current behavior React is spread operator was removed in React 16 but it is still in the documentation spread attributes What is the expected behavior A word of caution should be included that this does not include React 16 Maybe also add other ways of spreading props Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 It worked in previous releases,,"gaearon,aweary,gaearon",2017-10-19 23:23:52,2017-10-20 02:32:36
PR,Pass pendingProps as argument in createWorkInProgress,Update createWorkInProgress in ReactFiber js to accept pendingProps as argument,,"zombieJ,gaearon,zombieJ,gaearon,gaearon,acdlite,zombieJ,zombieJ",2017-09-08 04:06:24,2017-10-20 03:36:00
PR,Fix typos in comments,,,gaearon,2017-10-20 02:22:18,2017-10-20 10:15:17
PR,Move files in react package,This is just making the structure a bit more flat now that createClass PropTypes are gone and classic modern distinction does not make sense,,gaearon,2017-10-19 23:47:23,2017-10-20 10:26:38
PR,Flatten the shared folder,It s not like the others as in it s not a real package Doesn t have package json in the root I figured we might as well flatten it This will make importing less annoying if we drop Haste Old structure The utils folder was unnecessary and we used it inconsistently I didn t see much use in it so I flattened it into the root folder,,gaearon,2017-10-20 11:46:35,2017-10-20 11:59:58
PR,Group event code together and forbid cross client server imports,This removes useless utils directory in DOM and instead moves utils where they are used All DOM event code is now grouped together I also finally tightened up the bundle config so that you can t import client only modules from server and vice versa,,gaearon,2017-10-20 12:38:27,2017-10-20 12:51:51
PR,Rollup script can now extract error codes and build in a single pass,Relates to this comment discussion r145565726 Now we no longer have to run,,"bvaughn,gaearon,gaearon",2017-10-19 22:19:43,2017-10-20 15:35:34
IS,React Test Renderer is Peer dependency keeps getting bumped,I noticed that react test renderer is peer dependency for React gets bumped with every version update or at least that is what happens in version 15 v16 is still 16 0 0 Is this required Could the peer dependency for version 16 not stay at 16 0 0 even after the versions of each package get bumped to say 16 1 I ask because this makes it hard for libraries to pull in react test renderer so that their end users who do not use it directly do not have to pull in a package they never use directly The specific example I have in mind is enzyme For version 15 it has a peer dependency on react 15 5 0 and a dependency on react test renderer 15 5 0 if I have react 15 5 installed and enzyme tries to install the latest react test renderer then it will pull in 15 6 2 which requires react 15 6 2 which 15 5 does not satisfy Until recently they made the test renderer a peer dependency which was very annoying as a user of the library because you should not have to manually install a package that you do not use directly We changed that to be a regular dependency but are now noticing that the peer dependency the test renderer has on react gets bumped every version change which causes the above problem Is it not possible to leave the peer dependency within the major version At least for v16 going forward Or is there another way a library can pull in the test renderer without forcing the user to do it,,"gaearon,bvaughn,gaearon",2017-10-19 04:08:49,2017-10-20 15:53:16
PR,Release script no longer auto updates peerDependencies react version,After some discussion the team has decided not to automatically increment the react version specified by project peerDependencies when we release minor updates This PR removes that logic from the release script Going forward we will have to rely on Flow to notify us of upcoming changes and manually update the dependency before running the release script Resolves 11278,,"bvaughn,bvaughn,bvaughn",2017-10-19 22:39:41,2017-10-20 15:53:16
IS,React release script follow up,x Verify that it is safe to run yarn build only once including extracting errors see this comment thread discussion r145565726 for more context PR 11291 x Decide on a mechanism to relax peer dependency constraints see 11278 for more context PR 11292,,bvaughn,2017-10-19 16:40:39,2017-10-20 15:56:02
IS,Update implementation notes documentation,The implementation notes still describes the stack reconciler I'm currently using the resources from koba04 react fiber resources but it would be great to have an updated description of Fiber as part of the official docs,,"pomber,gaearon,pomber,gaearon",2017-09-27 15:28:14,2017-10-20 18:57:30
PR,Flatten everything,Makes so that we are at most one level deep excluding src into each package Added new events pseudo package that technically works like shared and was extracted from it This makes an easier pill to swallow,,"gaearon,jquense",2017-10-20 18:59:51,2017-10-20 19:14:52
PR,Fix build sync script for RN CS RT,While testing some changes to RN I noticed that the sync fbsource flag had been broken recently by things being moved around and the newly added CS renderer Fixed it up,,bvaughn,2017-10-20 18:07:44,2017-10-20 19:58:54
PR,Split performWork into renderRoot and commitRoot,It turns out that the scheduler is too coupled to how the DOM renderer works Specifically the requestIdleCallback model and how roots are committed immediately after completing Other renderers have different constraints for when to yield and when to commit work We are moving towards a model where the scheduler only works on a single root at a time and the render phase and commit phase are split into distinct entry points This gives the renderer more control over when roots are committed coordinating multiple roots deferring the commit phase batching updates when to yield execution and so on In this initial commit I have left the renderers alone and only changed the scheduler Mostly this involved extracting logic related to multiple roots and moving it into its own section at the bottom of the file The idea is that this section can be lifted pretty much as is into the renderers I will do that next,,"acdlite,acdlite,acdlite,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,acdlite,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,acdlite,acdlite,acdlite,acdlite,acdlite,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage",2017-10-18 08:12:09,2017-10-20 20:22:30
PR,Move DOM specific event files to the right folder,Not sure why I put them into events but they should have been in dom events,,gaearon,2017-10-20 20:21:54,2017-10-20 20:36:54
PR,Fixed invalid prop type warning to be more specific,Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Format your code with prettier yarn prettier 6 Make sure your code lints yarn lint Tip yarn linc to only check changed files 7 Run the Flow typechecks yarn flow 8 If you have not already complete the CLA Learn more about contributing,,"NicBonetto,NicBonetto,gaearon,NicBonetto,gaearon,NicBonetto",2017-10-20 16:34:17,2017-10-20 22:04:52
IS,Example links in react reconciler README are broken,Reporting this since it says If these links break please file an issue and we ll fix them They intentionally link to the latest versions since the API is still evolving and knowing the place of the most up to date examples would help me a lot The issue template does not really fit here but I'm trying to follow it anyway Do you want to request a feature or report a bug Bug In a README What is the current behavior In there are 3 links to reconciler configuration examples of react dom react art and react native All 3 links are broken If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 Just visit the react reconciler README md What is the expected behavior Correct links I wanted to fix these in a PR but could only find an appropriate replacement for react native here Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Issue exists on master branch,,gaearon,2017-10-21 12:54:51,2017-10-21 14:13:54
PR,Fix renderer example links in README of react reconciler,Fixes facebook react issues 11310,,,2017-10-21 14:11:39,2017-10-21 14:13:54
PR,Delete unused code in ReactDOMFrameScheduling,Noticed a bit of unnecessary unused code in ReactDOMFrameScheduling,,bvaughn,2017-10-20 17:47:33,2017-10-21 15:54:45
IS,Remove warnings for Unsupported Style Properties,Now that the safelist and blocklist are basically no more React 16 seemingly allows you to write which renders the style properly with warnings screen shot 2017 10 21 at 11 58 53 am Perhaps we could remove the warnings When writing pure React I will use the camelCased names the reason I'm hoping to remove the warnings is to be a bit more lenient with a little Python wrapper that uses React on Jupyter nteract frontends,,"aweary,gaearon,gaearon,gaearon",2017-10-21 19:01:15,2017-10-22 00:10:44
IS,SSR result render in browser incorrectly,Do you want to request a feature or report a bug bug What is the current behavior dangerouslySetInnerHTML render html string to real document well if under a server side render environment the return rendered html was right but browser side will render and sanitize all html tags of content between pre code and code pre for example we have a html string we use ssr server to render this to real html and right result return from the server the document will be replaced with pre code return ordered posts code pre after browser rendering the most difference is that all span tag were removed Is this a normal behavior for React I'm not sure No SSR Right Demo What is the expected behavior After browser got the ssr html and render the tags between pre code and code pre should not be removed Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 0 0 Chrome 61 0 3163 100 MacOS 10 12 6 no try be done on previous version of React,,gaearon,2017-10-21 17:55:46,2017-10-22 11:06:16
PR,utkarsh malik,Utkarsh Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Format your code with prettier yarn prettier 6 Make sure your code lints yarn lint Tip yarn linc to only check changed files 7 Run the Flow typechecks yarn flow 8 If you have not already complete the CLA Learn more about contributing,,gaearon,2017-10-22 07:37:00,2017-10-22 11:11:07
IS,Webpack config Docs Request npm run eject aka yarn eject,Just like,,"gaearon,gaearon",2017-10-22 12:38:00,2017-10-22 13:07:12
PR,Removed useless typechecking,gaearon After our dialog r146112953 I delete this useless typechecking I tried to add a flow to the file but flow found 23 errors I think I can fix these errors later but I need help with types Some files and functions in package React do not have typings I can add any type but this is a bad practice Do you have a plan to add flow typechecking for all files in React package or not If you have we can talk about it and gradually add typing for all files,,gaearon,2017-10-22 12:13:40,2017-10-22 13:14:14
IS,JSX alternative for namespaced tags XML,We are currently working with a template engine which uses namespaced XML tags but JSX does not support XML and namespaced tags Is there an actively maintained alternative or can someone point me to the right place for my question,,"aweary,aweary",2017-10-22 08:55:05,2017-10-22 19:10:04
IS,Strict ordering of commitUpdate,How exactly is the order of commitUpdate calls related to the structure of the tree note for this question I am only asking about commitUpdate not prepareUpdate For example in the following 1 1 A 1 A a 1 A b 1 B 1 B a 1 B b 2 2 A 2 A a 2 A b 2 B 2 B a 2 B b There is several ways it could be rendered if there is a strict relationship which I'm assuming there is I do not know the technical terms for these difference though feel free to use them and I will look 'em up Here are some examples again sorry for using made up terms Example 1 bottom to top 2 B b 2 B a 2 B 2 A b 2 A a 2 A 2 1 B b etc Example 2 bottom to top per level 2 B b 2 B a 2 A b 2 A a 2 B 2 A 2 1 B b etc Example 3 top to bottom 1 1 A 1 A a 1 A b 1 B 1 B a 1 B b 2 etc Example 4 top to bottom per level 1 2 1 A 1 B 2 A 2 B 1 A a 1 A b 1 B a 1 B b 2 A a etc This also prompts another related question is commitUpdate for each element guaranteed to happen after all the children are adjusted,,sebmarkbage,2017-10-22 04:43:13,2017-10-22 23:21:34
IS,Hydration breaks the HTML class,We have updated an application to React 16 this app is using react responsive Since we have updated to React 16 we have bugs related to invalid HTML being outputted by React hydration Our server generates an HTML for the desktop but if the client has a mobile the rendering mismatch Previously it was causing a full re render by ReactDOM render it was not perfect but it worked With React 16 ReactDOM hydrate is supposed to not rerender everything but only the mismatching parts But after we run ReactDOM hydrate the HTML is an invalid mix of both class are sliced 1 HTML generated by the server desktop mode This is the HTML being served by the server before hydration screen shot 2017 10 23 at 11 35 11 2 HTML generated by the client without SSR normal mobile mode This is the HTML being rendered by React when we disable SSR screen shot 2017 10 23 at 11 39 07 3 Wrong HTML generated by hydration of 1 in client mobile mode This is the invalid HTML being rendered by React when it tries to hydrate 1 with 2 The expected HTML is 2 screen shot 2017 10 23 at 11 36 46 Versions Chrome 61 0 3163 100 React v16 0 0,,"gaearon,gaearon,gaearon,gaearon,Tom910,gaearon",2017-10-23 09:47:32,2017-10-23 10:34:40
IS,componentDidCatch is not getting called when there is an error in promise,As per the new react 16 release doc it says React 16 prints all errors that occurred during rendering to the console in development even if the application accidentally swallows them I have a Parent component and a Child component I have triggered an error in then block of promise But it will call catch method of the promise componentDidCatch of parent is not getting called I am not sure whether this the expected behaviour Here is the jsfiddle,,"gaearon,gaearon,gaearon",2017-10-23 06:17:56,2017-10-23 13:20:48
PR,Add art to react art peerDependencies,Seems like it is required in Node mode,,gaearon,2017-10-23 14:23:51,2017-10-23 15:13:18
PR,Add prop types to dependencies of react test renderer,They are imported L11 by the shallow renderer but not specified,,"gaearon,gaearon",2017-10-23 14:29:22,2017-10-23 15:14:34
IS,Support onEnd SVG event,Hi I'm trying to use the animateTransform Element in a React project But I'm not able to use the onend attribute Warning Unknown event handler property onend It will be ignored Is there a workaround for this,,"gaearon,aweary,gaearon",2017-10-23 15:35:57,2017-10-23 15:59:37
PR,Make art a dependency of react art,Instead of per,,"gaearon,gaearon",2017-10-23 15:13:14,2017-10-23 16:00:42
IS,react art on npm is missing the lib folder,It seems like those were intended to be public APIs but they re not published on npm because lib folder is not in the files whitelist,,gaearon,2017-10-17 18:22:14,2017-10-23 18:18:12
PR,Expose react art Circle Rectange Wedge on npm,Fixes Verified by looking into build folder img width 212 alt screen shot 2017 10 23 at 17 07 58 src img width 202 alt screen shot 2017 10 23 at 17 08 02 src and running updated fixture img width 395 alt screen shot 2017 10 23 at 17 08 44 src One thing I'm not super happy about it is we can not import them easily in tests But I do not care tbqh,,gaearon,2017-10-23 16:10:41,2017-10-23 18:18:12
PR,API for prerendering a top level update and deferring the commit,Adds the ability to start rendering work without flushing the changes to the screen by blocking the commit phase This can be used to coordinate React is commit phase with other async work root prerender schedules an update and returns a work object work commit unblocks the commit phase and flushes the remaining work synchronously Not yet implemented is work then which schedules a callback that fires once the work has completed To keep these PRs focused I will do this in a follow up,,"acdlite,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,acdlite,acdlite,sebmarkbage,clemmy,acdlite,acdlite,acdlite",2017-10-16 07:56:55,2017-10-24 03:34:55
IS,11299 off,Do you want to request a feature or report a bug What is the current behavior If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React,,,2017-10-24 03:36:03,2017-10-24 08:29:23
IS,iframe content getting initial document differs from actual result,Do you want to request a feature or report a bug bug not sure if its react browser What is the current behavior i made a static iframe that display a url and then run some script on the iframe from parent window it works fine for second after refresh of entire page but for every 1st time load it shows html that is the initial html being loaded behavious has been watched after pausing on script even after several time calling reload of iframe problem persists only fixed if entire page reloads parent window If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 something like this but sorry i do not know how to make import work on fiddle What is the expected behavior Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React chrome 61 macos high siera,,gaearon,2017-10-23 09:09:18,2017-10-24 11:01:03
PR,Drop Fiber suffix from bundle Haste names,Note this is about built bundles not source files I want to drop the concept of a haste name and just use the global name for it As a prerequisite I want to rename existing bundle haste names to match global names if they exist This does not affect anything except www and RN We will need to change the imports on next sync,,gaearon,2017-10-24 14:15:10,2017-10-24 14:26:08
PR,Translation react README md react README test md to,I have translated react README md in English into Korean react README md,,gaearon,2017-10-24 15:16:13,2017-10-24 15:39:16
IS,Invariants that do not have error codes yet are missing in production builds,See my comment in issuecomment 338974574 I verified introduced this regression,,"gaearon,gaearon",2017-10-24 12:35:22,2017-10-24 16:11:04
PR,Use simple invariant in case of missing error codes,Fixes Instead of completely skipping an invariant that does not have a code now just uses the wouldevelopment version of it with the full message It does however keep it wrapped in the condition just like 11291 did Verified by compiling this file Note both are codes now and there is just the prod invariant version bundled,,gaearon,2017-10-24 14:47:59,2017-10-24 16:11:04
IS,svg with linearGradient produces server side rendering warning,This is a report for a bug of a server side rendering warning when using svgs in React 16 What is the current behavior We get the following warning when using an svg tag with a linearGradient attribute in one of our components Warning Expected server HTML to contain a matching linearGradient in defs Since this is a server side warning we have reproduced the warning on this repo with a very simple example of an svg tag Steps to reproduce clone repo npm install npm build npm start Visit 3000 on your browser Open the javascript console to see the warning What is the expected behavior The expected behaviour is to have no warning when doing server side rendering just like there is none when rendering on the client side This worked in React 15 6 1 as tested on branch v15 on the same repo above,,"gaearon,gaearon",2017-10-24 18:41:36,2017-10-24 18:52:01
PR,Update CI environment Node 8 Yarn 1 2 1,Node 8 for speed Yarn 1 2 1 for proper Workspaces support,,"gaearon,gaearon",2017-10-24 19:10:33,2017-10-24 19:32:27
PR,Drop Haste,TODO x Fix Flow imports x Fix build x Fix UMD x Fix CJS x Fix FB x Fix RN x Fix size regressions x Fix DEV only regression x Fix error extraction x Remove Jest providesModules things Not sure how I feel about this This helps enforce that we have proper module boundaries between packages It already exposes some renderers read directly from reconciler and thus wo not be accessible to third party renderers So I think that is kind of nice This exposed an interesting issue with Jest and Yarn Workspaces In a test createReactNativeComponentClass and require areact native renderer' SECRET INTERNALS DO NOT USE createReactNativeComponentClass will be two different things Because one is imported relatively and thus is located in packages while the other one is instantiated from code path going via node modules react renderer Jest thinks they are different This seemed like a show stopper to me at first But then I thought we do not like tests that do anyway because they read internal modules What if we just outlawed it In this case you would have to write react native renderer src createReactNativeComponentClass to get it in a test Or read it from a secret bag exposed on react native renderer But that might actually be okay because it makes bad code looks bad All existing cases of this already have TODOs next to them So we could forbid relative requires in tests Thus also encouraging people to write integration tests for new features too We could also wait for Jest to fix it but I doubt that will happen soon since almost nobody else bumped into this Mostly seeking feedback if anyone has strong objections at this point If not I could further flatten the structure forbid relative requires in tests and then fix the build I expect that Rollup configuration will be significantly simpler now that we can let it use Node resolving mechanism without silly whitelists like L32 L50,,"gaearon,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,gaearon,gaearon,gaearon,gaearon,gaearon,bvaughn,sebmarkbage,gaearon,gaearon,gaearon,gaearon,bvaughn",2017-10-20 18:35:20,2017-10-24 23:55:01
IS,Get rid of providesModule,It is been great for us at FB but not so much for everybody else It is long been a goal to get rid of this and just use common js es6 modules but have not put the time in yet This change will require changes internally at FB and probably some work with fbjs so I'm going to assign this to myself,,"zpao,aweary,gaearon,iamdustan,aweary,zpao,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2016-03-24 20:42:59,2017-10-25 12:17:19
IS,Bug onMouseEvent does not exsit in canvas,I want to report a bug import React Component from areact' class CanvasColor extends Component constructor super this color ' ffffff' componentDidMount this context document querySelector 'canvas' this ctx this context getContext '2d' this renderCanvas this context addEventListener 'mousemove' this getColor false getColor e console log e e target const x e layerX const y e layerY const data this ctx getImageData x y 1 1 a to 0 1 data 3 parseFloat data 3 255 this color 'rgba ' data join ' ' ' ' console log this color renderCanvas const imageSource document querySelector 'img' this context width imageSource width this context height imageSource height this context style position 'absolute' this context style zIndex 2 31 1 this context style top 0 this ctx drawImage imageSource 0 0 imageSource width imageSource height onMouseMove e this getColor e render return div canvas width 0 height 0 onMouseMove this getColor canvas canvas width 0 height 0 canvas img src alt div,,gaearon,2017-10-25 08:36:55,2017-10-25 13:40:48
PR,Expose TapEventPlugin on the www bundle,We used to copy it right from the source but I broke it in Drop Haste PR because now the imports in the source do not resolve in www It was a very weird strategy anyway Instead I'm changing it to just hang off our www build It is not ideal that now we ship it on the desktop too but it is pretty tiny and seems like it is not a big deal In the next sync we would need to delete the shims I deleted here I'm preparing an internal diff that will remove remaining imports of SyntheticUIEvent internally so we can cleanly get rid of it,,"gaearon,gaearon",2017-10-25 14:31:08,2017-10-25 14:37:50
PR,Added unit test that would have caught the recent error code transform regression,Added an automated test that would have caught the regression introduced with 11291 and fixed by 11350 The new test verifies that this,,"bvaughn,gaearon,gaearon,bvaughn,gaearon",2017-10-24 21:34:29,2017-10-25 15:21:55
PR,Forbid adding new files with,Similar to the license check added by in Fixes remaining violations Rollup shims and header are excluded from the check since they intentionally include it,,gaearon,2017-10-25 14:51:13,2017-10-25 16:50:34
PR,Reorder imports,I want to group package level imports separately from imports reaching into other packages I think this provides a better mental picture of what s being shared between renderers We were also sort of doing this with fbjs anyway before now we just have more packages I think this is especially useful in DOM client code where there s a mix of local DOM specific events and global events references Same with local shared and global shared In the past we used the separate import convention for lowercase modules like isCustomElement but I don t see much sense in this grouping It doesn t convey a real semantic difference Finally I don t care too strongly about this Not enough to enforce it via lint yet But after ES modules are done and we don t have weird require s in DEV blocks I d be happy to automatically enforce it with an autofix lint rule that would run right before Prettier I verified FB and open source bundles still work,,gaearon,2017-10-25 14:00:54,2017-10-25 18:07:55
IS,'npm' is not recognized as an internal or external command,Do you want to request a feature or report a bug It is not a bug but a installation issue because it is my first time to use React What is the current behavior When I create an app refered to the guide 'npm' is not recognized as an internal or external I added node to Enviornment Variables user variables and system variables image OS Win 7 64bit node version 6 11 2 npm version 5 5 1,,"gaearon,gaearon",2017-10-25 11:13:02,2017-10-25 18:37:35
PR,Add experimental react call return package,Per discussion with and This lets people experiment with Call Return API without us committing to supporting it I renamed Coroutines Yield to Call Return because it seems like a much more straightforward metaphor Also updated all callsites This lets us get rid of a few bad internal imports too,,"gaearon,sebmarkbage,gaearon",2017-10-25 19:13:44,2017-10-25 19:23:56
PR,Update ReactCoroutine test to only use public API,In this case these tests are currently testing apis that have not been exposed publicly yet so there is not currently an actually public api to be used For now expose createCoroutine and createYield through ReactNoop renderer which is already used for testing as per is suggestion When these apis are exposed publicly these tests can be updated using that api Part of 11299,,"gaearon,gaearon",2017-10-23 14:12:51,2017-10-25 19:27:58
PR,Expose ReactCoroutine on SECRET as unstable API,Opening PR for the sake of discussion after talking to I have wanted to experiment with ReactCoroutine for awhile I can copy the code into another project to try it out and I will but Dan brought up adding it to SECRET so here is a PR,,"gaearon,gaearon,gaearon",2017-10-21 12:57:54,2017-10-25 19:28:55
PR,Added naive scheduleDeferredCallback implementation for RN,This unblocks initial async testing Based on initial testing I will also be submitting a related PR for React Native is createAnimatedComponent to make it account for potential async behavior Also fixed up a small thing I noticed while syncing and testing rename RN shim is 'ReactNativeFiber exports to ReactNativeRenderer This broke after the recent project cleanup reorg,,"bvaughn,sebmarkbage,bvaughn",2017-10-25 17:43:10,2017-10-25 21:13:35
PR,Remove Task priority,The concept of Task priority was originally added as a way to avoid reentrancy Sync priority is for work that flushes synchronously and Task is for work that flushes at the end of the event loop But it turns out that in most cases it is simpler to model Task and Sync as the same priority level For example it is never correct to flush Sync work from the update queue without flushing Task Doing so can lead to infinite update loops And using a separate priority level is not necessary to avoid reentrancy We already track when work is being rendered and exit before entering the render cycle again That alone is sufficient This commit removes Task priority from the codebase Now we use the same level for both truly synchronous work and work that is deferred until the end of the event loop This also enables us to remove DOM specific legacy cases from the reconciler and lift them to the renderer,,"acdlite,acdlite,clemmy,acdlite,sebmarkbage,sebmarkbage,acdlite,acdlite,acdlite,sebmarkbage,sebmarkbage,acdlite,clemmy,acdlite,clemmy,acdlite,acdlite",2017-10-20 22:19:35,2017-10-25 23:51:46
IS,Can not get the right e nativeEvent currentTarget when use html5 drag api,1 my component looks like 2 when drag some element that set draggable true on the component i will get console message as below img width 1377 alt 2017 10 26 21 40 59 src 3 i do not add listener of DND operation to doc body i tried to find what is the problem please help have a look thanks ahead,,gaearon,2017-10-26 13:47:38,2017-10-26 14:14:26
PR,Update Jest and remove hacks,I fixed a Jest Yarn Workspaces integration bug in This lets us remove the hacky transform whitelist and use relative requires in tests again,,"gaearon,gaearon",2017-10-26 14:05:47,2017-10-26 14:15:24
PR,Use reconcileChildrenAtExpirationTime instead of reconcileChildren,Remove reconcileChildren in ReactFiberBeginWork Call reconcileChildrenAtExpirationTime directly,,"yenshih,gaearon,gaearon",2017-10-26 14:05:03,2017-10-26 14:15:44
PR,maybe proactively redirect some doc site issues,Not sure how often new issue creators read this but this may help proactively guide the handful of docs issues that have been coming through over to the docs site,,"iamdustan,gaearon",2017-10-16 14:59:39,2017-10-26 14:27:16
PR,make yarn lock file current,When running yarn in the fixtures dom directory this updated lockfile is outputted from the stock un changed package json This PR updates yarn lock to that state,,"MatteoVH,gaearon",2017-10-26 16:25:48,2017-10-26 16:51:34
PR,reference yarn instead of npm in dom fixtures README,,,"MatteoVH,gaearon",2017-10-26 16:13:36,2017-10-26 16:51:59
PR,Update README md,Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Format your code with prettier yarn prettier 6 Make sure your code lints yarn lint Tip yarn linc to only check changed files 7 Run the Flow typechecks yarn flow 8 If you have not already complete the CLA Learn more about contributing,,"MatteoVH,gaearon",2017-10-24 15:59:18,2017-10-26 16:53:19
IS,Flow ify ReactPartialRenderer js,It doesn t have a flow annotation We should start Flow ifying it to avoid bugs like Wanna take it,,"gaearon,iamdustan",2017-10-10 15:33:56,2017-10-26 16:59:30
PR,Flow ify ReactPartialRenderer,Closes 11175 cc,,"iamdustan,iamdustan,gaearon,gaearon,gaearon,gaearon,iamdustan,iamdustan,gaearon,iamdustan,gaearon,gaearon,gaearon,gaearon,gaearon,iamdustan,iamdustan,iamdustan,iamdustan,gaearon,gaearon,gaearon",2017-10-17 14:03:45,2017-10-26 16:59:30
PR,Documentation on README,I added the documentation link in the README,,gaearon,2017-10-26 13:35:39,2017-10-26 17:06:26
IS,Separate renderToString and renderToNodeStream,Currently its not possible to run renderToString on the client because ReactDOMServer imports the Node js fs package It would be nice if we could still support renderToString on the client,,gaearon,2017-10-26 17:47:12,2017-10-26 17:59:43
PR,Fuzz test across multiple roots,While refactoring root scheduler I noticed we have few tests that cover updates across multiple roots To address I have added multiple root cases to the fuzz tester Includes a hard coded test case that was failing before 11307 landed,,"acdlite,gaearon,acdlite",2017-10-26 16:57:06,2017-10-26 18:03:41
PR,Rewrite ReactDOMInput test depending on internal API 11299,Should help on 11299 I hope these changes may help with the public APIs on the other tests especially inputValueTracking test I'm pretty sure it needs more refactoring and I would appreciate if you could help me pointing the most whopping ones As stated ReactTestUtils should be considered a non public API since it reaches into internals in a way,,"sebmarkbage,sebmarkbage,gaearon,gaearon,gaearon,gaearon,gaearon",2017-10-20 23:35:11,2017-10-26 18:22:10
PR,React Children only Flow Added typecheking for onlyChild js,,,"gaearon,gaearon",2017-10-22 21:34:24,2017-10-26 19:04:47
IS,Please simplify the component event binding,request a feature,,gaearon,2017-10-27 06:37:55,2017-10-27 09:45:38
IS,Chain dependency causes warnings with create react class,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Potential bug What is the current behavior Render react app produces warning in development mode If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 create a new project Project A that uses create react class to create a Component ComponentX build the project into a library minify all js assets create another project Project B and include Project A as a dependency Create another React Component const ComponentY extends React Component and use ComponentX from Project A bundle Project B with production build create a third project Project C and include Project B as a dependency build a react app that uses ComponentY from Project B warnings What is the expected behavior there should not have any warnings regarding create react class from a third party dependency Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React version 15 6 2 One quick example is installing adslot ui as a dependency then create a react app that uses Carousel component this component implements nuka carousel which uses create react class,,gaearon,2017-10-27 03:41:05,2017-10-27 10:04:37
PR,Add a shim for react 16 1 0 react dom 16 0 0 compatibility,This was a Stack only module that nevertheless was still being destructured but not used by react dom 16 0 0 img width 546 alt screen shot 2017 10 27 at 4 51 02 pm src I deleted it on master as part of Stack cleanup but I just realized this makes react dom 16 0 0 incompatible with react 16 1 0 Which is not a huge deal as we used to only support synchronized versions but we agreed that we want to relax that a little bit So I put a shim back in I verified that it fails without it img width 773 alt screen shot 2017 10 27 at 4 47 42 pm src and works with it img width 331 alt screen shot 2017 10 27 at 4 48 52 pm src As a followup I propose to add Flow types for cross package internals so we don t accidentally break them within a major,,"gaearon,sebmarkbage,bvaughn",2017-10-27 15:53:08,2017-10-27 16:39:00
PR,CS Implement Some Stuff,Actual implementation for CS,,"sebmarkbage,sebmarkbage,gaearon,gaearon,acdlite",2017-10-27 23:19:42,2017-10-28 03:05:35
PR,Added MIT license badge along with other existing badges,Added MIT license badge React license has been a topic of discussion for a long time With React 16 the library has been re licensed to MIT The developer community is excited about this change I wanted to add a small cool badge to represent the same Thanks for making React great again,,"4leem,4leem",2017-10-28 04:55:58,2017-10-28 11:36:24
IS,Feature Assign multiple JSX attributes with the same value,I would like to propose a feature I'm going to keep this real simple Often times I do this This is similar to multiple variable assignment in JavaScript let a b c 1 Good idea Bad idea,,gaearon,2017-10-28 18:32:20,2017-10-28 18:47:37
IS,Fix coverage reporting,For some reason coverall says it is 0 on master pointing to this commit This makes no sense to me Probably a bug either in our reporting or on their side For now I removed the badge in README,,"gaearon,xjlim,gaearon",2017-10-25 18:13:16,2017-10-29 00:24:25
IS,Error boundary stack traces show components as Unknown in IE11,Do you want to request a feature or report a bug Bug Unless I missed something required for IE11 support What is the current behavior Error boundary component stack traces show Unknown for every component name in IE11 Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 0 0 IE11 Windows 8 1 10 N A,,gaearon,2017-10-24 16:47:52,2017-10-29 13:00:11
IS,What should I do or follow If I want to go with microservice architecture for building a large scale website where I am planning to use Laravel react js and MySQL initially Beside this which type of rendering will be best for me CSR or SSR and how to implement all the things prooperly,,,gaearon,2017-10-30 10:03:21,2017-10-30 11:18:49
IS,Elements and Components,In this code is MyCustomReactComponentClass a react element or react component I am asking because here I was told on each render the same instance of MyCustomReactComponentClass is used If that is the case and 1 MyCustomReactComponentClass is react element and 2 given that according to doc react elements are immutable updating the rendered element then how would Clock pass different props to the same instance of MyCustomReactComponentClass on each render if the latter is immutable,,"gaearon,gaearon,gaearon",2017-10-30 08:25:55,2017-10-30 11:24:48
PR,Removing dot to avoid redirect to facebook com,It seems a not relevant bug but this dot is making the URL invalid and redirecting the user to In my case I wasted some time to understand what was happening image,,gaearon,2017-10-30 14:02:12,2017-10-30 14:16:18
IS,Calling setState inside a requestAnimationFrame loop causes a leak,Do you want to request a feature or report a bug Bug What is the current behavior If a component implements a requestAnimationFrame loop and calls setState inside it it will endlessly create listeners on the page as shown in the picture below Chrome Developer Tools While I understand that React 16 uses rAF for its reconciliation algorithm running multiple rAF should work without producing the above behavior From my understanding all rAF callbacks will be appended to the next frame is callstack If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Here is the minimal code required to trigger this behavior in React16 Profiling this fiddle will produce the same result as in the previous picture What is the expected behavior In React 15 6 2 this behavior does not happen running the same code will not produce any unwanted listeners as seen in the picture below Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React This was tested in React 16 0 0 on Ubuntu 16 04 with Chrome 57 0 2987 98 The behavior did not happen in previous versions of React,,"gaearon,gaearon",2017-10-28 13:54:28,2017-10-30 14:27:52
IS,Mismatch node type when hydrating SVG from SSR,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Report a bug What is the current behavior Getting the following error while trying to hydrate SSR content Expected server HTML to contain a matching linearGradient in defs If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 The following check returns false L453 L462 as type is linearGradient and instance nodeName toLowerCase is lineargradient What is the expected behavior Node types are compared correctly as SVG uses camelCase for tagName Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16,,"gaearon,gaearon",2017-10-30 06:22:43,2017-10-30 15:29:02
PR,Add Fragment as a named export to React,This PR is a part of the bigger change to introduce fragment syntax to JSX With this named export we will be able to de sugar into React createElement React Fragment calls UPDATE Summary of discussions in PR We want to align fragment with array behavior top level keyed React Fragment create fragment fiber top level un keyed React Fragment no fragment fiber created nested fragments fragment fiber created React Children will treat fragments as a terminal element In this gist switching between arrays and un keyed fragments will preserve state e g Child will be preserved when rendering Child and then Child You can think of it as the quantum theory of fragments It has both array like and element like properties,,"clemmy,acdlite,clemmy,acdlite,clemmy,acdlite,acdlite,acdlite,acdlite,acdlite,acdlite,acdlite,acdlite,acdlite,acdlite,acdlite,acdlite,acdlite,clemmy,gaearon,gaearon,gaearon,gaearon,gaearon,clemmy,clemmy,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,clemmy,clemmy,clemmy,sebmarkbage,sebmarkbage,clemmy,clemmy,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,clemmy,clemmy,gaearon,gaearon,gaearon,clemmy,gaearon,gaearon,clemmy,gaearon,clemmy,clemmy,clemmy,gaearon,clemmy,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,clemmy,sebmarkbage,clemmy,clemmy,gaearon,acdlite,gaearon,acdlite,acdlite,acdlite,acdlite,gaearon,clemmy,trueadm,sophiebits,clemmy,gaearon,gaearon,trueadm,gaearon,aweary,acdlite,acdlite,gaearon,gaearon,acdlite,trueadm,gaearon,acdlite,acdlite,acdlite,acdlite,trueadm,acdlite,trueadm,clemmy,gaearon,clemmy,clemmy,acdlite,acdlite,acdlite,clemmy,trueadm,clemmy,clemmy,clemmy,clemmy,clemmy,sophiebits,clemmy,sebmarkbage,sebmarkbage,sebmarkbage,clemmy,clemmy,clemmy,sophiebits,gaearon,clemmy",2017-09-22 21:46:04,2017-10-31 00:52:41
IS,In some cases will lose some components,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug I just have a problem do not understand What is the current behavior Behind react in the div there are some components that are not loaded If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 body div id successDiv div id reactDiv div id notLoadedDiv body The document structure looks like this The second div is used with react components The first div is able to load properly into dom But the last div can not load into dom What is the expected behavior All divs should be loaded normally Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React react system win10 14393,,"clemmy,gaearon",2017-10-31 03:57:22,2017-10-31 06:29:16
PR,Changed the error message displayed when a select element has props multiple set to true and value set to null,Addresses issue 9038 I changed the error message shown when a select element with props multiple set to true has a value of null to recommend an empty array instead of an empty string Given that the empty string is a common term but the empty array is less so I also changed the null input value error message shown for textarea and input to use an empty string instead of the empty string and changed tests to match,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2017-10-06 23:13:20,2017-10-31 11:47:59
IS,Change warning for select value null to suggest an empty array rather than empty string,Do you want to request a feature or report a bug Bug What is the current behavior Setting the value to on a select with size 3 does not deselect the currently selected option If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template JSFiddle What is the expected behavior After rendering a select with the value set to an empty string I expect there to be no selection in the rendered select box Mainly this expectation comes from this React warning when I use null instead of I get the behavior I expect Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React I have gotten this with React 15 3 0 and whichever version is used in the fiddle I do not know if it worked in previous versions This was tested using Chrome 56 on OS X,,"syranide,gaearon,gaearon",2017-02-21 21:49:33,2017-10-31 11:48:09
PR,yarn prettier runs a too long command for OS windows,fixed issue 9500,,"gaearon,gaearon,vjeux,gaearon",2017-04-25 14:55:41,2017-10-31 11:48:28
PR,Move RAF check to first render,fixes 11114,,"jquense,gaearon,gaearon,sebmarkbage,gaearon,jquense,gaearon",2017-10-05 15:23:31,2017-10-31 11:49:07
IS,Check for rAF polyfill lazily,Cases like issuecomment 334475000 can be pretty confusing We should probably move the warning to happen during first ReactDOM render rather than immediately,,"gaearon,gaearon",2017-10-05 14:43:33,2017-10-31 11:49:19
IS,Errors Guys help me pls,HELP PLS,,jquense,2017-10-31 11:55:53,2017-10-31 12:01:09
PR,Warn if class has a render method but does not extend React Component,Hi adding the fix for 10103 test prettier lint flow all done and passing replaces PR 11149,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2017-10-10 02:00:41,2017-10-31 12:02:56
IS,Improve error when you have forgotten to extend React Component,When you forget to extend React Component you get the following error I believe it would happen in ReactCompositeComponent js L248,,"aweary,acdlite,acdlite,aweary,acdlite,gaearon,gaearon",2017-07-04 05:44:46,2017-10-31 12:03:09
IS,Web Development,If I use laravel react js and mysql for building a site like yelp or tripadvisor then will it be a good option or not Which rendering CSR or SSR approach will be good for the website Initially I want to stay in monolithic architecture and 1 year later i will go for microservice architecture so which method should i follow to make this shifting easier mono to micro Moreover my target is to make the site progressive web app from the very beginning So need suggestion from you guys,,gaearon,2017-10-31 11:58:16,2017-10-31 12:09:09
PR,Deduplicated many warnings 11140,Deduplicated the following warnings 1 Can only update a mounted or mounting component This usually means you called setState replaceState or forceUpdate on an unmounted component This is a no op 2 s componentWillReceiveProps Assigning directly to this state is deprecated except inside a component is constructor Use setState instead ' 3 An update setState replaceState or forceUpdate was scheduled from inside an update function Update functions should be pure with zero side effects Consider using componentDidUpdate or a callback 4 setState Cannot call setState inside getChildContext Let me know if it looks ok to you,,"anushreesubramani,gaearon,gaearon,gaearon,gaearon,anushreesubramani,anushreesubramani,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,anushreesubramani,anushreesubramani,gaearon,gaearon,anushreesubramani,anushreesubramani,anushreesubramani,anushreesubramani,anushreesubramani,anushreesubramani,gaearon,gaearon,anushreesubramani",2017-10-13 11:21:28,2017-10-31 12:35:29
IS,Proposal Promise as setState first arg,We have a recommend way to use setState use a function instead of object,,gaearon,2017-10-31 11:24:04,2017-10-31 12:38:39
PR,Fix release manager version command,Finds the package json files to update with fs instead of hard coding I used this to bump the version for 16 0 0 alpha 12,,acdlite,2017-05-02 21:30:25,2017-10-31 12:39:15
PR,Fixed invalid prop types error message to be more specific,Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Format your code with prettier yarn prettier 6 Make sure your code lints yarn lint Tip yarn linc to only check changed files 7 Run the Flow typechecks yarn flow 8 If you have not already complete the CLA Learn more about contributing,,"NicBonetto,sebmarkbage,gaearon,gaearon,NicBonetto,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,NicBonetto,gaearon,NicBonetto,NicBonetto,gaearon,gaearon,NicBonetto,NicBonetto,gaearon,gaearon,gaearon",2017-10-20 22:28:54,2017-10-31 13:02:42
IS,Make invalid prop type warnings more specific if they are falsy,This is a common pattern However if condition is false 0 or then this correctly warns You should have used condition undefined instead We could suggest that more specifically in the warning The longer term alternative is to use the proposed more concise operator,,"sebmarkbage,NicBonetto,gaearon,NicBonetto,NicBonetto,gaearon,NicBonetto,gaearon",2017-10-19 18:19:50,2017-10-31 13:03:00
IS,Unhandled error is displayed twice,This was a bit weird img width 967 alt screen shot 2017 08 04 at 3 51 29 pm src Look at the last log Notice how our internal error that we are supposed to just give to the error boundary is said to be uncaught I wonder why It does not look like intentional,,"gaearon,gaearon,gaearon,gaearon,mjomble,gaearon,mjomble,gaearon,mjomble,gaearon,gaearon,gaearon",2017-08-04 14:52:41,2017-10-31 13:41:02
PR,Pass pendingProps as argument in createWorkInProgress,Update createWorkInProgress in ReactFiber js to accept pendingProps as argument To avoid merge conflict open new pr ref,,"zombieJ,acdlite,zombieJ,zombieJ,zombieJ,gaearon",2017-10-20 03:34:20,2017-10-31 13:46:18
PR,Support iframes nested browsing contexts in selection event handling,Fixes 427 dda228b90e5676611a7c324aebf12b2751321410 depends on to actually work With the current version of fbjs the doc argument will be ignored and getActiveElement will execute relative to the global document Had some more tests for ReactInputSelection that rely on DOM functionality that jsdom doesn t yet support Includes this block for setSelection but requires a working getSelection implementation see,,,2016-10-04 16:19:22,2017-10-31 14:29:51
PR,Support iframes nested browsing contexts in selection event handling stale version,As mentioned in issuecomment 252313617 this PR takes the approach of checking all nested browsing contexts and saving and restoring their selections regardless of whether or not they are the primary focused element on the page It is a more complete alternative to the solution in 7866 and like that PR fixes 427 It is also like the original dependent on facebook fbjs 188 but that PR has been merged into master so as soon as a new fbjs version is released this will be ready to go,,"sophiebits,philipp-spiess,sophiebits",2016-10-11 04:10:51,2017-10-31 14:33:34
PR,add Portal support to React Children calls,Solves 11373 Not sure if Portals should expose their children to the React Children call or just the portal itself Right now it is set up to expose the portal,,"MatteoVH,gaearon,MatteoVH,gaearon,MatteoVH,gaearon,MatteoVH",2017-10-26 19:47:24,2017-10-31 14:59:28
IS,React Children support for portals,I do not think they are currently checked against We should probably treat them same as elements,,"gaearon,MatteoVH,gaearon,gaearon",2017-10-26 15:14:17,2017-10-31 14:59:54
IS,JSX Objects,JSX Babel JSX React createElement Babel JSX React createElement,,"bvaughn,bvaughn",2017-10-31 15:13:21,2017-10-31 15:41:53
IS,ReactDom,React DOM JSX XSS ReactDOM,,"bvaughn,bvaughn,bvaughn,monkindey",2017-10-31 15:07:23,2017-10-31 15:41:54
PR,Inline fbjs lib EventListener dependency,We explicitly do not want to shim this since things can go wrong such as memory leaks and we do not use the return value We can probably even drop the IE path now since we do not support it Not sure if that will be a true breaking change though We still need to integrate with the TimeSlice mechanism internally I think we can do that at the error guard boundary instead since we invoke all our event handlers through that guard However since that is also used for error boundaries it might also cause those to play into the TimeSlicer Is that what we want anyway,,"sebmarkbage,trueadm,sebmarkbage,gaearon,gaearon,sebmarkbage,sebmarkbage,sebmarkbage,acdlite,acdlite,sebmarkbage,sebmarkbage,sebmarkbage",2017-10-30 19:36:15,2017-10-31 18:23:04
IS,Use of ReactOS logo and project name,This project seems to have subsumed almost the same name and logo of the ReactOS project That seems rather disengenuous The ReactOS logo is very close the spinning atom logo with a globe in the middle and so is yours The project name is ReactOS and your is ReactJS This seems at best confusing and at worst it looks as if your project is treading on the coat tails of ReactOS EDIT name correction,,"gaearon,gaearon,gaearon,bjrmatos,bjrmatos,bjrmatos,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2017-09-26 21:39:09,2017-10-31 20:22:45
IS,FocusIn FocusOut for relatedTarget in IE,Currently react 16 0 0 there is no support for FocusIn FocusOut events But the problem is that in IE 11 blur event has no relatedTarget so it will be great to support such events So the question is will be such support in later versions This problem was mentioned in but there is no answer,,jquense,2017-10-31 10:19:57,2017-10-31 21:13:04
PR,Use warning over console error direct call,For consistency,,gaearon,2017-10-31 22:31:48,2017-11-01 00:41:03
PR,Put React Fragment under a feature flag,Let is feature flag the React Fragment export so that it is not publicly consumable until 16 2 0 At this point Typescript 2 6 2 should also be released to support this,,"clemmy,gaearon,gaearon,gaearon,clemmy,gaearon,clemmy,sophiebits,clemmy",2017-10-31 23:26:13,2017-11-01 00:43:56
PR,Depend on prop types checkPropTypes not prop types itself,Two small changes 1 Instead of reimplementing prop types checkPropTypes we can just use it I think it did not exist when this copy was written but now we can switch to it 2 Importing prop types itself is going to be harder to DCE in DEV only once we move to ES Modules It is doing some funky business in entry points and builds up exports in a way that Rollup might consider side effectful s It seems much simpler to just inline the implementation since we only need a subset and there are no other places where we need it s We can delete it see below 3 Actually I just checked and the onChange annotation can be removed altogether That check existed before we had DEV time hooks verifying prop types So currently we fire the warning twice img width 545 alt screen shot 2017 10 31 at 23 34 24 src This removes the unnecessary extra warning so now it is handled once just like all other host elements img width 542 alt screen shot 2017 10 31 at 23 34 02 src So this both makes DEV bundle smaller and removes an unnecessary noisy warning,,gaearon,2017-10-31 23:22:09,2017-11-01 10:57:25
IS,class styles inside javasript styles,Hi If I have,,jquense,2017-11-01 14:16:39,2017-11-01 14:33:43
IS,Why are Error Boundaries not triggered for event handlers,Do you want to request a feature or report a bug feature question What is the current behavior componentDidCatch is not triggered when the error occurred on event handlers in react components What is the expected behavior to be honest without reading the full documentation about error boundaries my first attempt to test error boundaries was to trigger an error in an event handler ouch then i discovered that componentDidCatch is triggered only on react lifecycle methods and render I'm wondering why this design decision has been done like that it would be convenient to have only one component that handle all unexpected exceptions inside our components instead now we should have two ways to handle errors inside the component I have also created an stackoverflow question with the same concern thanks Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React react 16 0 0,,"gaearon,gaearon,acdlite,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2017-10-31 12:19:14,2017-11-01 14:48:39
PR,Constructor error message,Addresses 11381,,"deanbrophy,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,deanbrophy,gaearon,deanbrophy,gaearon,deanbrophy,gaearon,deanbrophy,deanbrophy,gaearon",2017-10-29 00:18:18,2017-11-01 21:01:24
IS,Show a better warning when accidentally returning from constructor,Based on a conversation with I wrote and the error was super confusing it told me that render is not defined on the component which did not make sense since I returned it We can fix this to show a different message if type has prototype isReactComponent but constructor gave us something without a render method,,"gaearon,M-ZubairAhmed,gaearon,deanbrophy,gaearon,M-ZubairAhmed,deanbrophy,gaearon,gaearon",2017-10-26 23:51:20,2017-11-01 21:02:07
IS,Raising issue Warning React depends on requestAnimationFrame Make sure that you load a polyfill in older browsers,I want to know how suppress this warning in IE edge such as IE 9 IE10 IE11 like below 2017 11 02 162715 could some guys help me thanks so much,,gaearon,2017-11-02 08:31:25,2017-11-02 10:47:12
PR,Always run React Fragment tests,As points out in discussion r148433105 we didn t do this correctly Instead of not running the tests at all and potentially breaking the code we should always run the relevant tests with the feature flag on We don t test both code paths because it is purely additional although if the flag stays in for a long time then we should think about it,,gaearon,2017-11-02 13:29:12,2017-11-02 13:31:18
PR,Undo fbjs lib EventListener inlining,This approach caused an issue internally so we are backing away from it I reverted the changes in but kept the test changes since it is equivalent but better and tests public API instead To solve the leak we are experiencing with our internal EventListener fork we will use a different strategy The plan is to attach top level listeners by root,,gaearon,2017-11-02 13:36:58,2017-11-02 13:43:29
IS,,JSX Prevents Injection Attacks By default React DOM escapes any values embedded in JSX before rendering them Thus it ensures that you can never inject anything that is not explicitly written in your application Everything is converted to a string before being rendered This helps prevent XSS cross site scripting attacks ReactDom,,"M-ZubairAhmed,gaearon",2017-10-31 16:04:05,2017-11-02 14:59:53
PR,Validate built bundles with a few ESLint rules,I bumped into a scary Rollup bug yesterday issuecomment 341277757 This adds a very limited and fast lint on compiled bundles to prevent this sort of regressions from happening It only runs on CI,,gaearon,2017-11-02 15:40:27,2017-11-02 15:50:26
PR,Update Rollup,Seems like we will need to do this to get a new option that was added in 0 43 I updated to 0 49 as it was out for a while and does not have the regressions from more aggressive 0 50 The size has increased but the reason seems to be mostly duplication of 'use strict' that is now added in the bundle many times for every module I do not understand why yet We will get rid of them with ES modules though I think so maybe not a big deal img width 499 alt screen shot 2017 11 02 at 01 03 32 src img width 664 alt screen shot 2017 11 02 at 01 05 17 src Diff,,"gaearon,gaearon,nhunzaker,gaearon,gaearon,nhunzaker,nhunzaker",2017-11-02 01:09:59,2017-11-02 16:56:13
PR,Convert the Source to ES Modules,x Fix transforms to work in both CJS and ESM modes x invariant x object assign x Jest x Convert packages to ESM x react x react art x react call return x react test renderer x react cs renderer x react rt renderer x react noop renderer x react dom x server x client x events x shared x react native renderer x react reconciler x events x shared Note ESM can depend on CJS but not the other way around Convert things with less dependents on internals first Final cleanup Remove CJS only code in Rollup build Forbid CJS x Make sure shims work x Ensure we do not regress on bundling DEV only code s Perhaps a whitelist of modules with no side effects s x Do not forget lowPriorityWarning warning DOM hooks DOM nesting hyphenation utils prop types dev whitelists debug things Revisit the default hack in top level index js files Perhaps also ESM ify tests Consider turning some default exports into named,,"gaearon,bvaughn,bvaughn,gaearon,gaearon,gaearon,gaearon",2017-10-27 17:18:32,2017-11-02 19:50:04
PR,Remove unnecessary 'use strict' in the source,It is implied by modules and Babel always inserts it anyway I only modified files inside packages and only the ones that use ES Modules shared events src excluding mocks tests and ReactVersion,,gaearon,2017-11-02 20:20:43,2017-11-02 20:32:48
IS,RFC ReactFiberReconciler release artifact,This issue is intended to be a discussion for how to distribute the ReactFiberReconciler js file and dependencies for custom renderers Currently first class renderers within the React codebase Facebook ecosystem do not have any concerns for this because of Haste access to the React js build publish tooling within this codebase 3rd party renderers are currently adding react dom to their dependency list and requiring react dom lib ReactFiberReconciler js to build and expose their custom renderer Ideally ReactFiberReconciler js would be distributed with the react package or as a standalone react fiber reconciler package Whether this is at react reconciler js or react lib reconciler js idk I think at the root is better to continue the discouragement of looking in react lib for anything I understand flat bundles are coming too I don t know if that should block this or if this could be a flat bundle or any other alternative Is this something the team is ready to commit to and support if we came to a decision on approach and I put together a PR Related issues 6795 Create Separate Copies of Each Renderer 5472 Include flow type definitions flow type distribution proposal at issuecomment 282394248,,"iamdustan,sebmarkbage,gaearon,gaearon,iamdustan,gaearon,gaearon,gaearon,gaearon,bvaughn,gaearon,gaearon,gaearon,iamdustan,sophiebits,gaearon,gaearon,iamdustan,gaearon,iamdustan,gaearon,iamdustan,bvaughn,sophiebits,gaearon,sophiebits,gaearon,sophiebits,sebmarkbage,sebmarkbage,gaearon,gaearon,iamdustan,iamdustan,gaearon,gaearon,gaearon",2017-03-03 18:30:15,2017-11-02 20:34:44
IS,Modernize release process,It is way too much work to do a React release right now It is mostly muscle memory for me at this point but it should be easy for anybody to do it Historically I kept certain steps manual because I screwed things up and wanted to be able to pause and double check There are a few things contributing to the difficulty use of react bower repo as the first push target which is a result of fb me link generation CDNization needing to happen on internal FB infra manual steps across multiple repos manual version modification assets needing to be in multiple places copied across branches A few ideas we should be able to differentiate between pre and final releases It should be a single command to ship a new alpha at any point and they should be lightweight final releases need a little more since they will get installed by default by people and have additional requirements eg changelogs assets in multiple places npm run release which then does all the things It could be an interactive process start using the GitHub releases APIs to store build assets cutting out steps set up cdn reactjs org and just host our builds there dropping fb me entirely risk we have to run this forever alternatives work with existing CDNs and make sure we can have versions deployed on command pull based autoupdating can result in delays things like jsfiddle our tutorial need assets available immediately investigate lerna could be helpful with the multiple packages we have though we ideally want to disentangle the releases,,"zpao,gaearon,gaearon",2016-04-29 18:50:19,2017-11-02 20:38:03
IS,Marking as an external in Rollup should not include unused modules,See for details,,"gaearon,trueadm,trueadm,gaearon",2017-04-27 12:15:56,2017-11-02 21:45:15
IS,Jest watching mode seems to unexpectedly cache sources,Probably some configuration issue after transitioning to Workspaces but I have to restart the watcher for it to see my changes sometimes,,"gaearon,thymikee,gaearon,gaearon,gaearon",2017-10-19 15:32:04,2017-11-02 21:45:54
IS,Tutorial text of challenge 1 is unclear,Do you want to request a feature or report a bug A bug What is the current behavior The first challenge at the end of the tutorial says Display the move locations in the format 1 3 instead of 6 It suggests that we are already displaying the locations of the moves but we are not It does not specify where the move locations should be displayed either This makes the challenge unclear What is the expected behavior I would change the text of the challenge to Display the location for each move in the format col row in each history link or something similar Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React v16,,gaearon,2017-09-27 16:14:06,2017-11-02 21:48:15
IS,Change the github issue labeling to show issues that have already been claimed,Not an issue with React but more a workflow issue for github and the issue tracking workflow For example there are plenty of issues labeled Difficulty beginner but when looking through those issues many of them have already been claimed for someone to work on or in many cases a PR has already been submitted After digging through a half dozen issues like this one just tends to give up It would be helpful to be able to see only issues that are still truly looking for contributors,,"aweary,gaearon,aweary,gaearon,gaearon,gaearon",2017-04-21 18:01:16,2017-11-02 21:49:29
PR,Put createRoot export under a feature flag,As per the request of This feature is not ready to ship yet,,"clemmy,nhunzaker,gaearon,clemmy,acdlite,clemmy,gaearon,clemmy,gaearon,gaearon",2017-11-01 22:21:39,2017-11-02 22:21:07
PR,Auto install or update release script Yarn deps before running,Stepping through a dry run of the new release process for 16 1 0 beta and realized that there was no guaranteed that we were running the latest version of the release script dependencies,,"bvaughn,bvaughn",2017-11-02 22:10:56,2017-11-02 22:21:29
IS,React complains about onChange for input type submit,I'm confused about this error Failed form propType You provided a value prop to a form field without an onChange handler It makes sense that it would complain about inputs of other types but it seems like a bug to show up for a submit button W3 is docs states that value is valid to show text for a submit input and the docs for React clearly show examples with forms and submit buttons where the only piece of button code is input type submit value Submit My code is simple I have a Button component and it is called like this Button text Something and my component renders like this However I get the warning and my button does not submit the form it is apart of a form object with an onSubmit handler I believe it is rendering as readOnly as the warning states Does anyone know why this happens,,,2017-11-02 23:21:13,2017-11-02 23:26:18
PR,Support iframes nested browsing contexts in selection event handling for React 16,Fixes 427 As promised in issuecomment 323630820 here s a version of 9184 that is based on React 16 and entirely removes the React input selection restoration plugin other versions of this work include 7866 and 7936 was most recently active in the latest previous PR and had mentioned wanting to look into the React input selection restoration logic I m not sure how far he was able to get with that but I d love to know anything discovered We are currently QAing the built version of the work in this PR to verify it for our own uses but a quick initial pass was promising As mentioned elsewhere making the React input selection restoration logic work across nested browsing contexts broke regular text input blur as of Chrome 60 so I tried removing the whole plugin and everything worked beautifully I don t know React s official policy on browser support but so far in the latest 2 versions of every browser we ve tested there seem to be no regressions from removing that plugin According to the comments in the file If any selection information was potentially lost restore it This is useful when performing operations that could remove dom nodes and place them back in resulting in focus being lost The best way to test if the plugin is still needing would of course be to set up a component that can have selections and then cause a render that would result in it being removed and then placed back in within that single render transaction but I don t know how to make that happen nor do I know if that is in fact still possible with React fiber For anyone who wants to test these changes out in their own project you can do so by updating the react and react dom dependencies in your package json to,,"sophiebits,aweary",2017-10-31 14:29:23,2017-11-02 23:32:06
IS,16 1 0 beta still yields error on SSR rehydration feOffset in filter,Bug Since the 16 Regressions issues was closed I could not comment on this,,gaearon,2017-11-03 07:40:40,2017-11-03 07:43:28
PR,Fix ReactShallowRenderer not rerendering when calling forceUpdate,This is a followup to 11239 Unfortunately the fix implemented for 11236 was incorrect and it did not solve the underlying issue of not rerendering component properly on forceUpdate This PR solves the issue and adds necessary test to make sure it is resolved properly this time,,"d4rky-pl,gaearon,d4rky-pl",2017-11-03 08:03:46,2017-11-03 11:03:07
IS,componentDidCatch not fired as expected,hello guys I try to build custom blog app and here is the branch with below mentioned issue The issue can not bring to live my ErrorBoundary though doing everything like it is described in react 16 docs Debugging shows that componentDidCatch is never called on errors not synthetic new Error nor real ui errors I use ErrorBoundary in my Navigation component Also i did try with conditional throw Error inside Blog render method wrap the very root application component with ErrorBoundary and every time exatly the same effect componentDidCatch not fired Expected behavior componentDidCatch fired when any of child component can not render properly due to unhandled exception like it described in docs Project technology stack My package json Windows Chrome React 16 TypeScript 2 5 3 config here and extended with this file Webpack v3 5 5 with webpack dev server Here is config redux v3 7 2 react redux v5 0 6 react router redux v5 0 0 alpha 8 material ui v1 0 0 beta 8 as components repository,,"gaearon,gaearon,gaearon",2017-10-31 19:13:17,2017-11-03 13:26:12
PR,Fix to reset the forceUpdate flag after the update,This is a PR to follow up 11439 Currently forcedUpdate flag is never reset until shouldComponentUpdate returns false so A test in this PR does not pass This is a PR to fix this I think the flag can be reset after the render,,"koba04,koba04,gaearon,koba04",2017-11-03 11:29:43,2017-11-03 14:29:15
IS,Server side rendering and async routing,Hi When I render a synchronous route on server side and then the client side hydrate the dom I get a warning because client side asynchronous route does not find the component image In other hand react fiber reconciliation tries to remove this non hydratable node So the page makes a blank flash on client side image,,gaearon,2017-10-31 16:21:10,2017-11-03 15:14:19
IS,Occams software,I am a reasonably familiar React coder that was looking for a simple template for a image oriented app I downloaded and reviewed hacked played with many of the examples in this section While most are useful I did notice something that I felt was worth mentioning Perhaps I am alone but I find that many files are confusing when trying to figure out how code works Perhaps it is the hangover for java trained engineers bringing their coding style to javascript If so then I really wish I had been to the party The very nice emoji search app is a good example If one consolidates all the files into one file one can make a version that is clear and readable and easily understood with fewer lines of code than there are code modules to wade through to figure out how the code works I actually thought this to be impossible and it is impossible with 80 character or 132 character lines but with the full use of a 1080p monitor it is very easy to do I am only mentioning this here because react seems to be a particularly sprawling framework that could do with a bit of grooming Most of the demo is from FB with react are single page demo is more or less Does anyone else agree with me and if so I would like to propose that there be a section of examples called full app snippets or something equally silly for those of us who get directory vertigo easily Sometimes it reminds me of sitting in the back of a car reading a book on a very windy road image,,"gaearon,gaearon,gaearon,gaearon",2017-10-28 21:38:10,2017-11-03 15:15:30
IS,Deduplicate the Can only update a mounted or mounting component warning,Note is working on this please don t send PRs if you aren t her Similar to Wanna take this one as well It would need to deduplicate based on owner stack info similar to how works,,"gaearon,anushreesubramani,anushreesubramani,gaearon,anushreesubramani,gaearon,anushreesubramani,gaearon,anushreesubramani,gaearon",2017-10-06 22:06:38,2017-11-03 15:17:11
IS,Deduplicate the warning about functions not being valid children,Same as but for this one img width 476 alt screen shot 2017 10 04 at 16 35 07 src,,"gaearon,gaearon,gaearon",2017-10-04 15:36:13,2017-11-03 15:17:51
IS,Infinite Loop when maximum update depth exceeds,Do you want to request a feature or report a bug Bug What is the current behavior I wrote this component to recreate the warnings from 11081 and to fix it And in the process found that this error came up 'Uncaught Error Maximum update depth exceeded This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate React limits the number of nested updates to prevent infinite loops ' But the execution did not stop It was going in an infinite loop and printing 2 variants of the same error one after another Screenshot for your reference react bug If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 Snippet given above What is the expected behavior There should not be an infinite loop The execution should stop after printing the error Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 Chrome 59 Ubuntu I tested it in older versions of react and this problem is not present there,,"anushreesubramani,aweary,gaearon,aweary,gaearon,anushreesubramani,gaearon,anushreesubramani,gaearon",2017-10-06 14:25:00,2017-11-03 15:24:36
IS,correct callback in custom renderer for repaint tick,from some previous discussions I gather that there is a way to render the whole tree when it is ready e g flushSync updateContainer however I do not see a way to get a callback when it is completed Is that possible via one of the builtin functions The way I'm dealing with it now is to make sure my root node is a higher order component and then put my callback logic in componentDidUpdate It seems to work so far but it would be better if this could be a little closer to the metal yet still only after the entire tree is definitively reconciled and previous renders finished Thanks again,,"gaearon,gaearon,gaearon",2017-09-29 02:04:49,2017-11-03 15:37:46
IS,return value type in prepareUpdate,The official renderers seem to generally return a const of in prepareUpdate for example here L493 While the tutorial at suggests to return true What is the nature of the return type from prepareUpdate and how does it affect commitUpdate,,"iamdustan,gaearon",2017-09-28 04:28:43,2017-11-03 15:38:17
IS,Remove old dist tags,Do you want to request a feature or report a bug bug I guess What is the current behavior There are a few tags on npm that I think aren t used anymore see the registry If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template These tags can be removed see docs What is the expected behavior Only supported tags existing Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React,,"Haroenv,gaearon,Haroenv,gaearon,Haroenv",2017-08-17 14:43:52,2017-11-03 15:43:16
IS,Relationship between render updateContainer and requestAnimationFrame,This is highly related to When I call ReactDOM render or more accurately updateContainer from within a renderer it seems the callback param is called somewhere in between updating and rendered Specifically if the callback is itself is a call to updateContainer e g a recursive approach I get an error of flushSync was called from inside a lifecycle method It cannot be called when React is already rendering tangential note this happens even if updateContainer was triggered elsewhere like deferredUpdates flushSync may be a bit misleading Can someone please explain this a little more what does the order look like between updateContainer and the callback My use case is as described in the other issue but for the sake of clarity I would like to 1 Call the top level render when the components have all finished rendering 2 Rely on React is requestAnimationFrame timing rather than inject another one for triggering prop changes 3 Do all this without making the root node manage it via setState componentDidUpdate Real world scenario is using React to drive animation via a custom renderer Thanks,,gaearon,2017-10-03 08:38:49,2017-11-03 15:44:06
IS,Component unmounts constructor state sets up componentWillMount does not fire,What is the current behavior Component unmounts constructor state sets up componentWillMount does not fire What is the expected behavior If constructor state sets up the the componentWillMount must probably fire right after it Is this correct Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React 1 16 0 0 alpha 12 2 Not sure,,"gaearon,gaearon",2017-09-23 09:56:38,2017-11-03 15:46:28
IS,Remove support for cloneElement getMountedInstance in shallow renderer,There was a test added as part of shallow renderer rewrite 9426 in that I don t understand It tests that you can take an instance call cloneElement on it and pass the result to the shallow renderer If we are doing this internally this seems like a misunderstanding of how the API should work and we need to fix those callsites to read getRenderOutput instead of getMountedInstance You can see the test is wrong because if you change it to render to a different shallow renderer like this The argument we re passing in this case is not a proper React element and doesn t actually have element type It just mostly happens to work because both React elements and ShallowRenderer instances have props on them and code almost doesn t read anything else in the update path This is an example hack L147 L148 that we needed because of this I think we should just delete this test and fix the internal callsites It was never intentionally supported and prevents me from doing some other fixes in the shalllow renderer,,"gaearon,gaearon",2017-11-03 14:22:34,2017-11-03 16:16:56
PR,Remove support for passing badly typed elements to shallow renderer,Fixes I believe this was added unintentionally and we didn t actually intend to support this case I added early validation to catch these cases since they can be subtly broken if we keep allowing them,,gaearon,2017-11-03 14:45:07,2017-11-03 16:16:56
IS,Ca not contribute to React on Windows,Do you want to request a feature or report a bug I am not sure maybe it is just a question What is the current behavior I fork the lasted master branch of react and execute npm run build at the root directory But get some errors below If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template What is the expected behavior Build successfully Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React 16 0 0 alpha 11 Windows I am not sure whether it is fine in previous versions of React this is my first build,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2017-04-27 06:34:48,2017-11-03 18:32:34
PR,Use only public API for EnterLeaveEventPlugin Tests,This PR is related to issue 11299 Express more tests via public API I have managed to rewrite the EnterLeavePlugin tests using public API but I'm not sure if I'm on the right path What I did was basically analyze what was being done inside EnterLeaveEventPlugin js and move the needed parts to the test which luckily led to a much simpler code Does this make sense Happy to make any necessary changes or follow a different path if need be Thanks for the opportunity of contributing,,"accordeiro,gaearon,gaearon,accordeiro,gaearon,accordeiro,gaearon,gaearon,accordeiro,accordeiro,gaearon,gaearon",2017-10-21 22:47:11,2017-11-03 19:18:23
PR,Release script follow up work after 16 1 0 beta release,Resolves remaining items from 11435 Commits are atomic,,"bvaughn,gaearon,gaearon,bvaughn,bvaughn",2017-11-03 04:48:31,2017-11-03 20:19:32
IS,Release script follow up items,Today I used the new release script for the first time to publish 16 1 0 beta Here are a couple of things I noticed that I want to follow up on PR 11434 x Auto install or update release script Yarn deps before running PR 11437 x publish script should git tag a version I manually tagged the 16 1 0 beta release X The post build test instructions should show fully qualified paths to prevent you from accidentally verifying the wrong build eg the checkout the release script is running from rather than the p path x publish to npm check should handle pre 1 0 packages This one failed for the 0 2 0 reconciler release b'c it expected it to be 16 1 0 beta For that matter it should have probably been 0 2 0 beta x When publishing a stable release latest also update the next release to point to it,,"bvaughn,bvaughn,bvaughn",2017-11-02 22:57:15,2017-11-03 20:20:01
PR,Use only public api for ReactDOMEventListener test js,Related to 11299 Express more tests via public API Hey After a couple hours fighting with this one I think I got the idea Could you guys check if I'm in the right direction BTW I lost quite some time until I realized this line L32 was messing up with ReactTestUtils SimulateNative Funny that is probably the reason why we are using just the public api,,"sebmarkbage,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2017-10-22 20:51:45,2017-11-03 20:43:57
PR,Add a way to suppress DevTools logs and warnings,Addresses The idea is that the people who need it can shim the REACT DEVTOOLS GLOBAL HOOK global in their webpack browserify configs with an object like isDisabled true Basically same approach as I suggested in issuecomment 340201139 but does not produce an extra warning,,"gaearon,gaearon",2017-11-04 00:09:02,2017-11-04 00:21:13
PR,Enable User Timing API integration with a feature flag,It used to be gated by DEV With GCC a static feature flag set to DEV for open source bundles is just as good Internally this lets us experiment with enabling it in production for a subset of users at the cost of shipping larger bundles at FB The diff is best read with w 1 because most of this is whitespace I just converted it to named exports and put the body of each function into a ReactFeatureFlags enableUserTimingAPI check Internally this points to a dynamic module that can change at runtime,,"gaearon,gaearon",2017-11-04 01:51:05,2017-11-04 02:04:03
IS,Ensure linted bundles exist,I added validation of built bundles in However I actually messed it up and ESLint was not running on any files because of invalid arguments I fixed that here diff edcddc0e0143d5a5a93d0951fd599794 We should fail the build if the glob patterns it is searching for do not exist,,"gaearon,misoguy,misoguy,gaearon",2017-11-03 18:17:10,2017-11-04 12:57:49
PR,Validate built bundles exists,Fix 11443,,"misoguy,gaearon,misoguy,gaearon",2017-11-04 04:34:44,2017-11-04 12:57:49
PR,Update getEventKey tests to use public API 11299,Hi This PR is my attempt at updating the tests for getEventKey js to use the public API I browsed other test examples that were provided in 11299 After reading those and getEventKey js I came up with an approach that uses Simulate and SimulateNative on the ref node and captures the synthetic event in the onKeyPressCapture and onKeyPressCapture handlers It then tests properties on the event that was passed in I had some questions along the way Is this the right approach Am I using Simulate SimulateNative correctly Am I generating the component ref node generated correctly Thank you for the contribution opportunity Cheers,,"gaearon,gaearon,gaearon,gaearon",2017-10-22 00:51:18,2017-11-04 17:11:50
PR,Rewrite setInnerHTML tests to use Public API,Ref 11299 This rewrites the setInnerHTML tests to utilize dangerouslySetInnerHTML to ensure that nodes with and without the innerHTML attribute are properly set,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2017-10-27 13:10:34,2017-11-04 18:04:14
IS,Fix yarn linc command on Windows,It currently fails on Windows because it depends on grep L101 We should find a way to make it do the same in a cross platform way e g from a Node script,,"gaearon,xjlim,gaearon,gaearon",2017-11-03 18:33:45,2017-11-04 18:09:28
PR,make linc script cross platform,Fix 11444,,"xjlim,gaearon,xjlim,gaearon,gaearon",2017-11-03 21:54:00,2017-11-04 18:09:28
PR,Fix yarn linc command on Windows,this issue I just got the idea that we can match js files without using grep in a second pipe but by passing directly to git diff,,"gaearon,gaearon,xjlim,gaearon,gaearon",2017-11-03 21:06:01,2017-11-04 18:09:45
IS,Need to implement n level expandable listview in react native,I have a basic query in react native I have a side menu with n level expandable options categories subcategories I have to make it in react native I have already research a lot but I'm unable to find any significant solution for this thing Any help will be appreciated as I am new to react native and only have basic knowledge in it May be by creating dynamic components it can be done but if already implemented than it will help me a lot as it is something that is very frequently needed in development,,clemmy,2017-11-05 03:32:47,2017-11-05 06:33:08
PR,Fix build on window,fix window build issue 1 issue on rollup rollup plugin alias 11 resolved in v1 4 0 2 windows path separator break string in rollup plugin replace this solve build part of 9540,,"gaearon,gaearon,gaearon",2017-09-30 02:42:32,2017-11-05 07:50:05
PR,Use named exports in more places,It s Saturday and I m supposed to do fun things But the weather in London is gloomy I just got a flu jab and feel sleepy and I ve already watched more TV than I d like to admit So here goes another fun PR where we reduce the bundle size bundle non gzipped before non gzipped after non gzipped diff gzipped before gzipped after gzipped diff react dom production min js UMD PROD 97 88 KB 94 28 KB 4 31 1 KB 30 46 KB 3 react dom production min js NODE PROD 96 28 KB 92 51 KB 4 30 25 KB 29 63 KB 3 Please review as individual commits and add w 1 to review pages to omit whitespace The strategy is the same for each commit Convert file to named exports Find all usages of the file When convenient use named imports When inconvenient or necessary to keep the whole object use namespace star imports Omitting whitespace with w 1 during review is important so that you don t see giant diffs Most of the changes is just indentation The size benefit comes from reducing junk at module boundaries and being able to minify function names Each individual commit is atomic and passes CI This uncovered one small Flow violation which for now I suppressed It already exists in master but Flow didn t catch it before I verified the packaging fixtures still work,,"gaearon,trueadm,trueadm,gaearon,gaearon,gaearon",2017-11-05 00:47:51,2017-11-05 11:58:37
IS,Check length before accessing characters,See comment here discussion r148954193 Although it seems very unlikely that someone would pass a one character prop the price at least in versions of V8 in Chrome right now is reported to be about 10x So we should check length first and then do the comparison Please comment if you want to take this issue If somebody already commented please let them finish it,,"gaearon,xjlim,xjlim",2017-11-05 12:01:09,2017-11-05 14:46:47
PR,switch ordering of logical and,Fix 11460,,"xjlim,gaearon,xjlim,gaearon,gaearon,xjlim",2017-11-05 13:05:28,2017-11-05 14:46:47
IS,yarn prettier runs a too long command for OS windows,CLI yarn prettier return error too long command The problem is only on windows OS Checked on windows 10 x64 CLI cmd,,"gaearon,gaearon,gaearon,gaearon,xjlim",2017-04-22 22:03:35,2017-11-05 21:06:09
PR,Use prettier api,Fix 9500,,"xjlim,gaearon,gaearon,gaearon,gaearon",2017-11-05 01:21:43,2017-11-05 21:06:09
PR,expose devtools hook with react reconciler package,was working on updating a renderer to the official API and realized I had lost access to this I think should be relatively noncontroversial and safe The ReactDevtoolsHook file has only one real import from fbjs lib warning and hten the type imports from ReactFiber and ReactFiberRoot cc,,"iamdustan,gaearon,iamdustan,gaearon,gaearon,gaearon,gaearon,gaearon",2017-11-03 20:37:46,2017-11-05 23:20:48
IS,,I,,,2017-11-06 07:01:41,2017-11-06 10:17:48
PR,Handle prettier error,Fix comment issuecomment 342014446 image,,"xjlim,gaearon",2017-11-06 05:13:38,2017-11-06 11:17:51
PR,Use const let in more places,Convert ReactDOM to const let Convert ReactDOMComponentTree to const let Convert ReactDOMComponentTree to const let Convert getNodeForCharacterOffset to const let Convert getTextContentAccessor to const let Convert inputValueTracking to const let Convert setInnerHTML to const let Convert setTextContent to const let Convert validateDOMNesting to const let Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Format your code with prettier yarn prettier 6 Make sure your code lints yarn lint Tip yarn linc to only check changed files 7 Run the Flow typechecks yarn flow 8 If you have not already complete the CLA Learn more about contributing,,"raphamorim,gaearon,raphamorim,gaearon",2017-11-06 05:18:10,2017-11-06 11:30:04
PR,Expose injectIntoDevTools to renderers,An alternative to This lets third party renderers inject themselves into the devtools Previously renderers had to reach into reconciler directly to do this However this would not work for third party renderers Instead I put injectIntoDevTools directly on the ReactFiberReconciler return value This way any renderer can choose to call it or not call it Also moves us closer to not using cross package src imports,,"gaearon,bvaughn,gaearon,gaearon,bvaughn,iamdustan,iamdustan,iamdustan,gaearon,gaearon,bvaughn,iamdustan,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,iamdustan,iamdustan,gaearon,iamdustan,gaearon",2017-11-05 23:22:29,2017-11-06 13:09:03
IS,When use React cloneElement original element key changed,when i use React cloneElemen to clone a element i found that the key was changed add ' ' to the original key when i read the doc about cloneElemnt it said key and ref from the original element will be preserved do i miss some thing 1 my code 3 capture of react dom structure 2017 11 06 11 20 16 thanks,,gaearon,2017-11-06 03:22:28,2017-11-06 13:13:07
PR,Use Rollup legacy mode for www builds,Turns out our internal transforms break on getters Let is just not emit them in www bundles Diff,,gaearon,2017-11-06 13:55:49,2017-11-06 13:57:15
PR,Fix dead code elimination for feature flags,Turning flags into named exports fixes the regression in dead code elimination This required some restructuring of how we verify that flag types match up I used the Check trick combined with import typeof as suggested by For www we can no longer re export require 'ReactFeatureFlags' directly and instead destructure it This means flags have to be known at init time This is already the case so it is not a problem In fact it may be better since it removes extra property access in tight paths For things that we want to be dynamic on www currently only performance flag which I have not added yet we can export a function to toggle it and then put it on the secret exports In fact this is better than just letting everyone mutate the flag at arbitrary times since we can provide e g a ref counting interface to it,,"gaearon,gaearon",2017-11-04 12:15:12,2017-11-06 14:14:49
IS,Investigate DCE regression,Seems like we started bundling persistent reconciler in DOM bundles Maybe this negated some effect from ES modules even though they were a net win Need to look into why this happened,,"gaearon,gaearon,gaearon,gaearon",2017-11-04 02:08:17,2017-11-06 14:15:01
IS,React web app is not working on IE 10,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Report a bug What is the current behavior Web app is displaying black screen on load If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 I just created a demo app using create react app and then I npm start that application After that I tried to run it on IE 10 but it displays black screen error saying Expected identifier in console What is the expected behavior The application should be displayed on the IE 10 browser but this is not happening Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React react 16 0 0 react dom 16 0 0 react scripts 1 0 15 Browser IE 10,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2017-11-02 12:34:10,2017-11-06 15:46:52
PR,Put perf integration behind a feature flag,Builds on The plan is to keep it DEV only for open source but enable it based on a feature flag internally so we can experiment with using it in production for some users I have verified this does not inflate the open source build sizes I also exposed a ref counting interface to toggle the flag from www product code,,"gaearon,trueadm,trueadm,iamdustan,gaearon",2017-11-04 13:20:07,2017-11-06 16:07:09
PR,Split static and dynamic www feature flags,This makes it so that www feature flags only include things that are actually behind a GK In theory this would reduce the bundle size of FB bundles In practice it currently does not because even though we know more of them statically we still end up with code like in production bundles This is because we use Uglify for FB builds which is not as smart as GCC I have however verified that if we were to use GCC it would strip them out whereas it can t possibly strip them out in the current version So this seems incrementally better It might also be the case that the www minifer already handles conditions like this In that case even though it doesn t show up as a win here it might actually be in www after compilation,,gaearon,2017-11-06 16:05:43,2017-11-06 16:17:44
PR,Correctly replace shims using relative requires,This is a gross hack for a problem I did not notice when doing ES conversion Rollup alias plugin does not understand that react src ReactCurrentOwner and ReactCurrentOwner in react src are the same file so it fails to apply the custom www shim when referenced via relative path I will add finding a proper fix to follow up task but I have verified this is enough to unblock the sync,,gaearon,2017-11-06 16:40:06,2017-11-06 16:53:13
IS,pions,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug What is the current behavior If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React,,,2017-11-06 23:38:53,2017-11-06 23:43:57
PR,minor typo,concurently concurrently,,monkindey,2017-11-07 08:48:21,2017-11-07 09:39:16
PR,Add warning for componentDidReceiveProps,As per Dan is suggestion on Twitter this is a tiny little PR that adds componentDidReceiveProps to the list of invalid lifecycle methods to throw warnings for,,"acdlite,gaearon,acdlite,gaearon,acdlite,gaearon,gaearon,trueadm,gaearon,gaearon",2017-11-07 10:43:02,2017-11-07 14:00:32
IS,assignment for jsx in double circulation,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug bug maybe What is the current behavior the code is,,gaearon,2017-11-07 06:52:56,2017-11-07 14:27:24
PR,Performance tool Warn when interrupting an in progress tree,Adds a warning to the performance tool when an in progress update is interrupted by equal or higher priority work,,"acdlite,acdlite,gaearon,gaearon,acdlite,gaearon,acdlite,acdlite",2017-11-07 12:35:45,2017-11-07 16:52:49
PR,Update prettier to 1 8 1,Context Currently we are using Prettier 1 2 2 which was released in 2017 04 19 Since then many more minor versions have been released and there unfortunately seems to be some breaking changes with some external productivity libraries For example ' In this PR I upgraded prettier to 1 7 0 and ran yarn and yarn prettier Next I built React and fixed the broken tests,,"clemmy,gaearon,clemmy",2017-09-22 23:17:44,2017-11-07 18:09:34
PR,Fix React createFactory crash,See commits Standalone fix for this is being committed to www,,"gaearon,gaearon,nhunzaker,clemmy",2017-11-07 21:04:50,2017-11-08 00:02:08
PR,Upgrade Prettier to the latest version,,,"lipis,nhunzaker",2017-10-07 18:47:24,2017-11-08 00:29:18
IS,Text next to Element is not render on page in React v16,Hello there Today I spotted a bug which causes the text next to element is not render on page in react v16 1 0 beta I'm not sure if this is a designed behaviour but it was working perfectly in React v15 Let me know if you need any information,,"aweary,aweary,gaearon",2017-11-07 23:02:20,2017-11-08 00:34:29
IS,Default Browser on Android 4 0 x Not Working Blank to Access Web Build From React,I have a problem me build web with React and i tried to access with default browser on android on android 4 0 x not working blank and on android 4 1 above is wokring we write with es 6 and compile es 5 but it not working if i test in android default browser 4 0 x not working blank default browser on android 4 0 x not support with es 5 right can someone help me,,gaearon,2017-11-08 09:22:03,2017-11-08 09:34:14
IS,npm run build has an error,This is a bug My nodejs is v7 0 0 Followed these steps 1 git clone 2 npm install 3 run npm run build the script has an error I think this is strange,,"monkindey,gaearon",2017-11-08 10:32:59,2017-11-08 13:38:00
PR,docs readme correct link for your first PR,This info is now on the website and not in CONTRIBUTING md Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Format your code with prettier yarn prettier 6 Make sure your code lints yarn lint Tip yarn linc to only check changed files 7 Run the Flow typechecks yarn flow 8 If you have not already complete the CLA Learn more about contributing,,"Haroenv,gaearon,Haroenv",2017-11-08 08:59:37,2017-11-08 18:48:20
PR,Release script follow up,Resolves 11481 2255f9f Add a timeout before querying npm right after publish 2213b98 Conditionally log some post publish steps 3d415be Conditionally print ready to paste yarn add instructions for CRA prerelease testing Prerelease log img width 510 alt screen shot 2017 11 07 at 4 28 05 pm src Stable log img width 521 alt screen shot 2017 11 07 at 4 28 28 pm src,,"bvaughn,nhunzaker,bvaughn",2017-11-07 16:45:55,2017-11-08 19:59:27
IS,DOM attribute dateTime is not lowercased when rendered to string,Do you want to request a feature or report a bug Bug What is the current behavior The DOM property dateTime is not converted to its lowercase attribute counterpart datetime for the time element when the element is rendered with ReactDOMServer renderToString If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 The above will print time dateTime 2017 11 02T20 49 25 01 00 data reactroot time What is the expected behavior The above output should be time datetime 2017 11 02T20 49 25 01 00 data reactroot time Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 0 0 React DOM 16 0 0 Node v6 11 5,,gaearon,2017-11-08 20:06:05,2017-11-08 20:46:43
IS,Add data reactroot back for ReactDOM render,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug bug What is the current behavior in React v16 data reactroot is only added when using ReactDOMServer renderToString If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior ReactDOM render should also tag the tree root with data reactroot for React detection purposes Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React 16 0 0,,gaearon,2017-11-08 20:44:52,2017-11-08 21:05:55
PR,Fixing typo on test,When I saw this I had to fix it The test that checks for misspelling has typo on the word misspelling,,"mitermayer,gaearon",2017-11-08 20:46:42,2017-11-08 21:23:47
PR,Consolidate build process with GCC,This completely gets rid of Uglify in our build process GCC provides better DCE for the FB bundles e g the persistence path is now dead code eliminated in www and mutation path is eliminated in CS And this unifies our build process with how we already build UMD CJS I forked GCC to add Hopefully this gets merged but if not it s a pretty simple change to maintain Then I recompiled the google closure compiler js package and pointed Yarn lockfile to my fork easier than forking another dependency layer up from there I verified with Yarn folks it s a supported although a bit unobvious way to point dependency to a fork and this is pretty much what custom registry support relies on GCC does not preserve whitespace so I added Prettier after it for FB RN bundles I also took an opportunity to clean up how we apply Rollup plugins in general and set up a single chain instead of switches This should make bundles more uniform across the build targets Some DEV sizes decreased because I started dropping per file license headers FB PROD sizes decreased because of better DCE and less whitespace RN DEV sizes increased because I did not add Closure to them whereas in the past they did use Uglify for DEV I'm not sure why it was desirable and it seemed better to make them un Closure would just like FB DEV builds are But I can change that if you want to Mainly I just want to keep DEV bundles with comments and Closure can not preserve them And that is about it I hope to test and maybe land this on Thursday after shipping 16 1,,"gaearon,trueadm,trueadm,gaearon,gaearon,gaearon,gaearon",2017-11-07 17:55:23,2017-11-08 22:37:12
IS,React renders differently on server and client,Warning React attempted to reuse markup in a container but the checksum was invalid This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting React injected new markup to compensate which works but you have lost many of the benefits of server rendering Instead figure out why the markup being generated is different on the client or server client div data reactroot da server div class container da How come it is rendered different what is the solution I have tried with renderToStaticMarkup instead of renderToString but it is not working,,gaearon,2017-11-09 10:00:48,2017-11-09 10:37:37
IS,Uncaught error thrown twice,I have the same problem mention on this issue Unhandled error is displayed twice The error was cross origin Based on the comment and 10474 For context the reason it happens is because we intentionally let the browser interpret an error as uncaught before we rethrow I understand that is thrown by the browser source file was searchAutocomplete jsx and the second thrown by the react source file was react dom development js Added to that If you follow the advice in the error and add an error boundary which you should you will only see the error once So that is not a huge problem in day to day workflow In fact it nudges people to add error boundaries which is nice In this case there is no advice mentioned by the error How can I get the error to be thrown once,,gaearon,2017-11-09 09:52:37,2017-11-09 10:40:43
IS,React 16 upgrade still looking for react js even though it does not exist anymore,Do you want to request a feature or report a bug What is the current behavior Upgrading to React 16 means node modules react react js no longer exists However when watching bundling files with webpack webpack sometimes trips and errors out trying to locate node modules react react js It may very well be a webpack issue and not a React issue but hoping someone here can help me out Ca not get to the bottom of it Seems to be a timing thing only errors out every couple of file changes re bundles and the rest of the time it works normally My webpack config is simple watch is set to true and I use babel loader with a babelrc and es2015 and react as presets What is the expected behavior Never look for node modules react react js when bundling with webpack Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Exists with React 16 no problems in previous versions,,"gaearon,gaearon,gaearon",2017-11-09 01:01:00,2017-11-09 10:43:00
IS,Props set through default parameter not added to component props property,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Bug What is the current behavior Example is able to render b with default value of a but its props property does not contain b if not explicitly set Is this intended Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React V16 0 0 Chrome,,gaearon,2017-11-09 03:56:55,2017-11-09 14:22:09
PR,Enable createRoot API in www,Re enable createRoot API in www since it is placed under a feature flag in React OSS now,,clemmy,2017-11-09 15:18:50,2017-11-09 15:33:49
IS,Release script follow up,X 11482 Add a timeout before querying npm right after publish X 11482 Conditionally log some post publish steps X 11482 Maybe print ready to paste yarn add instructions for CRA prerelease testing x 11504 Publish all packages that are not private and remove the whitelist in config x 11504 Add v prefix for release tags x 11504 Nit seconds minutes for long tasks,,"gaearon,bvaughn",2017-11-07 15:06:27,2017-11-09 16:29:52
PR,Release script tweaks,Resolves 11481 Added missing options param Publish all packages that are not private and remove the whitelist in config Add v prefix for release tags Log minutes for longer running tasks instead of seconds Push error stack instead of error message in parallel tasks so that we see call stack Some screenshots img width 857 alt screen shot 2017 11 09 at 3 50 21 pm src img width 851 alt screen shot 2017 11 09 at 3 54 34 pm src img width 809 alt screen shot 2017 11 09 at 3 54 42 pm src img width 942 alt screen shot 2017 11 09 at 4 04 43 pm src,,"bvaughn,gaearon,bvaughn,gaearon",2017-11-09 16:06:18,2017-11-09 16:29:52
PR,Add note about mistaken named default export,This commit adds a note about the possibility of erroneously mistaking named and default exports to an existing error message Ref this issue issuecomment 343210843,,gaearon,2017-11-09 16:53:34,2017-11-09 18:28:36
IS,Red01,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug What is the current behavior If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React,,,2017-11-10 06:01:39,2017-11-10 07:58:23
IS,Textarea falls with an error in React16 It works fine in React15,,,,2017-11-10 08:27:17,2017-11-10 09:11:08
IS,Bunch of cannot find module errors from react dom,Do you want to request a feature or report a bug Bug What is the current behavior I did not used any version specific features but after react16 my react module failed to transpile with these errors You can reproduce this by learn this example with React 16 currently used react 15 so you have to upgrade If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React react 16 1 0 react dom 15 6 2 Tested on Windows 10 with Chrome browser but browsers are not related so meaningless And yes it worked before react 16,,"gaearon,gaearon",2017-11-10 11:26:06,2017-11-10 11:40:18
PR,Fix accidental leftover requires,What it says Does not really make a difference afaik but changed for consistency,,gaearon,2017-11-10 11:21:16,2017-11-10 11:43:14
PR,Remove tests in ReactDOMComponent test depending on internal API,Removed inputValueTracking dependency in ReactDOMComponent test based on list in 11299 I took this approach based on 11309 review Please let me know if this is not the way we should test it,,"AudyOdi,AudyOdi,gaearon,AudyOdi,gaearon,gaearon,gaearon,AudyOdi,gaearon,AudyOdi,gaearon,AudyOdi,AudyOdi,AudyOdi,gaearon,jquense,jquense,gaearon,jquense,gaearon,AudyOdi,AudyOdi,gaearon,AudyOdi",2017-10-23 09:55:27,2017-11-10 12:02:00
PR,Measure time between scheduling an async callback and flushing it,Helps detect starvation issues img width 884 alt screen shot 2017 11 09 at 5 34 22 pm src,,"acdlite,gaearon,gaearon,gaearon,acdlite,gaearon,acdlite",2017-11-09 17:36:44,2017-11-10 12:14:26
PR,Add CODE OF CONDUCT md,what is the change Adding a document linking to the Facebook Open Source Code of Conduct for visibility and to meet Github community standards why make this change Facebook Open Source provides a Code of Conduct statement for all projects to follow React already links to this Code of Conduct in the README which is great Exposing the COC via a separate markdown file is a standard being promoted by Github via the Community Profile in order to meet their Open Source Guide is recommended community standards As you can see adding this file will complete React is Community Profile checklist and increase the visibility of our COC test plan Viewing it on my branch img width 1321 alt screen shot 2017 11 10 at 11 00 20 am src issue internal task t23481323,,flarnie,2017-11-10 11:01:30,2017-11-10 12:17:37
IS,Iterators are not supported inside Component render,What is the current behavior When you provide a list of React components its works When you provide an iterator of React components it does not work This works Unfortunately I could not make it run on JSFiddle maybe it has no support of iterators What is the expected behavior It should render exactly the same version as list based one 1 2 3 Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React react dom 16 0 0 and 15 x browser independent I tried in Firefox 56,,"gaearon,gaearon,gaearon,gaearon",2017-11-09 15:46:38,2017-11-10 15:52:09
PR,Refactor SyntheticClipboardEvent tests to only use the public API,This is related to 11299 I have reimplemented the previous tests using only the public API but I'm uncertain about their coverage It does not check things like setData and getData behavior on the clipboardData DataTransfer object for instance We would actually rely on implementation mocks to test these things anyway since there is no implementation of Range on jsdom and DataTransfer does not have a constructor,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2017-10-25 22:44:03,2017-11-10 15:53:21
PR,Rewrite SyntheticWheelEvent test depending on internal API 11299,Rewrite SyntheticWheelEvent test to remove internal API dependencies based in issue 11299,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2017-10-26 13:33:48,2017-11-10 16:39:39
PR,Refactor some event tests,Related to Just establishing a few patterns that emerged in different tests and making them look more similar,,"gaearon,gaearon",2017-11-10 16:52:31,2017-11-10 16:58:44
PR,WIP Use only public api for SyntheticEvent test js,Related to 11299 Express more tests via public API Hey I'm not sure if my code is correct but I would like to know if I can continue in this way or there is something that I need change Thanks,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,timjacobi,gaearon",2017-10-23 02:52:33,2017-11-11 12:20:03
IS,Add function name for breakpoint tracing,Do you want to request a feature or report a bug Maybe Feature What is the current behavior I am interesting in what happen in React Fiber and try to use breakpoint to trace React render function I found the call stack has anonymous function name it was made by below L746 L748 The captured picture image If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 Sorry No What is the expected behavior How about define function name for this Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React v16 1 OSX,,"monkindey,gaearon,monkindey,gaearon",2017-11-11 14:07:03,2017-11-11 14:09:02
PR,Added tests for getEventTarget,getEventTarget seemed not to have been tested yet This PR adds some tests for it,,"timjacobi,gaearon,timjacobi,gaearon,timjacobi",2017-11-11 11:43:43,2017-11-11 17:00:35
IS,Are React v16 props frozen or sealed,I have being trying to update my application to React 16 but I'm getting this error message in Chrome I have noticed that the error happens only the second time render is run Also if I test in the debugger Object isFrozen this props inside the render method I'm getting true as return Which means that this props theme font is frozen by react and this state is being copied to my styles object And on the second pass it cannot be replaced because its frozen This did not happen in previous versions of React So is React freezing properties now,,"gaearon,gaearon,gaearon,gaearon",2017-11-10 21:01:54,2017-11-11 17:52:16
PR,Update Flow and Fix Hydration Types,This is an alternative to 11386 and did some digging into why we were seeing inference errors and noticed that getNextHydratableSibling and getFirstHydratableChild returns a union that is ambiguous when inferred This highlighted that this API was already poorly defined This fixes that First we had no refinement on the hydratable child so we just assumed that if canHydrateInstance returns true then it is an instance suitable for that Fiber That only worked because stateNode is any This adds a specific refinement and the ability for that instance to be different than the first read This could be important when the hydratable thing is part of a boxed variant or something Another thing that this highlighted is that there is not really any difference between an Instance and a TextInstance They could be the same type and probably often is in other models So this PR also introduces a Hydratable Instance type which is really a placeholder value for what we will later refine to an Instance or a TextInstance This lets something that is both an Instance and a TextInstance be passed along here and only when we try to hydrate it do we define it as one or the other,,sebmarkbage,2017-11-08 20:15:35,2017-11-12 01:00:34
PR,Disable warning for noindex,I have warning with it This tag is supported by all browsers,,"gaearon,gaearon",2017-11-12 12:50:53,2017-11-12 13:53:42
IS,Capture attribute only supports boolean values,This is a follow up to 4784 The capture attribute on input elements is currently supported but it is configured as a HAS BOOLEAN VALUE attribute L33 This causes The capture attribute supports strings though the capture attribute This is very important for being able to configure the default camera selected on mobile devices,,gaearon,2017-10-31 22:50:05,2017-11-12 14:29:28
PR,Support string values for capture attribute,Uses HAS OVERLOADED BOOLEAN VALUE instead of HAS BOOLEAN VALUE Allows for Fixes 11419,,"nhunzaker,gaearon,nhunzaker",2017-11-01 14:10:00,2017-11-12 14:29:28
PR,Format packages scripts and fixtures folder,run yarn prettier all on folders,,raphamorim,2017-11-12 21:57:18,2017-11-12 23:22:22
PR,ImgBot optimizes images,Hey there I have just optimized all of your images They are the same dimensions and quality as before only they take up less space now docs img blog versioning 3 png 17 72 docs img blog versioning 4 png 16 43 docs img docs thinking in react tagtree png 11 docs img blog versioning 5 png 50 69 docs img tutorial tictac empty png 80 24 docs img blog versioning 6 png 17 01 docs img blog versioning 1 png 48 47 docs img blog versioning 2 png 50 07 docs img blog react dev tools jpg 2 44 docs img tutorial tictac numbers png 68 38 docs img blog animal sounds jpg 4 02 docs img blog parse react jpg 4 74 docs img blog react browserify gulp jpg 13 01,,syranide,2017-09-12 04:44:09,2017-11-13 02:32:48
IS,Trigger simulated input value change for React 16 after react dom 15 6 0 updated,I'm trying to trigger the input change event on a React form outside react using pure JS or jQuery With react dom 15 6 0 you were able to use simulated flag on the event object for the event to pass through Note I cannot use React even though the form trying to trigger on is based on React have to pure JS or jQuery to trigger the input value change event So the original suggestion from this comment used to work issuecomment 308739206 But after React 16 release this is not triggering the input and change event as expected What are the internal changes as to how it handles changes to input data in React 16 Believe there is a point here which would give the hint reactjs org blog 2017 09 26 react v16 0 html breaking change s Any idea what it could be,,"gaearon,gaearon,gaearon,gaearon,jquense",2017-11-08 05:55:48,2017-11-13 07:00:57
IS,Why I do not get keys warning in this case,Below example generates buttons based on state which can change Why I do not get warning that I should use keys PS If I uncomment the lines with map function I do get that warning though Why I do not get this warning in first case how does it know without keys that two buttons 3 and 4 which are going to be rendered after setTimeout are now different from 1 and 2,,"gaearon,gaearon,gaearon,gaearon",2017-11-13 10:43:54,2017-11-13 10:56:42
IS,Transpilation in v16 1 0 freezes the react dom server interface,As initially reported in issuecomment 343593640 attempting to upgrade from v16 0 to v16 1 caused a test that was previously working to fail The test was using sinon to stub renderToStaticMarkup on react dom server and v16 1 results in the following error the source L17 L22 is not frozen and issuecomment 343604002 further confirms that the Object freeze is a result of the transpilation for now i am simply splitting this report into a separate issue from but i will add a reproduction soon and plan to submit a PR as a follow up,,"gaearon,gaearon,gaearon,gaearon",2017-11-11 04:00:34,2017-11-13 13:52:59
PR,Unfreeze the react dom server interface,this allows stubbing of the exposed named functions as was possible before v16 1 fixes 11526,,"gaearon,gaearon,gaearon,gaearon,gaearon",2017-11-11 21:40:37,2017-11-13 13:52:59
IS,input type checkbox not rendered correctly if nested in html a tag,Do you want to request a feature or report a bug Bug What is the current behavior I have a peculiar problem with using a html a tag with input type checkbox from React The thing is that if I click directly on the checkbox and not the a tag the checkbox will not re render correctly but my state has updated Example Given the code below I render the component and click directly on the checkbox In this case showMap will be set to false since we set it to true in the constructor but the checkbox will still be checked in the html view If I however click on the a tag but not directly on the checkbox both the state showMap is updated correctly as well as the view I can make it work by not calling event preventDefault in toggleCheckbox but if I do that the app will scroll to the top of the page if I click on the a tag Example Code What is the expected behavior When I press the checkbox it should update visually Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 Chrome Windows,,"nhunzaker,gaearon",2017-11-13 06:57:27,2017-11-13 13:56:05
IS,Getting warning about unique key prop despite it being added correctly,Do you want to request a feature or report a bug Bug What is the current behavior As reported in when using my library with React v16 there is error Demo Steps to reproduce Go to demo on codesandbox Try to choose some option See console there is an error here L35 keys are being added which work fine with react 15 What is the expected behavior There is no error when keys being added Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React react 16 1 0 worked fine with react 15 4,,"clemmy,gaearon",2017-11-12 22:00:45,2017-11-13 14:07:17
IS,Cannot disable form submission using onSubmit handler,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug bug What is the current behavior it is not currently possible to prevent form submission using the onSubmit handler If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem sample code at What is the expected behavior form should never submit because onSubmit returns false every time Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 simplified code snippet below so you do not have to load the sandbox repro,,gaearon,2017-11-10 22:21:46,2017-11-13 14:09:37
PR,Minor fixes to DOM Test Fixtures,Doing a bit of cleaning Fix broken React logo reference Always use React from the window,,"nhunzaker,nhunzaker",2017-11-13 13:53:31,2017-11-13 14:27:07
PR,Do not emit autoFocus false attribute on the server,Seems like I made a mistake in Browsers do not treat autofocus false as truthy so we should use HAS BOOLEAN VALUE here Fixes the issue described in issuecomment 343903783,,gaearon,2017-11-13 15:01:54,2017-11-13 15:22:12
PR,Update Flow,See individual commits I had to explicitly annotate ReactDOM host config because otherwise the inference wasn t good enough I actually kind of like it this way because in the past it was often unclear where the inference failed Now it s explicit I can update other renderers too if you want but this is enough to get it passing,,"gaearon,sebmarkbage,gaearon,gaearon,gaearon",2017-10-27 13:59:41,2017-11-13 15:44:57
PR,lint task update scripts eslint js sharing code with linc js,Use eslint is CLIEngine to run lint task,,"xjlim,xjlim,xjlim,xjlim,gaearon",2017-11-10 18:08:49,2017-11-13 17:07:36
IS,Unify linc and lint build tasks,Currently these two tasks do not share any code lint all lint changed We should make them share the code using Node API like linc currently does and move that shared code to scripts eslint,,"gaearon,gaearon",2017-11-10 15:43:16,2017-11-13 17:07:46
PR,Reading package json safely in the build script by ignoring the syste,This PR fixes a small issue 11544 x Fork the repository and create your branch from master x Run yarn in the repository root x If you have fixed a bug or added code that should be tested add tests x Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development x Format your code with prettier yarn prettier x Make sure your code lints yarn lint Tip yarn linc to only check changed files x Run the Flow typechecks yarn flow x If you have not already complete the CLA,,gaearon,2017-11-13 18:10:11,2017-11-13 18:21:17
IS,Ignore system directories in the build script,Just noticed that running scripts release build js v 16 1 1 gives me We should ignore system directories there,,"gaearon,skiritsis,gaearon,gaearon",2017-11-13 15:58:01,2017-11-13 18:21:34
IS,how to not render some root tag,like I do not want to render div tag how to do,,,2017-11-14 08:26:06,2017-11-14 09:18:57
IS,Can not rendered UI with react and react dom 16 1 1,This is my code,,gaearon,2017-11-14 06:41:46,2017-11-14 10:09:23
PR,Add Flow types for EventPluginHub,Added EventPluginHub Flow types Please note I ran into a weird bug in Flow where the order of the union types mattered It is why one would see these sort of diffs in two of the files current T Array T current Array T T Tomorrow I will check the Flow project to see if there is already an open issue or resolution regarding the bug,,"deanbrophy,gaearon,gaearon,gaearon,gaearon,gaearon,deanbrophy",2017-11-06 04:24:15,2017-11-15 01:48:41
IS,Asynchronous ComponentWillUnmount in React 16,In React 15 ComponentWillUnmount called first before the rendering of next component in DOM In the current version v16 ComponentWillUnmount was called after the mounting of next component It creates an issue with my existing code since I reuse the same component after the history changes so it invokes the componentWillMount with new props and change in URL and thereafter it invokes the ComponentWillUnmount of same component Is there still a way to do this in a synchronous way,,"gaearon,gaearon,gaearon",2017-10-05 09:01:18,2017-11-15 12:00:39
IS,React 15 6 2 tag,It looks like the React 15 6 2 tag never got pushed to Github Should we just cut a new tag The biggest annoyance for me is that the release is missing in the dropdown for our DOM test fixtures img width 318 alt screen shot 2017 11 14 at 7 50 10 pm src I can just append to the URL No huge deal but it seems low effort I can take care of it if no one minds,,"nhunzaker,gaearon,nhunzaker",2017-11-15 00:50:39,2017-11-15 13:16:19
PR,Re add haste modules for ReactTypes and ReactNativeRTTypes shims,Looks like these got removed accidentally in d9c1dbd which caused a downstream test failure when attempting to sync RN,,"bvaughn,bvaughn,bvaughn",2017-11-14 22:14:55,2017-11-15 16:17:16
PR,Bugfix nextFlushedRoot should always be set when performing work,Fixes an issue where performWorkOnRoot was called but nextFlushedRoot was not set This happened in a special branch where we synchronously flush newly mounted DOM trees outside the normal work loop Arguably performWorkOnRoot should read from the globally assigned root and expiration time instead of accepting arguments since those arguments are expected to be the same as the global values anyway I decided against that since the global values could be null so reading from them would require extra null checks,,"acdlite,clemmy,sophiebits,acdlite",2017-11-15 00:39:32,2017-11-15 20:17:22
PR,Use requestIdleCallback timeout to force expiration,Forces requestIdleCallback to fire if too much time has elapsed even if the main thread is busy Required to make expiration times work properly Otherwise async work can expire but React never has a chance to flush it because the browser never calls into React To demonstrate I added a new fixture The fixture clogs the main thread using setInterval and increments a counter inside a didUpdate loop The counter will only increment after each update expires aagomaghj8,,"acdlite,acdlite,bvaughn,acdlite,bvaughn,sebmarkbage,sebmarkbage,sebmarkbage,acdlite,acdlite,gaearon,acdlite,acdlite",2017-11-13 21:38:04,2017-11-15 21:46:18
IS,React 16 1 1 does not recognize the allowTransparency prop on a DOM element,Do you want to request a feature or report a bug Bug What is the current behavior React 16 1 1 does not recognize the allowTransparency prop on a DOM element Though React 16 0 0 recognizes it Open the below links and check the sandbox console React 16 1 1 version has the warning displayed React 16 1 1 version with the above warning displayed in the sandbox console React 16 0 0 version without warning message What is the expected behavior allowTransparency is recognized as a valid DOM element attribute as it is mentioned in the documentation all supported html attributes Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Tested and reproducible in the latest versions of Chrome Safari and Firefox on MacOS X 10 13 1 It worked well with React 16 0 0,,gaearon,2017-11-15 23:10:35,2017-11-15 23:17:06
IS,Cannot read property ' reactInternalInstance liajyozl96m' of null,Super unhelpful error from React can this be improved i e hierarchy trace any kind of pointer,,"gaearon,gaearon",2017-11-16 12:07:54,2017-11-16 12:35:48
IS,Recent radio input onChange changes break expected behavior,Background I see from this issue thread 1471 that recent changes were pushed in 15 6 x that have to my mind broken some of the expected behavior when it comes to firing onChange events in a group of radio button inputs I am aware of the conversation in 1471 but the problem it is describing is not exactly the same as this so far as I can tell Note that the problem I'm about to describe does not occur in React 15 4 x Expectations We would expect an individual radio button is onChange to fire in these two conditions among others 1 A radio input is clicked and it is state changes 2 A label for any radio input is clicked causing 1 Indeed native elements work precisely this way In 15 4 x React this the inputs in this component will work as you would expect and as the native DOM elements work This Codepen shows it working properly with 15 4 1 In 15 6 x the onChange event seems to only fire once Here is another Codepen showing it does not work when 15 6 1 is imported It is of course entirely possible that I am doing something incorrectly and have been doing so for a couple of years now but the breaking change to my components only came with recent updates,,"aweary,jquense,jquense",2017-09-18 19:40:55,2017-11-16 14:08:15
PR,Update value tracking on cousin radios,fixes 10739 I m not sure how this managed to not get fixed in the last PR I updated the fixture to ensure that its fully testing whether the regression is fixed Unfortunately it means that 15 6 2 didn t get this fix do we call it at this point or what is the policy on releasing fixes on previous majors,,"jquense,gaearon,jquense,gaearon,aweary,jquense,jquense,jquense,jquense,nhunzaker,nhunzaker,nhunzaker,gaearon,gaearon,jquense,nhunzaker,nhunzaker",2017-10-02 14:46:39,2017-11-16 14:08:15
IS,HTML entities with renderToNodeStream and renderToStaticNodeStream causing mismatch with hydrate,Do you want to request a feature or report a bug Bug What is the current behavior When the server is started with an HTML entity anywhere within a component is JSX it causes a mismatch to occur when using hydrate What is the expected behavior I do not expect there to be a mismatch This only occurs with renderToNodeStream and renderToStaticNodeStream and does not occur when using renderToString or renderToStaticMarkup Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 1 1 Chrome 62 Manjaro Linux Not sure if this worked in previous versions,,"gaearon,iamdustan,gaearon",2017-11-15 23:00:53,2017-11-16 14:55:05
PR,Local listeners,Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Format your code with prettier yarn prettier 6 Make sure your code lints yarn lint Tip yarn linc to only check changed files 7 Run the Flow typechecks yarn flow 8 If you have not already complete the CLA Learn more about contributing,,nhunzaker,2017-11-16 16:05:10,2017-11-16 16:10:59
PR,Add watchmanconfig to gitignore so Jest watch works better,,,"bvaughn,bvaughn",2017-11-16 23:18:09,2017-11-16 23:25:52
IS,React 16 continues to incorrectly handle disabled options as 2803,I would like to report my bug 2803 issuecomment 68625392 again please because it was closed and said re open it if it is still a problem As I currently understand it React is incorrectly handling a common case in the construction of select s It is fairly normal to create a select where the first element is disabled but remains pre selected React should render this case but instead renders the first deselected control I attempted to fix this by forcing the selection The normal approach is to set selected on the relevant option but React disallows this preferring a novel property defaultValue on the select instead mimicing a first write version of the select property value If you attempt to set defaultValue what you set is ignored it may be the case that defaultValue is broken on select React is inability to render a disabled option as either the default or selected initial has been present since at least sometime mid version 14 which is when I first found it I first documented it in 15 3 1 in January 2015 because prior to then it was faster to tell the core devs on IRC I do not know how far it goes back past mid r14,,jquense,2017-10-04 22:52:43,2017-11-16 23:37:57
PR,Always reconcile against current children,The new resuming algorithm will always reconcile against the current child set even if there is a newer work in progress child set For larger context see,,"acdlite,gaearon,acdlite",2017-11-15 19:15:35,2017-11-17 00:58:54
PR,Updates at the same priority should not interrupt current render,When we are rendering work at a specific level and a higher priority update comes in we interrupt the current work and restart at the higher priority The rationale is that the high priority update is likely cheaper to render that the lower one so it is usually worth throwing out the current work to get the high pri update on the screen as soon as possible Currently we also interrupt the current work if an update of equal priority is scheduled The rationale here is less clear the only reason to do this is if both updates are expected to flush at the same time to prevent tearing But this usually is not the case Separate setStates are usually distinct updates that can be flushed separately especially if the components that are being updated are in separate subtrees An exception is in Flux like systems where multiple setStates are the result of a single conceptual update event dispatch We can add an explicit API for batching in the future in fact we would likely need one anyway to account for expiration accidentally causing consecutive updates to fall into separate buckets,,"acdlite,sebmarkbage",2017-11-16 23:02:55,2017-11-17 00:59:03
IS,React and react router If I create a component it calls render If not a component it is good without render It is crazy,Here is the link to Sandbox 1 I have simple code like this Sidebar js import React Component from react import BrowserRouter as Router Route NavLink from react router dom import Menu from Menu class SidebarExample extends Component render console log Sidebar render new Date return Router div div If I uncomment the below component Menu the render method of the component is called everytime I change the link Why In the Menu component the is the same html code below What is going on Menu ul li NavLink exact to Home NavLink li li NavLink to bubblegum Bubblegum NavLink li li NavLink to shoelaces Shoelaces NavLink li ul div div Router export default SidebarExample Menu js import React Component from react import NavLink from react router dom class Menu extends Component render console log Menu render new Date return ul li NavLink exact to Home NavLink li li NavLink to bubblegum Bubblegum NavLink li li NavLink to shoelaces Shoelaces NavLink li ul export default Menu If I uncomment the component the render method of the component is called everytime I change the link Why In the Menu component there is the same html code below What is going on I'm loosing my mind 1,,gaearon,2017-11-16 18:47:44,2017-11-17 01:55:07
PR,Added a watchmanconfig file,11579 part 2 the legend continues,,"bvaughn,bvaughn",2017-11-17 02:36:53,2017-11-17 02:39:03
IS,Elements with the same key are not deduplicated,Do you want to request a feature or report a bug Bug What is the current behavior Elements with the same key are not deduplicated which in itself is not unreasonable I guess since having duplicate keys is undefined behavior However on subsequent rerenders the duplicate elements remain in the render tree with no way to remove them If the current behavior is a bug please provide the steps to reproduce follow the instructions What is the expected behavior Elements with the same key are deduplicated this was the behavior in React 15 Or at the very least duplicate elements are appropriately cleaned up in subsequent rerenders Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Mac Chrome React 16 Working in 15,,"gaearon,gaearon",2017-11-17 04:47:20,2017-11-17 10:55:10
IS,Controlled inputs do not work in Safari,I originally thought this issue was just around using input type 'number' but upon digging further it appeared that Safari just plain does not like controlled inputs whatever you type will appear in that input You can see this in action here js output Now I will say that we worked around this for the time being by leveraging onKeyPress instead of onChange which allowed us to stop the event propagation We are all on Safari 11 0 1 so I'm not sure if this only affects Safari 11 From looking at older issues it looks like this is a solved problem for Safari 10 x but I do not have it so I can not confirm that or not,,"timjacobi,jquense,jquense,jquense,jquense",2017-11-16 22:33:40,2017-11-17 13:04:21
IS,IE 11 console error stopping the render Unable to set property nextEffect of undefined or null reference,Do you want to request a feature or report a bug Bug What is the current behavior Page can not be rehydrated but it is probably not a rehydration issue the same happens when I use render on empty div instead Console error childToDelete seems to be equal undefined when I set breakpoint Point in source L243 If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 I can not isolate this bug to provide minimal demo or reliable reproduction steps without providing you the whole app Spent a day already on this Still trying to isolate the issue When I removed most randomly choosen components and added div hi div to render of some deep component it was fine but when I defined Div div hi div and rendered it instead with Div then I got the error Restoring various components makes React crash on randomly looking points Every refresh produces the same result though I still report it in hope some dev got an idea what could be triggering it I will keep looking meanwhile What is the expected behavior No errors page should be rendered Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 0 0 16 1 1 Windows 7 IE 11 React 15 was working just fine The same is happening with development and production build,,"gaearon,gaearon,gaearon",2017-11-17 12:11:27,2017-11-17 16:06:56
PR,New feature flags to help detect unexpected lifecycle side effects,Avoiding side effects in the will mount will update etc lifecycle hooks becomes very important with async rendering Unfortunately it is not always easy to detect This PR adds 2 new feature flags both disabled by default to help with this These flags invoke methods that are supposed to be side effect free a second time roughly approximating what happens when React throws away incomplete work Before I started this I planned to repeat the whole begin phase eg cWRP sCU cWU cWRP sCU cWU render rather than just individual methods eg cWRP cWRP sCU sCU cWU cWU render That looks to be more complicated than I had assumed though and I'm not convinced it is worth the extra effort and complexity Since these methods should not have side effects it should be okay to call them in either sequence Happy to discuss this more in depth if others disagree though Once these flags are approved my next step will be to connect them to a GK for the Facebook internal builds similar to enableAsyncSchedulingByDefaultInReactDOM,,"bvaughn,acdlite,bvaughn,acdlite,bvaughn,acdlite,acdlite,bvaughn,bvaughn,acdlite,bvaughn,acdlite",2017-11-17 17:12:20,2017-11-17 18:49:55
PR,Upgrade rollup dependency,Upgrade rollup dependency to finish up with 11456 It seems that most of the build shows a little decrease in size after upgrading rollup,,"misoguy,gaearon,misoguy,misoguy",2017-11-18 01:11:36,2017-11-18 13:49:41
IS,Code Coverage,I found that React does not have a very good coverage Working on this could really make an impact,,gaearon,2017-11-18 14:39:20,2017-11-18 19:28:44
IS,Part of huawei is mobile phone has a flashback in the render page but other android phones and ios phones have no problem How do you solve this problem,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug What is the current behavior If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Part of huawei is mobile phone has a flashback in the render page but other android phones and ios phones have no problem How do you solve this problem,,gaearon,2017-11-17 14:27:45,2017-11-18 19:29:51
IS,overflowX none,Hi there I just spent a half hour realizing that I was passing the string of none to an overflowX and there was no warnings or logs in my JSX for a style I was passing invalid It simply removed it from my inline styles with no warnings or errors I would like to send a pull request to react to help with this and add logging for developers who accidentally pass an invalid string to warn them that things like this are invalid I was even passing it in a class and my browser was barfing too which helped me realize that its overflowX hidden is the valid attribute CSS value Any idea if there is a way we can log this to console for invalid CSS attributes that just disappear from the JSX final inline style converted object I would love for there to be logs on invalid css attributes or maybe there is some configuration I am missing to see these logs from react It was very annoying to try to get this overflow and none is invalid Next time I am doing CSS and something is missing I will look up the mozilla manual Thanks for any pointers with this annoying little bugger with JSX,,gaearon,2017-11-14 19:51:34,2017-11-18 19:32:19
IS,After the introduction of external pages by dangerouslySetInnerHTML JS fails,After the introduction of external pages by dangerouslySetInnerHTML JS fails,,"M-ZubairAhmed,gaearon",2017-11-15 09:26:16,2017-11-18 19:32:52
PR,Rewrite ReactDOMComponentTree test to test behavior using Public API,This is part of 11299 I have tried to identify cases where code within ReactDOMComponentTree is exercised via the public API and have updated accordingly but I'm not entirely sure whether I'm on the right track I thought I would PR to get feedback from the community Looking forward to comments,,"GordyD,gaearon,GordyD,gaearon,gaearon,gaearon,GordyD,GordyD,gaearon,GordyD,gaearon,GordyD,gaearon,GordyD,GordyD,GordyD,gaearon,GordyD,gaearon,GordyD,gaearon,GordyD,gaearon",2017-10-27 04:54:10,2017-11-19 14:18:16
IS,Improve formatting of errors when building React,Currently when the build fails e g due to a missing named export the message is pretty ugly img width 1033 alt screen shot 2017 11 04 at 13 12 31 src It would be nice to display the relevant line inline with syntax highlighting sort of like Babel does it Maybe Babel is babel code frame could be helpful not sure To reproduce fail the build by removing some export somewhere and run yarn build Tip yarn build core type NODE DEV is the fastest way to build just packages react and that might be enough to reproduce and iterate on the error message The relevant logic for displaying build errors is probably somewhere in scripts rollup build js If you would like to work on this please comment here so we do not have many people working on the same thing,,"gaearon,misoguy",2017-11-04 13:14:57,2017-11-19 14:23:34
PR,Improve formatting of errors when building,Fix 11454 I do not know the history behind using error codeFrame in catch but it seems that rollup is providing with the formatted lines inside error frame instead of error codeFrame What I could find so far about rollup is error frame is here L296 and the related getCodeFrame here L12,,"misoguy,gaearon,misoguy,gaearon,misoguy,misoguy,gaearon,gaearon,misoguy,gaearon,misoguy,misoguy,gaearon,misoguy,misoguy,gaearon,misoguy,gaearon,gaearon,gaearon",2017-11-04 15:18:42,2017-11-19 14:23:34
PR,Migrating to const let and Object Spread in more places,Use const let in more places 11467 Replace Object assign by Object Spread,,"raphamorim,clemmy,clemmy,clemmy,clemmy,clemmy,clemmy,raphamorim,clemmy,raphamorim",2017-11-12 21:44:13,2017-11-19 14:53:56
IS,Radio buttons are not correctly checked when using multiple lists of radio buttons,Do you want to request a feature or report a bug Bug What is the current behavior When there are two lists of radio buttons and they are conditionally shown the correct radio button is not always checked In the provided JSFiddle I have created two lists and put a button before them to toggle between the two lists You can see when switching to the second list of radio buttons none of the radio buttons is checked even though the second one should be checked based on the state What is the expected behavior The correct radio button should be checked The following JSFiddle shows the behaviour with React 15 3 0 where it still worked Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 15 3 0 It works React 15 3 1 It is broken,,"aweary,syranide,aweary,gaearon,nhunzaker",2016-09-01 14:18:26,2017-11-19 15:44:35
PR,bug fix on input radio,Fixed 7630 The PR 7333 made this issue And now there is no validation warning that PR 7333 is mentioning I think React 16 resolved the validation warning issue so I reverted it to the previous of PR 7333 I also added a test case for 7630,,"jquense,nhunzaker,nhunzaker,nhunzaker,nhunzaker,jquense,nhunzaker,nhunzaker",2017-10-14 10:55:46,2017-11-19 15:44:35
IS,componentDidMount fired when DOM is not mounted for portal tree components,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug BUG What is the current behavior For all components inside react portal componentDidMount fired when DOM is not mounted yet If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 Demo What is the expected behavior componentDidMount being fired when DOM is mounted Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Problem exist in React v16 1 1 browser or OS des not matter It worked fine earlier in React v15 with ReactDOM unstable renderSubtreeIntoContainer,,gaearon,2017-11-20 11:57:41,2017-11-20 12:32:16
PR,Move Mousewheel Event Type Detection to BrowserConstants 11585,Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Format your code with prettier yarn prettier 6 Make sure your code lints yarn lint Tip yarn linc to only check changed files 7 Run the Flow typechecks yarn flow 8 If you have not already complete the CLA Learn more about contributing,,"nhunzaker,nhunzaker,gaearon",2017-11-19 00:36:56,2017-11-20 12:40:58
IS,Move MouseWheel event type detection to BrowserEventConstants,I think we can move the wheel event support check in BrowserEventEmitter L126 L135 into BrowserEventConstants That runs the check once which is nice for wheel and scroll events which eventually need to be attached locally Filing this for myself as a part of But this could happen on master right now More or less I'm interested in cutting the overhead of event listening as much as possible and this is really low hanging,,"nhunzaker,nhunzaker,nhunzaker,gaearon,nhunzaker",2017-11-17 16:23:27,2017-11-20 12:41:59
PR,Rewrite SyntheticEvent tests using public APIs only,Related to 11299 rewritten createEvent to use public APIs removed all references SyntheticEvent release In order to test under realistic circumstances I had to move the expectations into a callback in mosts tests to overcome the effects of event pooling,,"timjacobi,gaearon,gaearon,gaearon,gaearon,timjacobi,timjacobi,timjacobi,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,timjacobi,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,timjacobi,gaearon,gaearon,timjacobi,timjacobi,timjacobi,gaearon,timjacobi",2017-11-11 01:07:25,2017-11-20 14:29:27
IS,Consider providing a UMD build for TestUtils again,I noticed we stopped providing it but a bunch of fiddles for old bugs use it I wonder if we should add it back e g as react dom test utils development js Let s hear what people have to say,,"gaearon,andydavies92,gaearon,andydavies92,gaearon,andydavies92,gaearon,gaearon,gaearon,gaearon",2017-10-05 13:53:55,2017-11-20 17:41:02
PR,Re enable UMD build for TestUtils,Fixes 11111,,"andydavies92,gaearon,andydavies92,gaearon,nhunzaker",2017-11-20 16:34:31,2017-11-20 17:41:02
IS,Dispatching an 'input' event against an element does not trigger onChange handler,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Bug What is the current behavior Triggering a native DOM 'input' event does not trigger the onChange handler in React DOM versions 15 6 and above If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 React DOM v15 5 React DOM v16 Note that the 'alert' only appears on the 15 5 fiddle What is the expected behavior I would expect the onChange handler to be fired I'm not sure if this is the correct approach and so happy to discuss other options here Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React See above fiddles Chrome on OSX for example,,"gaearon,jquense,gaearon,gaearon",2017-11-20 16:44:32,2017-11-20 20:09:46
PR,Read debugRenderPhaseSideEffects from GK,We plan to opt some engineers into this newly added GK to help identify unsafe side effects within lifecycle hooks and setState callbacks This PR adds the ability to determine this value at runtime rather than static as it is for NPM builds Verified that this inserts the following line to the fbsource and www builds For the www build this should be a simple matter of reading this value from the GK module I'm not sure yet of the best way to inject it for React Native builds given that the Rollup build reads the value from ReactFeatureFlags during initialization We will have to make sure that app code injects before ReactNative is initialized I believe this should be possible but it may depend on how we hoist requires in that environment,,bvaughn,2017-11-20 21:41:58,2017-11-20 22:05:54
PR,support Call and Return components in React Children calls,Solves 11416 I tried to read up a bit on Call and Return but I'm obviously seeing as it is an experimental API inexperienced with them Let me know if I'm testing their usage satisfactorily,,"MatteoVH,gaearon,gaearon,MatteoVH,gaearon,nhunzaker,gaearon,gaearon,MatteoVH,gaearon,MatteoVH,MatteoVH,gaearon,gaearon",2017-11-01 02:32:05,2017-11-20 22:06:37
IS,React Children support for Call and Return types,Include React Call s and Return s as defined in this sub repo in the children enumerated over by React Children Should be similar to the Portal support added in 11378 This issue is a follow up to 11373 and was suggested by issuecomment 340789791,,"MatteoVH,MatteoVH,gaearon",2017-10-31 20:50:23,2017-11-20 22:06:51
PR,Updated minimatch version to 3 0 2 due to High severity security vuln,Current minimatch version in use has a Regex DDoS vulnerability making it vulnerable to a Regular Expression Denial Of Service ReDoS attack An attacker can pass a string value to the minimatch path pattern function to cause a ReDoS This defect is fixed in version 3 0 2 current verison TESTS Test Suites 122 passed 122 total Tests 26 skipped 2547 passed 2573 total Snapshots 20 passed 20 total Time 74 541s Ran all test suites Done in 76 02s LINT yarn run v1 3 2 node scripts tasks eslint js Lint passed Done in 12 61s FLOW yarn flow yarn run v1 3 2 node scripts tasks flow js Found 0 errors Flow passed Done in 9 66s,,"gaearon,gaearon",2017-11-20 22:19:50,2017-11-20 22:54:36
PR,fix scripts eslint typo in eslint script,Noticed a minor typo in scripts eslint index js so I fixed it up Thanks,,,2017-11-21 01:59:47,2017-11-21 02:46:58
IS,how to change props in the child component,For example I want to change the prop that my parent component passes by clicking the button But do not want to be controlled by the incident explicitly Because I want to make this component more independent callers do not need too many parameters to achieve two way communication between parent and child components parent How to do Good people,,gaearon,2017-11-21 13:32:31,2017-11-21 13:37:35
PR,WIP Use ES modules internally,Based on top of This is probably broken in some ways and definitely breaks Jest but some test displays Hello World Builds are a few KBs down Probably do not want to land this until we have a way to run tests against bundles Still was fun try I intend to keep this relatively up to date hoping I can land it within a few weeks once the infra is there,,"gaearon,acdlite,nhunzaker,sophiebits,nhunzaker,gaearon,gaearon",2017-08-23 23:12:35,2017-11-21 13:57:33
PR,Changed extension of khan academy editor png to khan academy editor webp,When doing some unrelated stuff I found out that the file extension of khan academy editor png was incorrect I changed it to Webp which is correct and updated the blogpost that referenced the image Small note the path to this image seemed to be incorrect already so the blogpost image would not have shown before,,gaearon,2017-08-15 22:04:10,2017-11-21 13:58:07
PR,Changed xIsNext to xIsCurrent Issue 10119,I have changed xIsNext to xIsCurrent as seen in the issue 10119,,"gaearon,gaearon",2017-07-15 18:32:44,2017-11-21 13:58:48
PR,Insert final new line,According to L9,,"lipis,gaearon",2017-05-28 00:19:57,2017-11-21 13:59:30
PR,Move DOM related code to the injection,This PR is about a todo comment in EventPluginHub This is a proposal to add PreventedEvents injection that takes some DOM dependent code out of EventPluginHub,,"maciej-ka,aweary,maciej-ka,gaearon,gaearon,gaearon",2017-04-29 15:38:02,2017-11-21 14:00:35
PR,Fix error code transform to look for fbjs lib invariant,Since we now refer to it as fbjs lib invariant this code path became dead I can t actually reproduce any issue on master so I m not sure I understand why this was necessary in the first place Maybe you can explain I have checked that the code path is hit again now after this change,,"gaearon,sophiebits,gaearon,keyanzhang,gaearon,keyanzhang,gaearon,keyanzhang",2017-03-12 00:29:19,2017-11-21 14:02:07
PR,Resolve 8656 WebComponent 1 0 support,This is a straightforward update of the WebComponent example to match the final WebComponent 1 0 specification which mandates ES6 Class syntax I'm unsure of any paths forward to maintaining support for old browsers while also supporting new ones short of feature detection having two separate codepaths The situation in the aftermath of 8656 is un ideal This PR depends on cdnjs adding the custom element polyfill Those changes are tracked in cdnjs cdnjs 10108,,gaearon,2016-12-30 07:28:26,2017-11-21 14:02:35
PR,Prevent isListening from being undefined,Hello This PR is to solve the problem listed below We are using React v15 4 1 We had a very weird issue with ReactBrowserEventEmitter in Internet Explorer 11 That was caused by getListeningForDocument function L156 returning undefined in some circumstances when called in listenTo function L227 That caused an exception here L236 and broke our app Why getListeningForDocument function returned undefined this condition L159 evaluated to false because mountAt object had such a property But the bad thing is that this property is value was undefined It is very weird that such a problem came out I have not managed to google similar issues This PR solves the problem but does not answer the question why such a strange behavior as explained above happened,,gaearon,2016-12-06 17:01:32,2017-11-21 14:04:00
PR,Provide a better error message when the user is using jest mocks,Provide a better error message when the user is using jest mocks,,"jimfb,zpao,jimfb,zpao,montogeek,gaearon,sophiebits,gaearon",2016-06-03 21:56:11,2017-11-21 14:04:56
PR,Listen DOM events in each React container,Current React implementation is attaching events to document level This is breaking bubbling DOM behaviour not letting users to play properly with methods like stopPropagation Also attaching events to containers instead of document integrates better with other Javascript frameworks With this change we start attaching events at container level Fixes Related,,"aweary,aweary,aweary,gaearon",2016-06-20 16:05:31,2017-11-21 14:05:24
PR,Ensure that dangerous innerHTML is a string if set,This should avoid issues like this one This just happened to me when I was not paying attention resulting in much confusion when only object Object was being rendered it took me a while to realize that contents was invalid I realize the code here is not pretty but I'm not sure what React is convention is for this e g extracting props dangerouslySetInnerHTML into a temporary variable so feel free to suggest improvements,,"aweary,zpao,aweary,sophiebits,aweary,aweary,sophiebits,aweary,sophiebits,syranide,aweary,milesj,gaearon",2016-09-13 13:25:02,2017-11-21 14:14:23
PR,Exlude disabled elements from propagation,This is should be the fix for 7711 Basically I have realised that when it simulates capturing and bubbling inside ReactDOMTreeTraversal it ignores that element could be disabled apart from browser,,"zpao,gaearon",2016-09-13 22:06:22,2017-11-21 14:14:50
PR,Add Flow annotations for ReactInputSelection js,Hi I added some type checks to this relatively easy looking area of React Thanks,,"aweary,gaearon",2016-10-20 08:40:25,2017-11-21 14:15:51
PR,Attach event listeners at the root of the tree instead of document,Context we are investigating using React in order to build both Atom core components and Atom plugins Work have been done last year to make sure that multiple React instances in the same app and this is working well The only remaining issue is the fact that e stopPropagation does not work as intended when there is two React trees that are nested The reason is that both event listeners are added to the root of the tree and therefore do not cancel each others The suggested solution is to attach event listeners at the root of the React tree To understand how this solves the problem let is assume that we have OuterComponent which is running React version A and InnerComponent that is running version 2 The inner component attaches the event listener at the top of the inner tree using bubble phase and the outer component at the root of the outer component When there is a click event on the innerComponent the inner version of React will be notified first because it is deeper in the tree which will dispatch the event through the innerComponent hierarchy and eventually something will call React e stopPropagation which will call the DOM e stopPropagation so that the outer version of React will never be notified Test Plan Have the changes of this revision yarn build to generate react js and react dom js Copy react js and react dom js into react2 js and react dom2 js Change the global assignation of React and ReactDOM inside of 2 js to React2 and ReactDOM2 Build a test case with two nested components and the inner one calling e stopPropagation vjeux fb vjeux test test event boundary html Make sure it does not trigger the outer one Revert the changes and make sure that clicking on the inner one triggers both events to fire Important Note I do not fully understand the implication of this changes around performance and potential side effects that could happen I'm going to spend time right now investigating this Would love ideas on what to check,,"vjeux,vjeux,sophiebits,vjeux,vjeux,sebmarkbage,sophiebits,vjeux,sebmarkbage,sebmarkbage,vjeux,sebmarkbage,sebmarkbage,vjeux,sebmarkbage,sebmarkbage,sebmarkbage,nhunzaker,sophiebits,nhunzaker,sophiebits,gaearon,sebmarkbage,gaearon",2016-10-26 22:06:14,2017-11-21 14:18:32
PR,7128 React document listener memory leak fix,This captures global document added event listeners and saves them When the last component is removed these saved listeners are also removed and the object on document that keeps track of document state mostly tracks which event listeners have already been added is also reset,,"syranide,syranide,syranide,syranide,gaearon",2016-07-07 00:49:00,2017-11-21 14:22:53
PR,Replace Null by defaults reflecting correct types,Because Null is the Saruman of Static Typing,,gaearon,2017-05-02 02:40:29,2017-11-21 14:23:47
IS,onClick firing for disabled buttons in v16,Hello the React Team I found a little event firing bug When I click on an Icon element inside a disabled button the onClick on the div element is triggered,,"gaearon,gaearon,jquense,jquense,jquense",2017-11-17 18:04:55,2017-11-21 14:25:31
PR,Docs Fix onClick button handler,I found a little typo in the doc button onClick handler should be focusTextInput not focus,,gaearon,2017-09-11 14:12:35,2017-11-21 14:27:40
PR,docs Prevent using variable from outer scope,Small fix that prevents leaking a variable to the outer scope If you modify initial code sample in the following manner you will get Uncaught ReferenceError Demo of the bug Fixed code sample,,gaearon,2017-09-21 00:03:29,2017-11-21 14:29:30
PR,Fix PR badge link in README,This was supposed to link to a specific section in the contributor guide CONTRIBUTING md is now just points to a web page so you have to click an extra link and you no longer go to the correct section This replaces the link with a direct link to the page CONTRIBUTING md links to and targets a section roughly equivalent to what the badge previously linked to Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 If you have added code that should be tested add tests 3 If you have changed APIs update the documentation 4 Ensure the test suite passes npm test 5 Format your code with prettier npm run prettier 6 Make sure your code lints npm run lint 7 Run the Flow typechecks npm run flow 8 If you have not already complete the CLA,,"dantman,gaearon",2017-10-10 23:13:20,2017-11-21 14:30:42
IS,Issue with input type number rendering decimal points,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug I would like to report a bug What is the current behavior When I use the input type number there is an issue with it displaying one additional decimal point I noticed that the initial value in state is 1 2 when I type in a at the end of the input 1 2 is displayed while the value in state still remains 1 2 When I type in another at the end the value disappears and returns an empty string instead If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 Demo What is the expected behavior The expected behaviour is either that the input performs no built in validation or that the validation is restrictive enough to disallow the second dot or if the validation cannot be modified one must ensure that the second dot changes the value back to the value without the second dot Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React This has affected me in React versions 15 3 and 15 4 I have not tried this in React 16 I have only tried this in Google Chrome v61 and have not tried this in any of the other browsers,,"skiritsis,skiritsis,nhunzaker,nhunzaker,nhunzaker,nhunzaker",2017-11-21 00:29:23,2017-11-21 14:35:21
PR,Remove mentions of module map in Jest config,This transform is not applied anymore and is only being passed to the caching function We can remove its mentions completely now,,"gaearon,gaearon",2017-11-21 15:58:44,2017-11-21 16:01:10
PR,Run Jest tests with development environment,We used to require setting it to 'test' because rewrite modules step treated it specially L21 This prevented us from running tests with other NODE ENV values Since we dropped Haste and no longer use rewrite modules we can now run tests with any environment value I'm changing this to wouldevelopment' now but will later introduce a 'production' mode separately,,"gaearon,gaearon",2017-11-21 16:25:44,2017-11-21 16:28:43
IS,Request in IE9,Hello guys how can I make request in IE9 actually I make request with axios but in IE 9 dont work response returns with Network Error and using Fetch response returns with Access Denied React 16 0 With Axios,,jquense,2017-11-21 18:55:29,2017-11-21 18:59:24
PR,WIP Run Jest in PROD mode too,This is a rough proof of concept It adds production mode runner project to our Jest setup Example running a test in Stack Fiber DEV and Fiber PROD img width 698 alt screen shot 2017 07 25 at 5 17 39 pm src Not all unit tests are friendly to this And it does not completely represent the PROD mode because I have not applied PROD transforms For example it does not strip warning calls leading to img width 1012 alt screen shot 2017 07 25 at 5 19 25 pm src On the other hand applying all PROD transforms would also be a bit tricky because we often assert on error message name which would be stripped Maybe we can have toThrowReactError matcher that just expects Minified exception in PROD Some are explicitly DEV only tests img width 651 alt screen shot 2017 07 25 at 5 23 40 pm src We should probably gate them This is also surfacing what appears to be Jest multi project runner bugs For example it appears that some mocks get broken in multi project setup img width 902 alt screen shot 2017 07 25 at 5 24 10 pm src img width 847 alt screen shot 2017 07 25 at 5 24 45 pm src Overall I think this is a promising direction but we will need Jest MPR to become more stable to continue,,"gaearon,sophiebits,gaearon,gaearon,aaronabramov,gaearon,gaearon,gaearon",2017-07-25 16:25:47,2017-11-21 20:57:44
PR,Fix an opposite description in warning message,,,,2017-11-22 09:12:56,2017-11-22 09:49:16
PR,Run Jest in production mode,Supersedes See individual commits as there s quite a bit here This is almost ready The rest are actual small differences e g less detailed messages that I ll need to fix in the tests themselves After those are fixed I ll add yarn test prod to the CI runs,,"gaearon,bvaughn,bvaughn,bvaughn,gaearon,gaearon,gaearon,bvaughn,gaearon",2017-11-21 20:57:28,2017-11-22 13:02:26
PR,remove reconcileChildren use reconcileChildrenAtExpirationTime directly,one TODO item in the source code is remove reconcileChildren use reconcileChildrenAtExpirationTime directly Please have a review if I have done this right Thanks Vincent,,,2017-11-22 13:05:12,2017-11-22 13:21:16
IS,renderToStaticMarkup incorrectly renders async attribute,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Bug What is the current behaviour The async tag is rendered with a value of empty quotes like so script async src url script If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Note The fiddle adds the async tag to a div because script tags are not allowed The behaviour is exactly the same What is the expected behavior The async tag should be rendered with no quotes like so script async src url script Using react dom is render method the async tag works as expected its only with react dom server is renderToStaticMarkup method that the behaviour is different Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Latest,,"gaearon,gaearon",2017-11-22 11:32:48,2017-11-22 13:24:58
PR,DO NOT MERGE Trigger CI failure,Just verifying it works as expected Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Run yarn test prod to test in the production environment It supports the same options as yarn test 6 Format your code with prettier yarn prettier 7 Make sure your code lints yarn lint Tip yarn linc to only check changed files 8 Run the Flow typechecks yarn flow 9 If you have not already complete the CLA Learn more about contributing,,"gaearon,gaearon",2017-11-22 13:42:00,2017-11-22 13:58:14
IS,Question What is your workflow to release a new version,Hello if I am totally out of place asking this here I am sorry please close this issue I work at a German newspaper and we are publishing some smaller npm packages publically as open source and some for our own purposes privately Currently we are not quite sure of our workflow and we want to learn from the best YOU We are wondering how you manage to publish new releases of React I see you have some release sh scripts We have an npm script that basically builds our package bumps the version and publishes the lib to npm So far this seems quite similar correct me if I am wrong Also when we want to publish a new release someone just runs that npm script from their laptop This seems somewhat unsettling it feels like there should be more this So I am wondering if you care to answer how do you do it at Facebook,,gaearon,2017-11-22 15:44:24,2017-11-22 15:50:41
PR,Consolidate all symbols in a single file,This reduces the code duplication as we have quite a few of them now It is also nice to be able to see them all together Note this is shared so they are still duplicated between React and renderer packages The actual file savings are negligible a few dozen bytes after gzip for combined bundles This is mostly to make it better from code organization perspective I tried putting them as a hidden export on the React object but this actually increased the size a bit because our secret export name is longer than the code this saves Although maybe it would be nice to do in the future to fix cases like issuecomment 264858787 For now I decided not to do it,,"gaearon,sebmarkbage,gaearon",2017-11-22 17:23:37,2017-11-22 18:08:23
IS,Investigate uncovered differences between development and production,Follow up from Here is one I found These two invariants L330 L343 are in a function that is behind a DEV block L447 L449 I do not think this is intentional but need to verify There may be more I will use this issue to track while preserves existing behavior,,"gaearon,gaearon,gaearon",2017-11-22 02:31:49,2017-11-22 18:58:54
PR,Change DEV only invariants to be warnings,Fixes It is confusing to have two different code paths due to throwing in DEV but not in PROD We try to avoid such cases I found these two as I was working on They were introduced accidentally in In the past they would always run I thought about moving them out of the DEV block but then figured there is no real need to run those extra checks in production We did not for a few months anyway In particular it is nice to not run isArray checks for every single state object So we might as well turn them into warnings and keep them DEV only Note if we merge this we ll need to enable these warnings on next sync,,gaearon,2017-11-22 18:09:50,2017-11-22 18:58:54
PR,Bug fix SetState callback called before component state is updated in ReactShallowRenderer,This PR aims to fix the bug described in 11496 A test was created to reproduce the error and to fix it the ReactShallowRenderer callback calling logic was changed so that it would stop calling the callbacks after the enqueue functions and would start calling them after finishing mounting or updating Please let me know if there any questions or if anything should be changed improved,,"accordeiro,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,accordeiro,accordeiro,gaearon,accordeiro,accordeiro,accordeiro,gaearon,accordeiro,accordeiro,gaearon,gaearon,accordeiro,accordeiro,accordeiro,accordeiro,accordeiro,gaearon,accordeiro,gaearon,gaearon,gaearon,accordeiro,accordeiro,accordeiro,gaearon,accordeiro",2017-11-09 19:12:57,2017-11-22 22:15:11
PR,Remove global mocks by adding support for suppressReactErrorLogging property,Alternative to I think I prefer this way It is super simple and can also serve as escape hatch to,,"gaearon,nhunzaker",2017-11-23 00:56:10,2017-11-23 01:15:23
PR,Remove global mocks by adding a global flag,This is necessary for running a subset of tests against flat bundles I added a global unstable flag to avoid exposing yet another injection for error reporting Not ideal but it works and can serve as an escape hatch to,,"gaearon,bvaughn,gaearon,gaearon,gaearon",2017-11-22 21:32:24,2017-11-23 01:15:45
IS,createPortal child ref callbacks are called AFTER componentDidMount,Do you want to request a feature or report a bug Bug What is the current behavior When using the new ReactDOM createPortal API adding a ref callback to the portal subtree is not fired until after componentDidMount in the current component If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior I expected ref callbacks in children rendered into a portal like other children to have been fired before the parent component is componentDidMount lifecycle method Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React I have tested versions of React from 16 0 0 to current 16 1 1 and they seem to share the same behaviour,,,2017-11-22 07:01:31,2017-11-23 01:27:56
PR,Use const let in more places 11467,Convert BeforeInputEventPlugin to const let Convert BrowserEventConstats to const let Convert ChangeEventPlugin to const let Convert DOMEventPluginOrder to const let Convert EnterLeaveEventPlugin to const let Convert FallbackCompositionState to const let Convert getEventCharCode to const let Convert getEventKey to const let,,"raphamorim,gaearon,gaearon,gaearon,raphamorim,raphamorim",2017-11-23 02:01:33,2017-11-23 02:36:48
IS,Flowtype and class inherit,I have a problem with react 16 and its Flowtype typings Lets assume that I have My question is how to pass additional Props to Bar component,,gaearon,2017-11-23 11:28:38,2017-11-23 11:36:46
IS,The radio box and check box are disabled and checked the DOM structure lacks checked attributes,Note if the issue is about documentation or the website please file it at report a bug The radio box and check box are disabled and checked the DOM structure lacks checked attributes jsx lt input type 'radio' checked disabled gt The browser structure after rendering lt input type radio disabled value on gt Our css is input checked color blue Result checked is missing CSS failure,,jquense,2017-11-23 09:00:58,2017-11-23 12:47:59
PR,Run 90 of tests on compiled bundles both development and production,Adds yarn test build and yarn test build prod that run on CI You can also run them locally after yarn build what you need type NODE Tests ending with test internal js are blacklisted They fail due to internal imports e g shared ReactFeatureFlags mocks of local files or direct file references Some of them we can fix but some will need to stay internal forever which seems okay to me as long as it s not many Note this means that if a non internal test imports an internal file it will not pass CI My suggestion for cases when you need an internal file most commonly a feature flag or a mock is to add a second X test internal js file that only contains the bundle unfriendly code This way we can still run as many tests as we can and even move tests between two files as some of them lose dependency on internals e g if feature flag is removed This is all very new and it is likely we will uncover some pain points I can not predict what those will be Let is try and see We can always disable on CI if it is too painful,,"gaearon,nhunzaker,gaearon,gaearon,gaearon,gaearon,trueadm,gaearon,gaearon,gaearon,gaearon,gaearon",2017-11-22 21:41:03,2017-11-23 17:44:58
IS,Run some unit tests on compiled bundles,A lot of our tests are now using only public APIs and with this number is growing Soon we will delete the Stack reconciler code and with it we can remove some feature flags partly responsible for non public API calls as well as Stack specific tests We will still have some tests that operate directly on files but we should be in a position when we can opt in specific test files hopefully a growing count into running on compiled development and production bundles We would only do this on CI so that we do not compromise local iteration speed We already have expectDev and expect separation which we use today for telling warning only failures on But we can use it in the future for telling whether an expectation should be skipped for a PROD bundle We could use some help here both with building an initial proof of concept of running some tests on CI with bundles and with converting more tests to only use public APIs You can search the source for TODO can we express this test with only public API to find good starting points for tests that might be better written against public APIs which is not always possible but you can try This is a bit open ended and probably requires some prior knowledge of how we test things and generally feeling comfortable with this repo If you contributed before this is a good issue to dive into,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2017-06-14 00:04:08,2017-11-23 17:53:14
PR,Forbid Haste in Jest,We never need it This does not speed up anything but seems good to enforce,,"gaearon,gaearon",2017-11-23 17:47:54,2017-11-23 18:02:48
PR,test ci Make a typo,Just messing around,,gaearon,2017-11-23 18:36:49,2017-11-23 19:54:12
PR,Drop textContent IE8 polyfill and rewrite escaping tests against public API,I want to put some explanation about this test rewrite since I think the outcome might not be what was intended in escapeTextContentForBrowser is used in client setTextContent js only when textContent is not supported for DOM elements which only happens in IE8 caniuse com reference feat textcontent a browser version that is no longer supported To actually move this test to run over ReactDOM render and React createElement it would be necessary to mock up the entire global document object assign null to document documentElement textContent require React packages and then test this util through React element rendering If authors and contributors think this should be the way to go I can start working again on this approach Considering that this part of the code might not be running anywhere today in React web applications my suggestion would be to not add this heavy lifting on the tests reconsider modifying these tests by merging the changes I have made and actually start thinking about removing escapeTextContentForBrowser from the codebase Since the support was dropped almost two years ago and we should start considering removing IE8 code Looking forward to read others take on this,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,syranide,syranide,gaearon,gaearon,gaearon,syranide,gaearon,syranide,gaearon,syranide",2017-10-22 23:21:16,2017-11-23 22:41:29
PR,Issue 11510 added verification check for misspelled propTypes,Prerequisites X All test ran successfully X Code formatted with prettier X Code linting done X Flow run completed X completed the CLA Changes Added the check if PropTypes is entered instead of propTypes in the static method of class for props types check Please let me know if i have to change anything,,"M-ZubairAhmed,gaearon,M-ZubairAhmed,gaearon,gaearon,M-ZubairAhmed,M-ZubairAhmed,gaearon,gaearon,M-ZubairAhmed,M-ZubairAhmed,gaearon,M-ZubairAhmed,gaearon,M-ZubairAhmed,M-ZubairAhmed,M-ZubairAhmed,M-ZubairAhmed,M-ZubairAhmed,M-ZubairAhmed,gaearon,M-ZubairAhmed,gaearon,M-ZubairAhmed",2017-11-11 00:03:43,2017-11-24 02:59:47
IS,forceUpdate recalls all ref callbacks,Do you want to request a feature or report a bug Bug maybe What is the current behavior On calling forceUpdate ref callbacks called again So doing forceUpdate in ref callback makes infinite loop If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior Do not recall refs Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React react 16 1 1 chrome 62,,"gaearon,gaearon",2017-11-24 10:47:19,2017-11-24 12:26:56
IS,When I was in the onClick s callback simulating clicking on other elements triggers an additional callback,Here is the link class NormalLoginForm extends React Component handleSubmit e e preventDefault console log 'click button' document getElementById wouldiv' click render return div button onClick this handleSubmit Log in button div id wouldiv' onClick console log 'click div' 1111 div div ReactDOM render NormalLoginForm mountNode,,gaearon,2017-11-24 03:35:03,2017-11-24 12:42:36
IS,Question from react reconciliation,With the goal to better understand react reconciliation I created this example You can see after three seconds showWarning is set to true So I was believing that after three seconds I would get a new instance of Stateful component because it lives in a different div than the one rendered already hence I would see the output of Stateful component starting from 0 again but the timer just continued to increase on the screen So the output basically is 0 1 2 3 4 and so on each second Whereas I expected it to show 0 1 2 and on third second do a restart basically and start 0 1 2 3 etc What did I miss from reconciliation docs that led me believe in this I have a feeling the react docs on this misses to highlight this or it might be I missed something,,"gaearon,gaearon,gaearon,gaearon,gaearon",2017-11-24 19:37:18,2017-11-24 20:21:12
PR,Use only public API for ChangeEventPlugin test js,Ref Do not merge this I need help understanding the ChangeEventPlugin isInputEventSupported method on line 172,,"Ethan-Arrowood,jquense,jquense,Ethan-Arrowood,jquense,Ethan-Arrowood,Ethan-Arrowood,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,jquense,gaearon,Ethan-Arrowood,Ethan-Arrowood,Ethan-Arrowood,gaearon,gaearon,gaearon,jquense,gaearon,Ethan-Arrowood,gaearon,Ethan-Arrowood,gaearon,Ethan-Arrowood,jquense,Ethan-Arrowood,gaearon,jquense,Ethan-Arrowood,jquense,gaearon,gaearon,jquense,jquense,Ethan-Arrowood,Ethan-Arrowood,Ethan-Arrowood,Ethan-Arrowood,gaearon,Ethan-Arrowood,jquense,Ethan-Arrowood,jquense,gaearon,Ethan-Arrowood,gaearon,gaearon,gaearon,Ethan-Arrowood,Ethan-Arrowood,Ethan-Arrowood,gaearon,Ethan-Arrowood,gaearon,Ethan-Arrowood,gaearon",2017-10-23 04:38:47,2017-11-24 22:18:41
PR,Replace inputValueTracking test with public API tests,Follow up to Now that I understand what input tracking is doing I rewrote the remaining tests to follow the existing format and check the observable desired behavior and rolled them into ChangeEventPlugin test js,,gaearon,2017-11-25 01:34:08,2017-11-25 01:47:10
PR,Do not reset error codes on CI build,I think this was added in 8486 but if I'm not mistaken it causes issues after my changes in 11633 Specifically prod tests on bundles now run after build and actually depend on the up to date error code file being available Otherwise any newly added invariants can not be decoded L57 L75 as they are not in the committed error code file I noticed this in Will see if the same fix there works If it does I will merge this,,"gaearon,gaearon",2017-11-25 02:08:00,2017-11-25 02:23:13
PR,Try to fix CI for missing error code,Not yet sure I understand why error code seems to exist in the message since we parsed it but not in the file with the error codes Attempts to fix CI failure in,,"gaearon,gaearon,gaearon",2017-11-24 23:01:29,2017-11-25 02:31:13
PR,remove reconcileChildren use reconcileChildrenAtExpirationTime directly,one TODO item in the source code is remove reconcileChildren use reconcileChildrenAtExpirationTime directly Please have a review if I have done this right Thanks Vincent,,gaearon,2017-11-23 02:06:56,2017-11-25 02:43:06
PR,Refactor SyntheticKeyboardEvent tests to only use the public API,I have been working on SyntheticKeyboardEvent test and have gotten a significant amount of tests to pass but wanted to see if the community had feedback on my work so far and advice on how to complete the few remaining tests where I am stuck Problem I am unable to fire events and pass tests that require a 'keypress' event I have looked thru other examples specifically mdn docs and PR 11365 to fire the keypress event specifically on line 41 Via MDN and other PR is I have found no significant difference on why a 'keypress' event and and the 'keydown' 'keyup' which fire as expected any feedback or tips would be on my approach code appreciated,,"aarboleda1,aarboleda1,aarboleda1,gaearon,gaearon,gaearon,gaearon,aarboleda1",2017-11-22 18:25:49,2017-11-25 15:47:06
IS,What I should do if another dependency use React PropTypes,I use react 16 0 0 beta 5 Some another package use React PropTypes I cannot update another package What should I Do I search some polyfill I try to write my own but it does not work,,"gaearon,gaearon",2017-11-25 16:20:54,2017-11-25 16:26:15
IS,Add bundle linting and tests to the release script,On CI we currently lint bundles L11 L12 and then run both development and production bundle tests L24 L25 We should add the first step linting bundles into a package json script called lint build Then we can change the CI command to run yarn lint build Finally we should add both yarn lint build yarn test prod yarn test build and yarn test build prod to the release script into this function L23 s Note that this function is already broken We need to replace runYarnTask cwd 'jest' 'Jest failed' with runYarnTask cwd 'test' 'Jest failed' too since just running jest no longer works due to a custom config Just running test should work because we have a custom test script s Never mind I fixed this in To verify your changes you can run scripts release build js v 16 2 0 and see that the whole workflow can run successfully This task requires understanding of how scripts in package json work,,"gaearon,watadarkstar,gaearon",2017-11-25 16:08:00,2017-11-26 16:47:20
PR,Add bundle linting and tests to the release script,Adds bundle linting and tests to the release script Closes 11660 Test check list x Ran yarn x Passed all tests with yarn test yarn test prod x Ran yarn prettier x Ran yarn lint x Ran yarn flow x Completed CLA x Ran yarn build and then yarn lint build new script I added x Ran scripts release build js v 16 2 0,,"watadarkstar,watadarkstar,gaearon,watadarkstar,gaearon,watadarkstar,gaearon",2017-11-25 18:54:20,2017-11-26 16:47:20
IS,eventPhase property of onClickCapture events has wrong value,Do you want to request a feature or report a bug I assume this is a bug What is the current behavior When I register an onClickCapture event handler click on the element and then inspect the event the eventPhase property is set to 3 which is equivalent to Event BUBBLING PHASE I'm currently rewriting the ReactTreeTraversal tests to use the public API that is how I found the problem If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Edit 6wrk742jp3 On codesandbox I would expect an alert false and then true but it is the other way round What is the expected behavior The eventPhase property should be set to Event CAPTURING PHASE 1 Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React I have not tried this in versions different from 16 1 1 all testing was done in Chrome 62,,"timjacobi,aweary,timjacobi",2017-11-25 23:22:50,2017-11-26 17:06:10
IS,Investigate CI failure possible race condition,It looks like this It happened two times on random commits and I do not see a pattern Probably caused by me changing how tasks are distributed between parallel nodes in I do not understand why upload build sh would try to run before a build exists though if that is what is happening,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2017-11-25 03:17:17,2017-11-26 18:03:31
PR,Upload build on the same node where it happens,Maybe this will fix I do not know why these stages were separated,,gaearon,2017-11-26 17:08:21,2017-11-26 18:03:31
IS,Constructor props and super props VS constructor and super,I know that this question was asked many times but it is still doesn t clear Many people just said Pass props to constructor if you want to access this props there one more example of the answer Oficial doc says Class components should always call the base constructor with props But if we do not pass props to constructor we will still have this props everywhere except constructor Also from source code of Create Element you can see that createElement adds props regardless if you use super props So the main question is Why React official doc says Class components should always call the base constructor with props if it is not really necessary So current React doc is wrong or what There is no need to call constructor always with props,,gaearon,2017-11-27 17:33:48,2017-11-27 17:55:24
PR,Use async await in Rollup scripts,Removes some boilerplate since we depend on Node 8 anyway Best viewed with w 1 async build expand 1 w 1,,"gaearon,nhunzaker,bvaughn,bvaughn,gaearon,trueadm,bvaughn",2017-11-27 16:00:36,2017-11-27 17:57:29
PR,Re enable fragment export,Re enable fragment export for upcoming release,,"clemmy,gaearon,gaearon",2017-11-27 21:01:11,2017-11-27 21:09:16
PR,Enable bundle tests for React Fragment,Follow up to No need for these tests to be internal now because we do not import feature flags This allows them to run for bundles,,gaearon,2017-11-27 21:15:47,2017-11-27 21:44:14
PR,Remove accidentally duplicated tests,I copied tests from IncrementalErrorHandling test when I was separating the ReactFiberErrorLogger specific ones but I forgot to remove the generic ones that are already in IncrementalErrorHandling In this PR I am removing duplicate tests it is literally copy pasta from IncrementalErrorHandling test and then unindenting one level from a nested describe Review without whitespace,,gaearon,2017-11-27 22:25:57,2017-11-27 22:38:51
PR,Lint untracked files with yarn linc,This PR refers to 11646 Untracked git files will also be linted by yarn linc except for those ignored by gitignore,,"accordeiro,gaearon,accordeiro,gaearon,gaearon,accordeiro,gaearon",2017-11-26 14:03:44,2017-11-27 23:30:37
IS,yarn linc should also lint untracked files,Too often I would run yarn linc it would say lint passed for changed files and then I would realize I have not added a file yet so it does not see the file We should make yarn linc include untracked files Note that if a file is ignored in git that is a different matter But if it shows up as untracked it is extremely likely I want to lint it,,"gaearon,accordeiro,gaearon,accordeiro,accordeiro,gaearon",2017-11-23 14:46:02,2017-11-27 23:30:53
PR,Update HTTP HTTPs in README files,URLs were updated to use HTTPS protocol in README files Update URLs to reduce 301 Redirects for speed Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Run yarn test prod to test in the production environment It supports the same options as yarn test 6 Format your code with prettier yarn prettier 7 Make sure your code lints yarn lint Tip yarn linc to only check changed files 8 Run the Flow typechecks yarn flow 9 If you have not already complete the CLA Learn more about contributing,,him2him2,2017-11-22 22:15:04,2017-11-28 02:13:42
IS,Where react storages its flow types,Hi there Im trying to understand how flow resolves this There is nothing called ComponentType in node modules react directory Where ComponentType is defined,,gaearon,2017-11-28 10:27:31,2017-11-28 12:55:38
IS,Warning Button When calling super in Button make sure to pass up the same props that your component is constructor was passed,version 16 1 1 I use typescript write react Using object oriented inheriting package components What should I write to solve this type of problem now the TS editor has passed the type check but React does not pass it Panel tsx,,gaearon,2017-11-28 11:12:49,2017-11-28 13:09:19
IS,yarn linc should not fail because of file has not changed warning,Just saw this after modifying ESLint config and running yarn linc We should not treat this particular warning as an error,,"gaearon,HeroProtagonist",2017-11-21 20:40:42,2017-11-28 13:54:47
PR,Do not fail yarn linc for ignored file warning 11615,Resolves 11615 Problem This error happens because by default eslint ignores dotfiles L246 The yarn linc command can supply dotfiles like eslintrc js causing this error because of the mismatch between the ignore patterns and what is being given as lint input This eslint thread talks about this issue with this PR resolving it Solution Hidden files will now be linted but not hidden folders As of now the only hidden js file seems to be the eslintrc js but this will prevent this from happening if any are added in the future As a bonus the rc file will be linted going forward Happy Thanksgiving,,"HeroProtagonist,gaearon,HeroProtagonist,gaearon,gaearon,HeroProtagonist,gaearon,HeroProtagonist,gaearon",2017-11-23 08:02:07,2017-11-28 13:54:47
PR,Migrate to CircleCI2 0 and Add AppVeyor for master only branch,Ref 11595 Result of AppVeyor on my fork Result of CircleCI 2 0 on my fork cc,,"raphamorim,jquense,jquense,jquense,raphamorim,raphamorim,gaearon,raphamorim,jquense,raphamorim,gaearon,raphamorim,raphamorim,raphamorim,raphamorim,gaearon",2017-11-20 23:25:39,2017-11-28 14:39:18
PR,Migrate to CircleCI 2 0,For what Migrate to CircleCI 2 0 to speed up the build Docker image CircleCI 2 0 supports docker natively In this pull request I tried to use starefossen ruby node docker image I thought that this was appropriate as a reliable docker image with Ruby and Node bundled,,gaearon,2017-11-22 03:12:12,2017-11-28 14:39:37
IS,Warning the tag blockqoute is unrecognized in this browser,Do you want to request a feature or report a bug Bug What is the current behavior In Chrome 62 js console i see this warning But tag is supported by this browser If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 jsfiddle example What is the expected behavior This warning should not be displayed Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 1 1 Chrome 62 This was ok in React 15 6 1,,,2017-11-28 14:50:31,2017-11-28 15:01:26
IS,SetState callback called before component state is updated in React Shallow Renderer,Do you want to request a feature or report a bug report a bug What is the current behavior When I call setState with a callback in a test using react shallow renderer via enzyme the callback gets called and this state is still the old state EDIT This seems limited to componentWillMount If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 EDIT Reproduce with this What is the expected behavior When the setState callback gets called it should have access to the new state Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Version 16 It worked in v15 with enzyme 2 EDIT I think this is because in componentWillMount this line L67 causes the render method in the shallow wrapper to return early before it updates the state,,"gaearon,gaearon,gaearon,gaearon,accordeiro,accordeiro,clemmy",2017-11-09 00:35:37,2017-11-28 15:08:09
PR,CI remove unnecessary Yarn download,Summary circleci node 8 Docker image already contains latest Yarn so downloading it on every run does not make much sense I also removed the YARN VERSION variable as it was used nowhere,,"thymikee,gaearon,thymikee,gaearon,raphamorim,raphamorim",2017-11-28 15:15:01,2017-11-28 16:08:09
IS,Javascript Exception invalid host,Using react 16 1 1 react native 0 50 4 When releasing the app for Android we get this error upon launching it the app does not even appear and crashes screenshot 2017 11 28 18 09 15 846 com miui bugreport We believe that this may be related to React and the Javascript engine on the mobile Any ideas why is this happening Note that this is a react native application,,"gaearon,gaearon,gaearon",2017-11-28 16:13:35,2017-11-28 16:32:39
PR,Move ReactFiberTreeReflection to react reconciler reflection,ref 11659,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2017-11-28 14:57:34,2017-11-28 16:57:23
IS,Add Flow Coverage to Renderer Fixture or use a maintained renderer for tests,The renderer package contains a fixture that has to be updated every time we change APIs However it is not covered by Flow nor by full test coverage so it is very tedious to make sure you get it exactly right I messed it up in Making changes to the API also means updating a lot of renderers at this point It would be nice if the fixture could be built on top of the Noop renderer or something cc,,"sebmarkbage,iamdustan,acdlite,iamdustan,gaearon",2017-10-13 17:52:33,2017-11-28 16:57:38
IS,Move ReactFiberTreeReflection to react reconciler reflection,We should Move ReactFiberTreeReflection to be exported from react reconciler reflection entry point similar to how react dom test utils entry point is set up Create a flat bundle for it similar to how react dom test utils is set up in bundles js Change code that imports ReactFiberTreeReflection directly to do it through react reconciler reflection instead Make react reconciler a dependency of react noop renderer in package json This should ensure the reconciler does not actually get bundled with react noop renderer and instead stays a require call Then the interaction of these two packages will actually be tested when you run yarn test build after yarn build core noop reconciler type NODE This task is not friendly to beginners It requires an understanding of the relationship between different packages and a willingness to research and experiment with how our build process is set up,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2017-11-25 15:57:33,2017-11-28 17:36:14
IS,react dom 16 1 1 production builds use new Set not supported on IE9 10,Do you want to request a feature or report a bug Bug What is the current behavior Production builds include new Set which is not supported on IE 9 or IE 10 but the supported browsers browser support are reported as IE9 onwards If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior Production builds should not use features that are not available on the supported browsers Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React react dom 16 1 1 with IE9 or IE10 I had not noticed this problem in earlier builds,,"gaearon,gaearon,gaearon",2017-11-28 20:36:20,2017-11-28 20:38:24
PR,WIP Fix for fiber root scheduling memory leak,Not to be merged After some investigation work for a memory leak on React Native we found that nextRoot was never set to null and left in that state upon the view fulling being unmounted I believe that is has to do with the fact that we set nextRoot and nextUnitOfWork to null then immediately call requestWork which sets them back again This results in a memory leak as the node tree of nextRoot never gets garbage collected This is more of a temporary research fix rather than an explicit fix I'm sure will have a concrete fix based from this,,"trueadm,gaearon,trueadm,gaearon,acdlite,trueadm,clemmy",2017-11-23 11:47:34,2017-11-28 20:57:33
PR,Blacklist spyOn Add explicit spyOnProd and spyOnDevAndProd,Seems like it is too easy to use spyOn when we should not Let is blacklist it in favor of explicitly scoped spy methods There is a comment in scripts jest setupTests js that I do not understand It says TODO Stop using spyOn in all the test since that seem deprecated Why do we think spyOn is deprecated The official Jest docs list jest spyOn as being available for 19 0 0 Is this comment maybe referring to the call through behavioral differences or something I also updated scripts jest spec equivalence reporter setupTests js and scripts jest typescript jest d ts although neither is necessary at this time,,"bvaughn,SimenB,bvaughn",2017-11-28 21:35:02,2017-11-28 22:06:27
PR,Fix CI fact uploading,,,gaearon,2017-11-28 22:31:28,2017-11-28 22:39:43
PR,Stop ESLint from looking for a configuration file in parent folders,ESLint by default searches for configurations files up to the root directory To quote ESLint documentation configuration cascading and hierarchy By default ESLint will look for configuration files in all parent folders up to the root directory This can be useful if you want all of your projects to follow a certain convention but can sometimes lead to unexpected results This is not necessarily wrong but it can definitely lead to unexpected situations such as having an invalid package json file in any parent directory and getting an error message or even trickier ones where a package json file in any parent directories takes precedence and you end up with different lint rules than those those specified in the project By adding the 'root' true option in the configuration we limit it to the specific project,,"skiritsis,gaearon",2017-11-28 22:43:43,2017-11-28 22:56:30
PR,Added ReactFeatureFlags shim for React Native,PR 11603 added a feature flag fork for the React Native renderer dubbed ReactNativeFeatureFlags This fork uses statically defined flags for everything but the recently added debugRenderPhaseSideEffects which gets loaded at runtime via the ReactFeatureFlags module This PR adds a missing shim for the ReactFeatureFlags module I should have included it with the previous PR but did not,,"bvaughn,gaearon,bvaughn,gaearon,bvaughn,gaearon,bvaughn,gaearon,bvaughn,gaearon,bvaughn,gaearon,bvaughn,gaearon,bvaughn",2017-11-28 22:39:40,2017-11-28 23:16:54
PR,root createBatch,Alternative to API for batching top level updates and deferring the commit root createBatch creates a batch with an async expiration time associated with it batch render updates the children that the batch renders batch then resolves when the root has completed batch commit synchronously flushes any remaining work and commits No two batches can have the same expiration time The only way to commit a batch is by calling its commit method E g flushing one batch will not cause a different batch to also flush TODO Specify error handling behavior,,"acdlite,sebmarkbage,sebmarkbage,acdlite,sebmarkbage,acdlite,acdlite,sebmarkbage,acdlite,acdlite,gaearon",2017-11-06 17:14:01,2017-11-29 00:48:36
PR,API for prerendering a top level update and deferring the commit,Adds the ability to start rendering work without flushing the changes to the screen by blocking the commit phase This can be used to coordinate React is commit phase with other async work root prerender schedules an update and returns a work object work then schedules a completion callback that fires once the work completes work commit unblocks the commit phase and flushes the remaining work synchronously Lazy roots that start rendering before the DOM container is available are not yet implemented I will do that in a subsequent PR root render and root unmount were updated to also return work objects In those cases since the commit phase is not deferred by the time the then callback is fired the work has already committed,,"acdlite,acdlite,clemmy,acdlite,sebmarkbage,acdlite,acdlite,sebmarkbage,acdlite,gaearon,acdlite,acdlite,acdlite",2017-10-24 03:46:00,2017-11-29 00:49:18
PR,Always set pendingProps to the next props,In the current implementation pendingProps is null if there are no new props since the last commit When that happens we bail out and reuse the current props But it makes more sense to always set pendingProps to whatever the next props will be In other words pendingProps is never null on the work in progress it points to either new props or to the current props Modeling it this way lets us delete lots of code branches and is easier to reason about bail outs just compare the pending props to the current props,,"acdlite,sebmarkbage,acdlite,acdlite",2017-11-17 01:46:58,2017-11-29 00:50:24
PR,Convert scripts error codes to use ES6 syntax,If need be I can squash the commits,,"gaearon,gaearon,gaearon,gaearon",2017-11-28 23:34:49,2017-11-29 01:13:13
PR,Update noop renderer to only work on a single root,We are shifting toward model where renderers will schedule work per root rather than globally across all roots The behavior could vary greatly between different renderer implementations so it does not make sense to implement this in the noop renderer which is meant only for behavior that is the same across all renderers,,"acdlite,gaearon,acdlite",2017-10-17 02:30:08,2017-11-29 02:09:59
IS,CLOSED,Close it for I made mistake my self,,,2017-11-29 09:57:42,2017-11-29 10:14:57
PR,Rewrite ReactTreeTraversal test js using public APIs,Hej This is a super interesting test to look at since the tests cover 3 different areas when you try to rewrite them using only public APIs So far I have converted 1 3 of the tests to use public APIs only The rest I would like to discuss traverseTwoPhase These were fairly straightforward to rewrite I could even used the same expectedCalls arrays for the expectations on the mock The only thing that could be a bit nicer is the calls to eventHandler I would like to factor out passing the arguments but 11663 prevents me from passing the event phase dynamically traverseEnterLeave In order to test them in the same fashion as most other public API tests I would have to dispatch onmouseenter and onmouseleave events against the DOM nodes and see which event handlers React calls Unfortunately dispatching these event types does not have an effect and looking at EnterLeaveEventPlugin js it seems like enter and leave events are implemented using onmouseover and onmouseout The tests seem to verify the capturing and bubbling behaviour which are inherently different between onmouseenter and onmouseover as well as onmouseleave and onmouseout I would be really thank for some ideas on how we could solve this getFirstCommonAncestor aka getLowestCommonAncestor This function is only used by the ResponderEventPlugin which is in turn only used by React Native This does not mean we can not test it only with public APIs but we might struggle with that in our JSDOM environment Again would be great to discuss alternatives,,"timjacobi,gaearon,gaearon,gaearon,gaearon,gaearon,timjacobi,gaearon,gaearon,timjacobi,timjacobi,gaearon,gaearon,timjacobi,gaearon,timjacobi,timjacobi,timjacobi,gaearon,gaearon,timjacobi",2017-11-26 01:26:12,2017-11-29 14:04:18
PR,Try to fix AppVeyor,I think this should work,,gaearon,2017-11-29 14:14:37,2017-11-29 14:19:33
PR,WIP Add Appveyor Badge,Reference 11605 Hi we still need to configure AppVeyor for facebook react I think in something like,,"raphamorim,gaearon,raphamorim,gaearon,raphamorim,gaearon,raphamorim,gaearon,raphamorim",2017-11-29 01:26:38,2017-11-29 14:34:25
IS,Question Automatize tests on Windows environment Circle CI 2 0,Hi everyone I was wondering if it makes sense implement the React Tests for windows environment Even if it is to test only the build task or only run for master branch I was thinking of using the appveyor My other question is about migrate to Circle CI 2 0 configuration If any of this questions make sense I will be available to implement it,,"raphamorim,gaearon,raphamorim,gaearon",2017-11-19 17:46:37,2017-11-29 14:34:58
IS,ReactDOM createPortal support Fragment,Hello Maybe it is possible add support Fragment for createPortal method Example this code add wrapper for buttons Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React 16 2,,"gaearon,gaearon,gaearon",2017-11-29 13:38:08,2017-11-29 14:48:11
PR,Delete Fiber test tracker,It is outdated and probably broken now If we ever need this again we will likely want to rewrite anyway Also it is source control,,gaearon,2017-11-29 14:58:48,2017-11-29 15:27:17
IS,Server rendering a tag attribute with no value,Do you want to request a feature or report a bug Bug What is the current behavior When I server render this script src '' async The HTML has async instead of just async Using React 16 1 1 and node 8 9 1 Is there a way to render script src ' ' async rather than script src ' ' async Not sure if browsers treat async as true or false,,"gaearon,aweary,gaearon",2017-11-29 15:33:20,2017-11-29 15:40:07
PR,Throw if document is missing by the time invokeGuardedCallbackDev runs,The case described in is pretty unintuitive This attempts to provide a better warning message when this happens I opted not to modify the behavior since it is going to be pretty fragile and will probably break down the line anyway Just printing a warning early,,"gaearon,nhunzaker,sophiebits,gaearon,sophiebits,gaearon,gaearon",2017-11-27 22:59:52,2017-11-29 15:53:17
IS,How does react map props to dom internally,Hi I'm working on a library that proxy is SVG elements so you can mutate the SVG Element when it has loaded I noticed that when I added an onClick prop to my Mutate component it did not map properly as in javascript the proper syntax is onclick Here is where the code I'm working on lives L17 I'm wondering how ReactDOM does this internally so I can have a consistent API with my library any support on this topic is greatly appreciated thanks,,"gaearon,gaearon,gaearon,gaearon",2017-11-29 15:50:59,2017-11-29 16:17:57
PR,no more vars convert var to let const,After discuss with in I guess it is best to continue with I took the liberty of following the footsteps of 6097 and sending this PR But still missing run it on files with Flow,,"raphamorim,gaearon,raphamorim,raphamorim,raphamorim,raphamorim,gaearon,raphamorim",2017-11-29 01:44:12,2017-11-29 17:28:38
PR,Fixes path in package json build script,Noticed a minor typo in package json build script path Fixed in accordance with the others,,"ArtemFitiskin,gaearon",2017-11-29 17:28:09,2017-11-29 17:32:47
PR,Deprecate injecting custom event plugins,It is time we do this IMO See Internally I plan to fix up the remaining five or so callsites by hand In any case the ecosystem should migrate earlier since it is a trail of dependencies,,"gaearon,gaearon,gaearon",2017-11-28 21:27:17,2017-11-29 17:48:17
PR,Remove empty value for boolean attributes in SSR,Turns out this was super easy For boolean attributes and overloaded boolean attributes with a value of true we can just render the attribute name and save people a few bytes I'm pretty sure this is safe for all attribute value pairs that would hit this path,,"aweary,gaearon",2017-11-29 17:41:43,2017-11-29 17:59:57
PR,Prevent infinite loop when SSR rendering a portal,Fixes the 16 2 regression in Restores the behavior from 16 0 and 16 1 but with a better message Also adds a catch all to prevent future regressions I thought we could skip them But then adding support for them later would be a breaking change Seems better to be strict now so we are not blocked on a major release for supporting them in the future,,"gaearon,gaearon,gaearon",2017-11-29 20:10:55,2017-11-29 21:45:39
IS,ReactDOMServer renderToStaticMarkup gets stuck while trying to render Portals,Calling ReactDOMServer renderToStaticMarkup elementWithPortal gets stuck in a loop while trying to do a static render Current behavior The behavior can be seen here by un commenting line 58 warning this will make your tab freeze Expected behavior It should return with results or throw some kind of error if the input is not valid,,"gaearon,aweary,gaearon,gaearon,aweary,gaearon,gaearon,gaearon,gaearon",2017-11-28 21:36:13,2017-11-29 21:45:53
PR,Rewrite SelectEventPlugin test to test behavior using Public API 11299,I rewrote one of the two tests to use Public API but I'm not sure about the other The test is supposed to verify that in case we have no event listeners attached the events are not extracted Is not this decision taken internally by react though And since they are not extracted in the first place how can you verify it without tapping into React internals Any ideas or feedback are welcome,,"skiritsis,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,skiritsis,gaearon,skiritsis,gaearon,skiritsis,gaearon,gaearon,gaearon,skiritsis,gaearon",2017-11-27 22:57:01,2017-11-29 22:17:47
IS,Usage of React JS,Hello I'm new in react js and I got some questions 1 Is react JS only fitable for static webpage only or is also fitable for dynamic webpage without using the F5 button 2 Is it commen to combine react JS with another library for instance jQuery 3 What context is react JS is recommended use YOu also have different tools for instance jQuery Angular JS Bootstrap etc Thank you,,gaearon,2017-11-30 09:41:56,2017-11-30 11:18:19
PR,events convert var to let const,Ref 11699 cc This is the first separated PR Next one 11715,,raphamorim,2017-11-30 11:34:32,2017-11-30 12:07:41
PR,react convert var to let const,Ref 11699,,raphamorim,2017-11-30 11:50:53,2017-11-30 12:08:59
PR,Unify the way we fork modules,This unifies the ad hoc way we fork modules so it is easy to see which modules are forked under which conditions and how to add new forks This will help us get rid of the existing external dynamic injection that we still rely on in www after this is merged,,"gaearon,gaearon,bvaughn,gaearon,gaearon,gaearon",2017-11-30 01:08:51,2017-11-30 12:11:01
IS,Flat Bundle Followup Umbrella,Now that flat bundles are mostly done separating out followup work into a separate issue x Should ReactDebugCurrentFrame be in isomorphic package x Does extractErrors fully work It does update the file but I'm still seeing out of sync console spam on rebuilds x What happens if user forgets to envify process env NODE ENV with webpack or use dead code elimination Would it bundle both bundles Sounds like even worse than what happens now Would the user see any warnings x Wrap CommonJS bundles into conditions x Add a way to see bundle size change x Address internal FB invariant issue I think they wanted it to be ignored so it is used verbatim x Figure out RN rollout strategy x When does it go 100 Fiber Do we switch to flat bundles after that x See for possible workaround for circular injection x Flat ReactNative bundle would require flat React bundle but that is not what is shipped on npm x Make sure error codes transform still works x Add a fixture for ReactART x Make a final decision on how we bundle server renderer x Remove providesModule in source x Maybe reduce duplication between UMD bundles e g put object assign on React internals x Convert source to ES6 modules x Update release documentation s Extract shared state to npm package s x Use named imports in more places eg event system x Figure out a static injection mechanism for www and RN Investigate mangling and GCC optimizations Figure out how to share build process with third party renderers e g ART for starters Simplify the default build process to not run FB bundle builds come up with a better strategy for FB only builds maybe,,"gaearon,gaearon,gaearon",2017-04-03 16:39:25,2017-11-30 12:13:08
IS,How to use two versions of the React 0 14 16 at the same time,I want to request a feature or ask question I was faced with the dilemma of using two versions of React at the same time This problem occurs when writing a large project container on the React 16 which within themselves can download the app widgets previously written that using an older version of React Can I without changing old projects to put them to respond with the old version React and for new projects to put to React 16 For example webpack solution something like this this example renames the old version to the new one but I'm looking for the reverse solution module exports other settings resolve alias react dirname ' node modules react' react addons dirname ' node modules react addons' other settings,,gaearon,2017-11-30 14:25:21,2017-11-30 14:33:13
PR,react art convert var to let const,Ref 11699 cc next one is 11721,,raphamorim,2017-11-30 14:52:48,2017-11-30 15:23:25
PR,Fix issues with the new fork plugin,Found a few issues Some Node versions crash when null character gets passed to path utils Fixing this by ignoring Rollup internal path identifiers that start with it require resolve only supports the paths option since Node 8 9 0 So I'm adding another way to do it for older Nodes based on what ESLint did,,gaearon,2017-11-30 16:11:51,2017-11-30 16:20:10
PR,Replace ReactFiberErrorLogger injection with static forks,This uses the new static module injection system formalized in to remove the dynamic injection from one of the modules It wo not require changes on RN side but will on www I will send a diff once this is merged,,gaearon,2017-11-30 13:08:33,2017-11-30 17:57:13
PR,Rewrote ReactIncrementalPerf test using only public API 11299,Prerequisites x All tests ran successfully x Code formatted with prettier x Code linting done Flow run pending Issue related to Windows 11703 x Completed the CLA Changes added ReactPortal js shifted to shared directory Implemented createPortal method in ReactNoop js This createPortal is used to write test for support portals in ReactIncrementalPerf test internal js Please let me know if I need to make any further modifications or changes,,gaearon,2017-11-30 17:29:44,2017-11-30 18:10:05
PR,Use static injection for ReactErrorUtils,Like but for another module,,gaearon,2017-11-30 18:42:49,2017-11-30 19:10:47
PR,Test create TapEventPlugin test,move TapEventPlugin to TapEventPlugin test internal js from ReactBrowserEventEmitter test internal js,,"madeinfree,gaearon,madeinfree,madeinfree",2017-11-30 20:42:49,2017-11-30 21:22:59
IS,IE 11 and Edge no longer prompt to remember password on controlled form,Do you want to request a feature or report a bug Bug regression IE Edge What is the current behavior On React v15 2 0 Edge and IE11 do not prompt the user to save the password for the form Steps to reproduce With react 15 1 0 With React 15 2 0 What is the expected behavior The browser prompts the user to save their password for the form Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 15 2 0 It worked in React 15 2 0 IE 11 Edge,,"jdalton,jdalton,nhunzaker",2016-07-21 12:26:25,2017-11-30 21:24:56
PR,Use defaultValue instead of setAttribute 'value',This commit replaces the method of synchronizing an input is value attribute from using setAttribute to assigning defaultValue This has several benefits Fixes issue where IE10 and Edge password icon disappears 7328 Fixes issue where toggling input types hides display value on dates in Safari unreported See a gif Removes mutationMethod behaviors from DOMPropertyOperations Removes the need to re assign min max and other input props to ensure execution order value and defaultValue always assign later This should replace which is out of date and the fork has been removed Test Plan Visit the fixtures here 1 Test text inputs 2 Test number inputs 3 Test password inputs in IE10 and Edge 4 Test input change events I have tested these in the following browsers oof x Chrome 42 x Chrome 61 x IE 9 x IE 10 x IE 11 x Edge 15 x Edge 16 x Firefox 56 x Firefox ESR 47 x iOS Safari 6 x iOS Safari 10 x iOS Safari 11 x Desktop Safari 11 x Desktop Safari 10 x Desktop Safari 7 x Desktop Safari 6 x Chrome for Android latest This should fix 7328,,"nhunzaker,nhunzaker,nhunzaker,nhunzaker,nhunzaker,nhunzaker,nhunzaker,gaearon,gaearon,jquense,nhunzaker,nhunzaker,nhunzaker,jquense,nhunzaker,nhunzaker,nhunzaker,aweary,nhunzaker,jquense,nhunzaker,aweary,nhunzaker,jquense,nhunzaker,nhunzaker,gaearon,nhunzaker,gaearon,gaearon,nhunzaker,gaearon,jquense,nhunzaker,gaearon,nhunzaker,gaearon,nhunzaker,nhunzaker,gaearon,nhunzaker,nhunzaker,gaearon,gaearon",2017-11-12 18:08:24,2017-11-30 21:24:56
PR,Preserve browser input behavior,This PR closes 7328 In IE Edge if you set the value of a password input it knocks off any of the helpers like the unmasker and save password prompt I basically just wrapped the bulk of setValueForProperty in a condition '' node propName '' value which is similar to the old HAS SIDE EFFECTS check diff f04a397aa63ac69c28dab46e9863bb90L152 If it is too aggressive or needs to be scoped down that is cool too,,"jdalton,sophiebits,jdalton,syranide,sebmarkbage,jdalton,nhunzaker,syranide,nhunzaker,nhunzaker,gaearon",2016-11-11 01:23:25,2017-11-30 21:27:05
PR,react native renderer convert vars to let const,Ref 11699,,raphamorim,2017-11-30 15:21:48,2017-11-30 21:39:40
PR,react rt renderer react cs renderer react call return Convert vars to let const,Ref 11699 Converted packages react rt renderer react cs renderer react call return The next one is,,raphamorim,2017-11-30 15:01:56,2017-11-30 21:40:13
PR,Move HTML and SVG configs into DOMProperty,This moves HTML and SVG configs in the same file as DOMProperty Literally copy and paste The injection has not been exposed so we can get rid of it I liked that it was easy in the past to search for SVG and find the list but the downside is that it is harder to make this code more static when it is split between files Putting it all in one place is the first step towards removing the metaprogramming In the second commit I replaced some unnecessary invariants with warnings,,"gaearon,nhunzaker,gaearon",2017-11-30 20:59:32,2017-11-30 22:29:59
PR,react reconciler convert vars into let const,Ref 11699,,raphamorim,2017-11-30 22:20:14,2017-11-30 23:59:05
PR,react test renderer convert vars into let const,Ref 11699,,"raphamorim,raphamorim,gaearon",2017-11-30 22:26:42,2017-12-01 00:01:46
PR,shared convert vars into let const,Ref 11699,,"raphamorim,gaearon,raphamorim",2017-11-30 22:23:31,2017-12-01 00:03:28
PR,react noop renderer convert vars into let const,ref 11730 last one I promise,,"raphamorim,raphamorim,gaearon,gaearon,gaearon,raphamorim,raphamorim,raphamorim,gaearon,gaearon,raphamorim,gaearon,raphamorim",2017-12-01 00:39:34,2017-12-01 01:10:10
IS,React complains when I use super arguments on constructor,The code below gives me the following warning,,gaearon,2017-12-01 03:10:34,2017-12-01 03:16:16
PR,Remove dead code from DOMPropertyOperations,Just noticed this working through 11734 I'm not really sure what happened but I think this dead code can go,,"nhunzaker,gaearon",2017-12-01 12:57:47,2017-12-01 13:27:42
IS,Elements rendering with import before usage,React 16 is attempting to render as soon as it is imported regardless of whether its used in the component it is being imported to There is zero information about this and is highly worrysome and has stopped our production,,jquense,2017-12-01 15:15:04,2017-12-01 15:33:21
PR,Add explicit warning assertions to ReactDOMInput test,It used to spyOnDev before every test effectively ignoring any warnings So it was easy to break a warning in some cases or to fire an extra one This adds explicit assertions about all currently firing warnings,,gaearon,2017-12-01 17:06:29,2017-12-01 17:16:06
PR,remove reconcileChildren,rm reconcileChildren use reconcileChildrenAtExpirationTime directly,,"zombieJ,gaearon",2017-12-01 03:59:28,2017-12-01 17:23:50
PR,Fix benchmark runner,I used it today and decided to change a few things to make it more usable Fixed lighthouse dependency version this one is broken Fixed instructions to match Yarn 1 0 syntax and the command name Removed the build stats table we already have it on the build This allowed me to always build just React ReactDOM UMDs without being confusing Since otherwise the build is impossibly slow for iteration and I ended up building just React ReactDOM UMDs anyway,,"gaearon,aickin,gaearon,gaearon",2017-12-01 22:21:20,2017-12-02 00:00:30
PR,Add a test for bad Map polyfill and work around Rollup bug,This adds test coverage for these lines L41 L51 I only did this for Map because it is a bit hacky and I figured this would be enough to find regressions It fails the bundle tests because apparently Rollup strips the new calls out which is how we discovered the problem with this check So I added a workaround for that and a TODO to report this to Rollup,,"gaearon,gaearon",2017-12-01 18:29:09,2017-12-02 00:00:41
PR,Begin replacing propertyInfo access with functions,The goal is to remove the injection step at initialization I find it confusing because we always have to look in three places the configs the initialization logic and then the use of those properties I think this is partly why the logic got so tangled by now I'm starting by removing the propertyInfo properties one by one replacing them with function calls There might be better implementations happy to revise them In some cases it may seem like we would have to repeat an attribute name a few more times than before but I think it probably gzips well and in any case I will make sure the size is smaller or the same before merging Note I'm not changing logic yet There are a few oddities in how code paths differ based on whether propertyInfo exists which ideally should not be the case I will looking at that later,,"gaearon,nhunzaker,gaearon,nhunzaker,gaearon,nhunzaker,nhunzaker,gaearon,gaearon,nhunzaker,aweary,nhunzaker,gaearon,nhunzaker,gaearon,aweary,gaearon,gaearon,nhunzaker,nhunzaker,nhunzaker,gaearon,aweary,nhunzaker,aweary,gaearon,aweary,gaearon,aweary,gaearon,gaearon,gaearon",2017-12-01 00:40:05,2017-12-02 14:42:46
PR,Use the same value synchronization function on number blur,I updated ReactDOMInput synchronizeDefaultValue such that it assignes the defaultValue property instead of the value attribute I never followed up on the ChangeEventPlugin is on blur behavior Follow up from Fixes,,"nhunzaker,gaearon,nhunzaker,nhunzaker,gaearon,nhunzaker,nhunzaker",2017-12-01 20:23:27,2017-12-02 16:06:33
PR,WIP no more vars on packages,Removing remaining vars REF 11732 Removed entirely x events x react x react art x react call return x react cs renderer x react dom x react native renderer x react noop renderer x react reconciler x react rt renderer x react test renderer x shared,,"raphamorim,gaearon,raphamorim,raphamorim",2017-12-01 01:27:37,2017-12-02 23:26:20
IS,inline style 'currentColor' not support,borderColor 'currentColor' complied to borderColor 'currentcolor',,,2017-12-03 10:11:27,2017-12-03 10:15:35
IS,how to make state Independent,i have a component i use InputTest in componentName twice how can i make every InputTest state is Independent,,gaearon,2017-12-03 14:53:36,2017-12-03 15:00:42
IS,Testing React 16 2 0,Hi I'm using Jest and I'm trying to write a test for JSXFragments is there something new I need in order for JSXFragments to be testable I'm currently getting this issue You gave us a visitor for the node type JSXFragment but it is not a valid type this error seems to be coming from babel,,gaearon,2017-12-04 07:48:15,2017-12-04 13:11:50
PR,Adjust input value detachment to avoid input validation in FireFox,Fixes 8395 React DOM intentionally sets value on inputs when they are created This prevents an issue where changes to defaultValue cause the value property to change This is colloquially known as value detachment Unfortunately this triggers input validation displaying a red aura in Firefox This works around that by 1 Only detaching if the related value is truthy 2 Reassigning the type property on date color inputs to preserve the iOS fix Test Plan 1 Open 2 The Required Inputs test case inputs should not be invalid no red 3 The date input placeholders on the All inputs test case should display So far I have tested in Success so far Safari Desktop 11 Safari iOS 7 8 4 10 2 11 Firefox 47 56 Chrome 61 IE 10 11 IE Edge 15,,"nhunzaker,sophiebits,jquense,nhunzaker,nhunzaker,sophiebits,nhunzaker,nhunzaker,nhunzaker",2017-10-12 02:35:22,2017-12-04 13:21:22
IS,Firefox validation triggers on input component render,When using native form validation and loading a page with a form containing an input with the required prop set it triggers browser validation immediately This produces Firefox is native error highlighting This is because Firefox appears to run validation when the DOM is used to set a value on an existing input component The behavior can be seen here Angular has run into this already,,"gaearon,jquense,nhunzaker,sophiebits,nhunzaker,jquense,nhunzaker,nhunzaker,nhunzaker",2016-11-23 13:58:23,2017-12-04 13:30:56
PR,Eliminate unnecessary numeric equality checks,This commit changes the way numeric equality for number inputs works such that it compares loose equality for numbers This seems sufficient and eliminates quite a bit of branching around numeric equality This additionally addresses Flow type issues on 11741 and it is based off that branch Test plan 1 Open 2 Run through the Text and Number test fixtures Tested in x Chrome 43 62 x Safari 7 1 11 x Firefox 52 ESR 58 x IE 9 10 11 x Edge 14 16,,"nhunzaker,nhunzaker,nhunzaker,gaearon,nhunzaker,aweary,aweary,aweary,nhunzaker,nhunzaker,nhunzaker,gaearon,nhunzaker,nhunzaker",2017-12-02 18:09:56,2017-12-04 13:44:06
PR,Add test fixture for initial input validation bug in Firefox,Adds a test fixture for 8395 img width 902 alt screen shot 2017 12 04 at 8 33 36 am src This is fixed on master but this is really hard to catch without a manual fixture,,nhunzaker,2017-12-04 13:34:28,2017-12-04 13:59:54
PR,Ensure value and defaultValue do not assign functions and symbols,I think this addresses I need to verify with the attribute table img width 1269 alt screen shot 2017 12 01 at 8 47 14 am src,,"nhunzaker,nhunzaker,gaearon,gaearon,nhunzaker,gaearon,jquense,gaearon,jquense,nhunzaker,nhunzaker,nhunzaker,nhunzaker,jquense,gaearon,nhunzaker,aweary,nhunzaker,gaearon,gaearon,nhunzaker,nhunzaker,nhunzaker,gaearon,nhunzaker,nhunzaker,gaearon,gaearon,nhunzaker,nhunzaker,nhunzaker",2017-12-01 13:50:35,2017-12-04 14:39:33
PR,Use NODE in package json scripts,This should fix our www sync script issues it tries to use the wrong Node Supposedly this variable is set by npm or Yarn when running package json scripts,,"gaearon,jquense,gaearon,jquense,gaearon",2017-12-04 15:17:24,2017-12-04 15:33:01
PR,Remove var,Ref 11736,,"raphamorim,gaearon,raphamorim,raphamorim,raphamorim,gaearon,raphamorim",2017-12-02 23:25:35,2017-12-04 20:20:31
PR,Update ReactElement js,As far as I know only React global has createElement property So if this check is made L43 there should not be any DEV checks in the 'non validation' file Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Run yarn test prod to test in the production environment It supports the same options as yarn test 6 Format your code with prettier yarn prettier 7 Make sure your code lints yarn lint Tip yarn linc to only check changed files 8 Run the Flow typechecks yarn flow 9 If you have not already complete the CLA Learn more about contributing,,jquense,2017-12-04 20:14:17,2017-12-04 20:55:01
PR,Update ReactElement js,Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Run yarn test prod to test in the production environment It supports the same options as yarn test 6 Format your code with prettier yarn prettier 7 Make sure your code lints yarn lint Tip yarn linc to only check changed files 8 Run the Flow typechecks yarn flow 9 If you have not already complete the CLA Learn more about contributing,,jquense,2017-12-04 20:04:38,2017-12-04 20:57:47
PR,ReactDOM createRoot creates an async root,Makes createRoot the opt in API for async updates Now we do not have to check the top level element to see if it is an async container,,"acdlite,bvaughn,acdlite,bvaughn,acdlite,bvaughn,bvaughn,bvaughn",2017-12-04 21:31:37,2017-12-04 22:34:03
PR,Avoid creating a new Array,Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Run yarn test prod to test in the production environment It supports the same options as yarn test 6 Format your code with prettier yarn prettier 7 Make sure your code lints yarn lint Tip yarn linc to only check changed files 8 Run the Flow typechecks yarn flow 9 If you have not already complete the CLA Learn more about contributing,,acdlite,2017-12-04 21:46:14,2017-12-05 01:09:57
IS,Pressing tab in text input moves the input Bug,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Report a bug What is the current behavior Pressing tab inside of a text input physically moves the input on the page Demo bug What is the expected behavior It should either do nothing or switch inputs Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React version 16 OS Mac OSX Browser Chrome this does not happen on FireFox I did not know where to post this I can not figure out if its a React bug or something else My implementation is as simple as,,"M-ZubairAhmed,nhunzaker,nhunzaker",2017-12-04 22:39:41,2017-12-05 01:55:27
IS,Warn when component has PropTypes rather than propTypes,See issuecomment 343402728 Feels like an easy mistake to make and easy for us to detect,,"gaearon,M-ZubairAhmed,M-ZubairAhmed,gaearon,M-ZubairAhmed,gaearon",2017-11-10 08:08:22,2017-12-05 11:25:10
PR,Remove vars,Ref 11752 This is the first one Removes completely on react react reconciler react noop renderer react dom src shared react dom src server,,"raphamorim,gaearon",2017-12-04 20:09:47,2017-12-05 13:47:57
PR,Update eslintrc js,Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Run yarn test prod to test in the production environment It supports the same options as yarn test 6 Format your code with prettier yarn prettier 7 Make sure your code lints yarn lint Tip yarn linc to only check changed files 8 Run the Flow typechecks yarn flow 9 If you have not already complete the CLA Learn more about contributing,,,2017-12-03 13:20:05,2017-12-05 13:48:22
PR,Issue 11257 Updated Change build process to include npm pack and unpacking,Change build process to include npm pack and unpacking generated packages to corresponding build directories,,"yu-tian113,gaearon,gaearon,gaearon,yu-tian113,yu-tian113,yu-tian113,gaearon,gaearon,yu-tian113,gaearon,yu-tian113,yu-tian113,gaearon,yu-tian113",2017-12-02 12:51:15,2017-12-05 13:53:54
IS,Apply files npm whitelist at build time,We should make our build step apply the same logic as npm does with whitelisting files field This way issues like would get caught early,,"gaearon,gaearon,gaearon,yu-tian113,yu-tian113,gaearon",2017-10-17 18:53:02,2017-12-05 13:55:03
PR,Issue 11257 Apply files npm whitelist at build time,Compare files folders in package npm to files entries in package json only copy whitelisted files folders to build,,"yu-tian113,gaearon,gaearon,gaearon,gaearon,yu-tian113,yu-tian113,yu-tian113,yu-tian113,gaearon,gaearon,yu-tian113,gaearon,gaearon,yu-tian113,gaearon,yu-tian113,gaearon,yu-tian113,gaearon,yu-tian113,yu-tian113,gaearon,yu-tian113,gaearon,gaearon,yu-tian113,yu-tian113,gaearon,yu-tian113,gaearon,yu-tian113,gaearon,yu-tian113,gaearon,yu-tian113,gaearon",2017-10-31 06:37:03,2017-12-05 13:55:22
IS,Testing asynchronous setState of React,Hello I would read this article of Dave Ceddia Snapshot Testing React Components with Jest It is very useful but I have got a big doubt about how Jest works and I'm not the only one and I do not understand how Jest can manage the asynchronous process when setState is called For instance in the example of the article increment is a function that calls setState and increments its value Perfect But what about this test How can we assure that the expect will be called after the setState calls will be ended And what about the second call of increment I strongly believe that I have got a misconception about this process but I'm not the only one Any help will be very well received Thanks a lot in advance PS Redirected from,,"jquense,gaearon",2017-12-05 12:42:52,2017-12-05 14:01:08
PR,Changed the way we double invoke cWM lifecycle hook,Moved the double lifecycle check for cWM from ReactFiberClassComponent to ReactFiberBeginWork to more realistically simulate the interruption behavior of async which would never call cWM twice on the same instance I believe this is a safe move because the only effects constructClassInstance and mountClassInstance have are either on the instance one of which which will get thrown away or the WIP fiber which will be overridden the 2nd time,,"bvaughn,sophiebits,bvaughn,bvaughn,sophiebits,acdlite,bvaughn",2017-12-04 17:08:04,2017-12-05 16:24:46
PR,Add MathML tags to whitelist,Fixes unknown tag warnings for MathML tags which are only supported in Firefox but often used in other browsers through polyfill Only tags that are implemented after MDN are whitelisted,,"gaearon,gaearon",2017-11-27 15:03:49,2017-12-05 16:34:58
PR,react dom convert packages react dom src tests,Ref 11752 11766 2 3 Removes completely on react dom src tests,,"raphamorim,gaearon",2017-12-05 15:28:17,2017-12-05 18:29:23
PR,https fb me links,D6473468,,sophiebits,2017-12-05 18:34:12,2017-12-05 18:39:17
PR,ignore me test CI,just testing,,"gaearon,aweary",2017-12-05 18:26:56,2017-12-05 18:49:22
IS,Chrome Extensions that mutate the DOM NotFoundError,Do you want to request a feature or report a bug Bug but maybe this is a question What is the current behavior In chrome and I'm sure other browsers chrome extensions can mutate your DOM willy nilly In turn when React goes to update the node we get a critical error NotFoundError if you do not have an Error boundary in place your whole app blows up How to reproduce Here is a fiddle with a simple phone number with a counter it should work Install the Google Voice Chrome Extension Reload the fiddle once you enable the extension What is the expected behavior Not sure honestly It is annoying that the entire page crashes rather than maybe throwing a warning type error and skipping the corrupt node I'm afraid of the cascading effect this type of change might have Maybe React should not cater to this type of error in that case what can I do about it I have added error boundaries and they help to track these issues down but the amount of places I have to dangerouslySetInnerHTML is getting a bit absurd and it is making it tricky for new feature development At this rate I might as well just be setting any user input text as dangerouslySetInnerHTML but this does not seem like a good solution It is common enough that since I have added React 16 to my project I have fixed about 10 15 different instances and I find one or two each week right now They do seem to be slowing down though but I fear this will be an ongoing fight maintenance issue Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 0 Previous version of react also had similar issues but they did not seem to crash like react 16 does Thankfully react 16 does have error boundaries and is more predictable in how it handles Chrome latest,,"gaearon,gaearon,gaearon",2017-12-05 03:02:31,2017-12-05 19:02:53
PR,Remove vars,Ref 11766 11752 11776 3 3 Last one No more vars on packages source code octocat,,"raphamorim,gaearon,raphamorim,gaearon,gaearon",2017-12-05 19:53:40,2017-12-06 01:39:49
IS,Input attribute areadonly' triggers a warning which prevents the attr to be passed to component,I just came across a warning while attempting to pass the attribute readonly to an input which is rendered within a 3rd party component Warning Unknown DOM property readonly Did you mean readOnly readonly is a valid input attribute I'm not sure where this error is coming from but I'm assuming it is in React as the error seems pretty generic It would be nice to get past this error as my component wo not get the attribute I'm trying to pass to it,,gaearon,2017-12-06 11:47:24,2017-12-06 11:56:43
IS,Refactor packages shared ReactDOMFrameScheduling js,I found the code format is not good in packages shared ReactDOMFrameScheduling js and the js IDE is always give some warn as follows i think should refactor it image,,"gaearon,gaearon",2017-12-06 11:12:45,2017-12-06 12:33:45
IS,client server mismatch for text inside of an a button causes the the a button to focus on page load,Do you want to request a feature or report a bug bug What is the current behavior If there is a client server mismatch for text inside of an a or button element it causes it to be automatically focused on page load If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 if the focus is not on the window i e if a dom element is selected in the chrome inspector or react inspector widnow then it does not add the focus What is the expected behavior The expected behavior is that it would either show CLIENT TEXT or TEXT depending on how React16 resolves the diff but for it not to be automatically highlighted Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React16 macosx chrome ff safari,,"gaearon,aweary",2017-11-30 19:53:33,2017-12-06 15:23:37
PR,Fix autoFocus for hydration content when it is mismatched,This PR it to fix 11726 In no hydration case this validation is executed at here L628 But in hydration case the validation does not pass through So I have added the validation into before calling focus Is there any proper place to put the validation,,"koba04,gaearon,gaearon,gaearon,koba04,gaearon,gaearon,gaearon,koba04,gaearon,gaearon,koba04,koba04,gaearon,koba04,gaearon,koba04",2017-12-01 02:43:55,2017-12-06 15:23:37
IS,Access React Object from within page JS,I have a ReactVr object which I am rendering with the code below After React is initialised I am periodically receiving server updates which I want to pass into React as props how can I do this Can props in the React object be set from my normal JS,,gaearon,2017-12-05 15:53:07,2017-12-06 15:31:06
PR,Refactor the build scripts,This might be a bit hard to review since a few things moved around The code that produces the bundles is exactly the same just split into a few methods This mostly changes the code that copies folders and shims We no longer process exit all over the place and instead use the normal try catch flow We intentionally crash on uncaught Promise rejections The old code was convoluted because it tried to create an npm package folder lazily for every bundle The new code just creates them at the end so we do not need to check if one exists Another reason the old code was convoluted is due to all the checks if folders exist before creating them I just changed our asyncCopyTo function to do that automatically I'm no longer creating npm packages in a temp folder and instead I'm doing it in place This is easier to read and understand We are also now doing one pack unpack cycle per package instead of per bundle Note I mostly rewrote the folder moving file from scratch I found it easier than refactoring the old one,,"gaearon,trueadm,bvaughn,bvaughn,bvaughn,gaearon,gaearon,gaearon,bvaughn,bvaughn,gaearon",2017-12-06 19:38:30,2017-12-06 20:11:33
IS,Synthetic Event breaks in IE11,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Bug What is the current behavior SyntheticEvent js breaks in IE11 If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 Object assign is explicitly used to extend the prototype of SyntheticEvent L115 What is the expected behavior SyntheticEvent js should work Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Broken in React 16 IE11 It used to work in React 15 IE11 Is the recommended approach to use babel to polyfill Object assign If so I can open a new issue for,,jquense,2017-12-06 22:21:03,2017-12-06 22:33:01
PR,Add yarn debug test to debug tests in Chrome,Works just like yarn test and can also run with a watcher or for a particular file To debug open chrome select the target and then press Play img width 702 alt screen shot 2017 12 07 at 02 59 17 src You can set breakpoints too both in individual source files and in the test itself img width 681 alt screen shot 2017 12 07 at 02 56 43 src Pretty neat,,"gaearon,gaearon",2017-12-07 03:00:56,2017-12-07 11:05:40
IS,Further understanding reconciliation,One tutorial mentioned that here and says that when showWarning goes again from false to true react will check and say hey there was StatefulComponent before and now there is a Warning component so let is unmount that StatefulComponent This is same example as previous but here are no keys explicitly provided so based on what does react compare Warning and StatefulComponent based on their position in the tree and on the fact that they are both first childs of div I found this code L112 L176 and it seems react uses name property as a first instance to compare previous and next children but I fail to see what is name,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2017-12-07 08:31:18,2017-12-07 12:59:15
PR,ValidateDOMNesting tests 11299,I have 2 doubts in this 1 is an error other is a clarification Have marked them as TODO so that its easy to spot,,"anushreesubramani,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,anushreesubramani,gaearon,gaearon,anushreesubramani,anushreesubramani,anushreesubramani,gaearon,gaearon,anushreesubramani,gaearon,gaearon",2017-12-01 15:02:30,2017-12-07 18:45:43
PR,Add a test only transform to catch infinite loops,I took is code from and decided to try it out It is pretty neat This makes the tests throw when we are inside a loop that has more than M iterations s and ran for more than N milliseconds Currently both needs to happen although we can of course adjust the conditions s just guarding iterations should be enough for us It is only enabled for tests Failure looks like this img width 1088 alt screen shot 2017 12 07 at 02 41 10 src In the past Jest would just hang Open questions x Is this useful Do we want this at all Does showing the loop callsite help x We need to make sure this always fails the test even if the error ends up being caught x s If one test case fails with this we probably want to fail others immediately if they are also stuck in a loop Otherwise we have to wait for each individual one to fail even though they likely stress the same path On the other hand only the first one is the actual problem Need to think about how to present this Maybe two different messages Potential infinite loop vs The test failed because another test has a potential infinite loop Search for it in the output or something Or include the bad stack in all messages s Not really With our current iteration limits they fail pretty fast x How many iterations and or time are we okay with Determined this by running tests Set different limits for source files and test filess x License attribution I added to the authors at the top pretty sure he wo not mind it being MIT but I will make sure before merging Posting this for to play with since he is spent the most time with infinite loops and probably knows what is helpful and what is not,,"gaearon,amasad,gaearon,acdlite,gaearon,acdlite,amasad,clemmy,amasad,gaearon",2017-12-07 02:47:23,2017-12-07 20:53:13
PR,Revert Remove empty value for boolean attributes in SSR 11708,This reverts commit e0c31137434d7c7df2bc3475cb7682b1d7eecc8b See issuecomment 349953542,,aweary,2017-12-07 21:08:11,2017-12-07 22:06:20
PR,Remove an extra allocation for open source bundles,This is an alternative to that does not break our internal www override of EventListener The benefit is it gets rid of the remove function allocation in open source which we do not use but still routes React listeners through our www fork which is integrated with TimeSlice This uses the new forking mechanism,,gaearon,2017-12-07 21:06:55,2017-12-07 22:28:59
PR,Remove EventListener fbjs utility,EventListener normalizes event subscription for IE8 This is no longer necessary element addEventListener is sufficient Follow up from,,"nhunzaker,gaearon,gaearon,gaearon",2017-11-22 00:11:32,2017-12-07 22:29:09
PR,Remove IE8 specific focus polyfill,It looked like this We know it is definitely a node because we previously checked containsNode on document documentElement with it So this should always be safe to call now,,"gaearon,jquense,jquense",2017-12-07 22:32:42,2017-12-07 22:47:30
PR,Add yarn build pretty,This is handy for looking at generated production UMD bundles without mangling img width 460 alt screen shot 2017 12 07 at 22 45 31 src,,"gaearon,gaearon",2017-12-07 22:46:02,2017-12-07 22:47:57
PR,Move isAttributeNameSafe to DOMProperty,Deduping isAttributeNameSafe DOMProperty feels like the best place for isAttributeNameSafe since It already depends on the regexes it exports It contains other attribute logic like shouldSetAttribute,,"aweary,nhunzaker,gaearon,nhunzaker,gaearon,gaearon",2017-12-07 22:55:32,2017-12-08 01:23:03
IS,Sluggish scrolling when rendering table with large dataset in React,So I'm creating an application with real time streaming data in a table using react v16 1 1 The number of rows shown at a time can be rather large 400 rows and when those situations occur the scrolling behavior on browsers desktop mobile really takes a hit and staggers when attempting to browse the content Has anybody experienced this kind of scrolling behavior when rendering large data sets in a table I'm expecting React to be able to efficiently draw redraw these elements with ease but that does not appear to be the case I tried using JSFiddle to recreate the scenario but did not have much success,,"gaearon,gaearon,gaearon",2017-11-28 19:21:46,2017-12-08 10:52:29
IS,TypeError Attempted to assign to readonly property node store,Folks I have a the following fairly standard component I have a located a piece of code that appears to cause the issues but unclear why I use the Alert component in two places Firstly a component called GlobalError defined as below which appears based on some global state import React from areact' import connect from areact redux' import Alert from ' ui coreUIComponents' import type AlertType from ' misc types' const mapStateToProps state return message state alert message danger state alert danger createAgainButton state alert createAgainButton export default connect mapStateToProps props message string danger boolean createAgainButton Object window scrollTo 0 0 const type AlertType props danger Warning Message return props message div props createAgainButton Alert message props message type type createAgainButton props createAgainButton Alert message props message type type div div div I then I have this code snippet which seems to be the root of the issue this state uploadingAttachments Alert message t text uploading attachments type Spinner GlobalAlert If I take away the boolean logic here and display both Alert and GlobalAlert at the same time the problem goes away You can see at the bottom of that stack trace the setting of state uploadingAttachments I wonder if there is anything obvious I'm doing wrong Any ideas Phil,,"gaearon,aweary,gaearon,gaearon",2017-11-30 14:23:36,2017-12-08 10:57:17
IS,Virtual DOM replacement with template literals as in hyperHTML,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug feature What is the current behavior Usage of virtual DOM that prevents console errors and direct DOM manipulation meanwhile it is slower than suggested example api which makes it obsolete altogether and in real world terms too What is the expected behavior Ability to use libraries that expect to manipulate DOM as in styling frameworks as in hyperHTML which has the server side and also experimental native implementation,,"gaearon,gaearon,gaearon",2017-12-08 15:26:48,2017-12-08 15:47:10
PR,Adds warning for older unstable methods,I noticed some methods like unstable createPortal are scheduled for removal in React 17 and do not have warnings at the moment If this commit looks good and necessary I will add warnings to other methods too Hope this helps,,"prometheansacrifice,gaearon,prometheansacrifice,gaearon,prometheansacrifice,gaearon,prometheansacrifice,prometheansacrifice,gaearon,prometheansacrifice,gaearon,gaearon,prometheansacrifice,gaearon,prometheansacrifice,prometheansacrifice,gaearon,prometheansacrifice,gaearon",2017-12-01 20:57:03,2017-12-08 15:59:56
PR,Add more test coverage for custom elements,Nothing super important just noticed we do not cover some of the existing behavior which might be a bit odd but it existed since 16 0 So we should not break it refactoring that code,,"gaearon,gaearon",2017-12-08 17:09:54,2017-12-08 17:19:00
PR,Refactor DOM attribute code,The main goal here is to factor the DOM attribute code in the light of how it currently works instead of how it was conceived five years ago There are quite a few things in the current code that do not make sense anymore For example the property vs attribute distinction in method naming does not actually correspond to properties vs attributes Another example shouldSetAttribute does not actually determine whether to set an attribute These were all results of incremental changes where we tried to tweak the behavior with the least amount of code But they ended up making the overall flow confusing and adding a lot of special cases This is an attempt to simplify the code without changing what it does Individual commits tell how I arrived at that This mostly changes the logic around setting attributes properties and does not touch the other parts that are still structured the old way such as get Attribute Property pairs used for validating SSR I think we can get to those a bit later,,"gaearon,trueadm,trueadm,trueadm,trueadm,trueadm,gaearon,nhunzaker,nhunzaker,nhunzaker,gaearon,aweary,gaearon,aweary,aweary,aweary,gaearon,gaearon,gaearon,gaearon,aweary,gaearon,gaearon,gaearon",2017-12-08 00:19:32,2017-12-08 20:42:24
PR,Revert Refactor DOM attribute code,Reverts facebook react 11804 It turned out to fix a bug but introduced a few cases that do not work correctly Noticed after updating the attribute table oops Will resubmit,,gaearon,2017-12-08 21:05:30,2017-12-08 21:05:35
IS,Devan Criego,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug What is the current behavior If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React,,,2017-12-09 03:37:36,2017-12-09 03:42:46
IS,development env check is not friendly to other bundler tools except webpack,I do not like use Webpack lots of coders do not use Webpack in China We have a more ease to use tool called fis3 The problem is that fis parse the file dependencies by checking keywords like require require async But right now react added codes like these if wouldevelopment' 'production' module exports require 'node modules react dom cjs react dom production min' else module exports require 'node modules react dom cjs react dom development' Then fis will the get the result the current file rely on the production and development files But we only need one of the them So can u guys please make it a agnostic to the environment let the tools work on that,,"gaearon,gaearon,gaearon",2017-12-09 09:47:36,2017-12-09 09:54:02
PR,Remove unused wheel event detection in isEventSupported,Just noticed this working through 9333 We do not check for wheel support anymore so this code can be removed,,"nhunzaker,nhunzaker",2017-12-09 20:55:52,2017-12-09 23:28:27
IS,Select warning fires repeatedly,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Bug What is the current behavior See fiddle The warning related to the select fires repeatedly tells me it should dedupe and that this is a bug If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 See above What is the expected behavior See above Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React 16 2,,"gaearon,watadarkstar,gaearon,watadarkstar,gaearon,gaearon,watadarkstar,gaearon,watadarkstar",2017-12-07 16:52:54,2017-12-10 02:06:42
PR,Deduplication of warn when selected is set on option,Deduplication of warning when selected is set on option instead of select Closes 11795 Test check list x Ran yarn x Wrote a failing test x Fixed failing test x Passed all tests with yarn test yarn test prod x Ran yarn prettier x Ran yarn lint x Ran yarn flow x Completed CLA,,"watadarkstar,gaearon,gaearon,gaearon,watadarkstar,watadarkstar,gaearon,watadarkstar,gaearon,watadarkstar,gaearon,gaearon,watadarkstar,watadarkstar,watadarkstar,gaearon,watadarkstar",2017-12-09 19:33:46,2017-12-10 02:06:42
PR,Refactor DOM attribute code take two,Re submit of which I reverted s There is still a bug here shouldTreatAsNull is the wrong way to think about it because this causes booleans that default to true to become false whereas our intention is to ignore them for functions symbols s s I will need to look at this again and figure out how to fix this s Mostly this is a refactoring but it does fix some edge cases where SSR used to crash such as with Symbols but now warns consistently with the client,,"gaearon,gaearon,gaearon",2017-12-08 21:07:42,2017-12-10 16:58:38
IS,React createElement type is invalid warning in IE11 when using React Fragment,React shows warning in console if I use React Fragment,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2017-12-04 08:56:34,2017-12-11 03:25:29
PR,fix 11759 false positive warning in IE11 when using React Fragment,Fix 11759 Sorry I can not wait other contributor I need to support IE11 without false warnings in my project Can you release v16 2 1 after this fix,,"gaearon,gaearon,gaearon,gaearon,gaearon",2017-12-09 21:17:14,2017-12-11 03:25:29
IS,Anchor text content mismatch causes unwanted focus and page scroll,Do you want to request a feature or report a bug bug What is the current behavior When server side rendered text content of anchor does not match the anchor is focused causing page to scroll in all browsers If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Issue isolated here ssr necessary What is the expected behavior Button should not be focused Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 15 ok React 16 broken Reproducible in latest Safari Chrome or Firefox and probably others,,koba04,2017-12-10 22:16:13,2017-12-11 07:15:25
PR,use different eslint config for es6 and es5,This pr uses different eslint config to solve issues The following is the updated part share es path I move the es path pattern to a shared file scripts shared esPath js so that prettier and eslint can use same es path pattern separate lint call L13 L14 judge es version For lint changed because we need to define which changed files are es5 and others are es6 I create a file scripts shared judgeJSFilesVersion js to get this info So now when we run yarn lint or yarn linc it will lint es5 and es6 separately,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,jquense,gaearon,gaearon",2017-12-07 13:18:25,2017-12-11 15:52:46
IS,RFC Remove vars follow up,Most of the var has been removed after the PR 11780 thanks again merged so we could lint against developers use var again but this is a bit tricky because some files have to use var we should have a way to override lint configuration for a subset of the files so we should discuss the solutions here,,"gaearon,gaearon,gaearon,gaearon,gaearon",2017-12-06 09:43:42,2017-12-11 15:59:59
PR,Update Rollup deps,No significant changes except an option rename The build output seems the same the minor change in DEV size is from a previously merged PR,,gaearon,2017-12-11 16:44:07,2017-12-11 16:54:13
PR,Make warning about state assignment better in ReactFiberClassComponent,Hi I have extracted some common code about warning in ReactFiberClassComponent It seems the warning about state assignment in componentWillMount and componentWillReceiveProps can use a same function which avoid hard coding the warning log twice,,"yenshih,gaearon",2017-12-11 17:33:05,2017-12-11 17:35:29
PR,Discussion Added legacy Component legacy PureComponent,Proof of concept to more incrementally introduce the debugRenderPhaseSideEffects GK The idea behind this PR is to first code mod a codebase to extend legacy components and then gradually migrate them back to Component once they had been deemed side effect free I'm not thrilled about this approach This would cause a small regression in bundle size screen shot 2017 12 07 at 7 12 12 am,,"bvaughn,bvaughn",2017-12-07 19:20:29,2017-12-11 17:51:17
PR,Deduplicate warning on invalid callback in ReactFiberClassComponent,Not sure if we should rename didWarnOnInvalidCallback to didWarnOnInvalidCallbackOf or other names Unfortunately my Mac is going to out of battery Could not reply in time so sry for that,,"yenshih,watadarkstar",2017-12-11 17:48:25,2017-12-11 18:01:28
IS,SVG image onLoad event not getting dispatched on IE11,SVG image element is not getting onLoad event dispatched on IE11 Example Tested with React 15 1 and 16 0,,"jquense,nhunzaker,jquense,nhunzaker",2017-10-03 00:28:54,2017-12-12 01:11:54
PR,Simplify SyntheticEvent declarations,This does not do much in terms of bundle size but makes the code clearer IMO These constructors always have the same arguments so we just generate them now,,gaearon,2017-12-12 16:04:20,2017-12-12 16:45:41
PR,Call and Return components should use ReactElement,ReactChildFiber contains lots of branches that do the same thing for different child types We can unify them by having more child types be ReactElements This requires that the type and key fields are sufficient to determine the identity of the child The main benefit is decreased file size especially as we add more component types like context providers and consumers This updates Call and Return components to use ReactElement Portals are left alone for now because their identity includes the host instance,,"acdlite,gaearon,gaearon,gaearon,sebmarkbage,acdlite,gaearon,acdlite,acdlite,gaearon",2017-12-12 04:05:58,2017-12-12 23:04:41
IS,Map is not defined,when i use reactv16 2 in my project on some mobile it error Map is not defined,,,2017-12-13 06:48:36,2017-12-13 07:29:02
PR,Rudimentary tests for not covered entry points,Add tests for ReactART Circle Rectangle Wedge components,,"yu-tian113,gaearon,yu-tian113,yu-tian113,gaearon",2017-12-12 05:46:14,2017-12-13 12:45:30
IS,Incorrect error for wbr tag,Do you want to request a feature or report a bug bug What is the current behavior It currently gives out Expected corresponding JSX closing tag for wbr error for this tag If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior wbr tag has no end tag as per the spec the wbr element React should not report errors for this Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 as of this writing Not sure about previous version Not dependent on any browser version,,aweary,2017-12-13 17:05:07,2017-12-13 18:01:53
IS,Which is better to use three definitions of variables in React ES6 Why,which is the best way to use the three defined methods The arr does not need to be rendered just make a temporary cache comparison new data use Thanks,,clemmy,2017-12-13 02:00:40,2017-12-14 00:35:41
PR,Prevent BeforeInputPlugin from returning null null,BeforeInputEventPlugin dispatches null elements in an array if composition or beforeInput events are not extracted This causes an extra array allocation but more importantly creates null states in later event dispatch methods that are annoying to account for in some event system work I'm doing TLDR This commit makes it so that BeforeInputPlugin never returns a null element inside an array,,"nhunzaker,nhunzaker,nhunzaker",2017-12-14 01:13:55,2017-12-14 01:39:11
IS,redirect to home after login react redux,I'm new working with react v4 and I try to redirect to another page something like a home page after the user authenticate in but I'm getting problems with nested routes I have tried this solution and this other one in documentation but does not work the way that I need I have a basic code for the login in this github repository Thanks in advance for your help,,,2017-12-13 15:34:26,2017-12-14 04:50:04
IS,React form with constraints Unable to find node on an unmounted component,I'm using react form with constraints for my form validation version 0 2 3 and my createCompany file extends this On form submit click i'm calling super handleSubmit for validation but it throws below error Uncaught Error Unable to find node on an unmounted component at invariant commons chunk js f2d6763b js 214 at Object findDOMNode bundle f2d6763b js 96653 at CreateCompanyForm FormWithConstraints showFormErrors The package is built in FormWithConstaints file looks like handleSubmit e React FormEvent HTMLFormElement this showFormErrors private showFormErrors const form ReactDOM findDOMNode this const inputs form querySelectorAll ' name ' inputs forEach input any this showFieldError input I can not switch to higher version as the higher version breaks most of my code Could someone help me My package json looks like react 15 6 1 react dom 15 6 1 react form with constraints 0 2 2 My CompanyForm file looks like import React from areact' import TextInput from ' components common input TextInput' import Button from ' components common button PrimaryButton' import FormWithConstraints from areact form with constraints' import PropTypes from 'prop types' class CreateCompanyForm extends FormWithConstraints constructor props super props this handleChange this handleChange bind this this handleSubmit this handleSubmit bind this this getInitialState this getInitialState bind this this state this getInitialState getInitialState return name '' address '' handleChange event console log handle change const target event currentTarget this setState target name target value super handleChange event handleSubmit event event preventDefault super handleSubmit event if this isValid dont proceed else this props onSubmit render return div form onSubmit this handleSubmit div Create New Company div div style marginTop 10 className row div className col md 6 TextInput readOnly false required true label Name of Company value this state name onChange this handleChange name name div div className col md 6 TextInput readOnly false required true label Registered Address value this state address onChange this handleChange name address div div div Button label Create Company onClick this handleSubmit div form div CreateCompanyForm propTypes onSubmit PropTypes func isRequired export default CreateCompanyForm The parent component looks like class CreateCompanyHome extends React Component constructor props super props this state reload true loading false error success isSuperUser false this onSubmit this onSubmit bind this componentDidMount this setState isSuperUser Auth isSuperUser check if the user is SU onSubmit createCompanyParams call api render return div this state loading Loader null this state reload CreateCompanyForm opacity this state loading onSubmit this onSubmit null div function mapStateToProps state return userRoleSetMap state authentication userRoleSet cwEntityMap state authentication cwEntityMap export default connect mapStateToProps CreateCompanyHome,,gaearon,2017-12-14 05:52:39,2017-12-14 10:30:19
IS,autofocus attr not included in button element when rendered,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug bug What is the current behavior autoFocus prop on button component is not rendered to the DOM According to MDN autofocus is a valid attr for the button element If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior autofocus attr should be rendered to DOM when provided as a prop to button component Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 2 in Chrome,,"gaearon,gaearon,gaearon,gaearon",2017-12-14 06:46:46,2017-12-14 10:32:39
IS,Listeners leak and increasing nodes after unmountComponentAtNode,Do you want to request a feature or report a bug Possible bug What is the current behavior When I render a very simple React app using my graph should be flat Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React I'm using latest create react app react 16 2 0,,"gaearon,gaearon",2017-12-14 09:24:12,2017-12-14 10:47:11
IS,Not able to build a basic file,Hi All The error I get is Invariant Violation Element type is invalid expected a string for built in components but got object You likely forgot to export your component from the file it is defined in The error is located at in RCTView at View js 112 in View at AppContainer js 102 in RCTView at View js 112 in View at AppContainer js 122 in AppContainer at renderApplication js 34 My App js is like this Not sure what I am doing wrong here Would be grateful for any pointers Thank you,,"gaearon,gaearon",2017-12-14 16:28:15,2017-12-14 17:46:27
PR,Use declare module exports syntax for flow libdefs,We added this to Flow in v0 25 about 2 years ago but never actually deprecated the legacy declare var exports syntax Hoping to do that soon so clearing up uses that I can find Test Plan flow Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Run yarn test prod to test in the production environment It supports the same options as yarn test 6 If you need a debugger run yarn debug test watch TestName open chrome and press Inspect 7 Format your code with prettier yarn prettier 8 Make sure your code lints yarn lint Tip yarn linc to only check changed files 9 Run the Flow typechecks yarn flow 10 If you have not already complete the CLA Learn more about contributing,,,2017-12-15 06:22:41,2017-12-15 12:17:47
IS,React does not re render DOM after manual DOM tree and key prop changes,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug A bug What is the current behavior In the real world I used to sort array items When I d'n would an item I send a new sorting state to a server It is OK when the server responds with the same data I have sent but if the server rejects sorting and sends me the data I had in the beginning array items do not sort back If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 I have simulated d'n would sorting programmatically by flipping DOM nodes via DOM interface DOM is rendered using given state A B I flip DOM nodes in 2 seconds B A And set a new state which is the same as it was on the first step B A key id or key id index do not help there What is the expected behavior It should sort nodes back A B Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 The issue also appears in React 15,,gaearon,2017-12-15 13:15:38,2017-12-15 23:26:53
PR,Add test fixture for initial input validation bug in Firefox,Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Run yarn test prod to test in the production environment It supports the same options as yarn test 6 If you need a debugger run yarn debug test watch TestName open chrome and press Inspect 7 Format your code with prettier yarn prettier 8 Make sure your code lints yarn lint Tip yarn linc to only check changed files 9 Run the Flow typechecks yarn flow 10 If you have not already complete the CLA Learn more about contributing,,,2017-12-17 03:07:02,2017-12-17 03:08:54
IS,React preserves duplicates of DOM node on re render,Hi guys I'm getting really weird behavior in my latest project I assume it is a bug in React I want to override default browser context menu I subscribed for contextmenu and click events in componentDidMount On right click context menu I want to show my custom div On left click this div should hide In event listeners I do I assume everybody can imagine expected behavior But real behavior is right click context menu shows up left click context menu is still there right click another context menu shows up and so on You can literally see DOM nodes being duplicated in Elements tab in DevTools You can try it here The code is in src app controller NotesBoard tsx file Try npm install npm start then right left click somewhere on blue area Environment MS Windows 8 1 x64 Chrome 63 0 3239 84 React 16 2 0,,"gaearon,gaearon",2017-12-12 14:06:37,2017-12-17 07:08:33
PR,Use binary numbers representation directly,Based on the discussion here cc,,"alexeyraspopov,sophiebits",2017-12-18 01:51:18,2017-12-18 01:56:17
IS,Checkbox not updating,In below example after three seconds the check box is not being un checked Why,,,2017-12-18 10:32:27,2017-12-18 11:10:22
PR,Fix flow windows,Ref 11703 update flow to 0 61 0 getChildHostContext does not expect NoContextT refactoring to accept both ReactFiberHostContext js For some reason in Windows scenario it returns NoContextT as Value some thoughts flow working,,"raphamorim,gaearon",2017-12-13 04:11:01,2017-12-18 12:04:17
IS,Move to js org,Maybe move docs to,,gaearon,2017-12-18 09:53:39,2017-12-18 12:10:02
IS,Investigate why Flow fails on Windows,I could not enable it on Windows CI I also remember seeing this locally on a Windows machine Need to investigate why yarn flow fails on Windows but works on macOS,,"gaearon,raphamorim,raphamorim",2017-11-29 14:40:08,2017-12-18 12:26:45
IS,Problem with window matchMedia API and window print,I encountered a problem when I try to conditionally render content for screen and print media types using matchMedia API In the latest Google Chrome for Windows 10 the content intended for print media type is displayed incorrectly in printout preview I created a minimal demo that shows the issue In the first case please open the page and press Ctrl P keys to open printout preview In the console you can see that updateComponent function is called two times one for printout preview and the second for the main page that overlapped by the printout preview I guess In this case everything is working correctly in the printout we can see Print word and on the main screen Screen word is displayed even after closing the preview In the second case please try to open printout preview by clicking the Screen label You can see that print and updateComponetn functions are called but they do not force component rerendering as they should Hence we see Screen on the printout preview but the Print label should be displayed Please take a look when you have time,,"gaearon,gaearon,gaearon",2017-12-18 11:22:58,2017-12-18 13:10:19
IS,onClick does not fire on components that change position,Do you want to request a feature or report a bug Bug What is the current behavior I have a list of components that change their height based on their internal state open close and close after the user clicks outside that component so only one is open at a time It is possible to toggle other component is onClicks that are above the currently open component but not the ones below it It seems that onClick does not fire on the components that are in different position than initially rendered If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior That both components above and below the component open when clicked Expected behavior can be achieved by using addEventListener Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 tested on Firefox Chrome Safari,,jquense,2017-12-18 14:54:54,2017-12-18 15:59:13
PR,Nh scroll fix,Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Run yarn test prod to test in the production environment It supports the same options as yarn test 6 If you need a debugger run yarn debug test watch TestName open chrome and press Inspect 7 Format your code with prettier yarn prettier 8 Make sure your code lints yarn lint Tip yarn linc to only check changed files 9 Run the Flow typechecks yarn flow 10 If you have not already complete the CLA Learn more about contributing,,nhunzaker,2017-12-18 17:42:07,2017-12-18 17:44:26
PR,Upload build stats to the server,Let is see if this works The goal is to upload build stats from master to is server We already upload the builds anyway If this works then we can change to always compare the build size against master by reading it from is server instead of against the last recorded size Recording them is currently not enforced so they get out of date But if this approach works then we can delete the sizes from the repository altogether and solve the other problem of merge conflicts,,gaearon,2017-12-18 18:08:29,2017-12-18 18:17:28
PR,Update results json from master before the build,This should ensure that CI always displays correct build file difference A prerequisite for We might actually want to delete that file from the repo and always download it during the local build Then we can delete it from the repo always have accurate stats on local builds and solve merge conflicts But then we need to make sure we bail out gracefully if network fails,,"gaearon,nhunzaker,gaearon,nhunzaker,gaearon,sophiebits,gaearon,sophiebits,gaearon,sophiebits,zpao,gaearon",2017-12-18 18:48:20,2017-12-18 18:56:39
PR,Only set defaultValue when value has changed for email inputs,Resolves 11881 Only update defaultValue for email inputs when node value is also out of sync This way we only update defaultValue when the value differs in more than just leading trailing whitespace,,"aweary,gaearon,gaearon,aweary",2017-12-18 21:57:05,2017-12-18 22:13:14
IS,Unexpected token 'function' in jest test if my component has async function expressions,BUG What is the current behavior If my React component has async function calls like var getParameter async function getParameter I receive an error SyntaxError Unexpected token function at ScriptTransformer transformAndBuildScript node modules jest runtime build script transformer js 305 17 And the error resolves only if i remove async my babelrc file looks like this presets es2015 react Please advise,,nhunzaker,2017-12-16 18:28:20,2017-12-19 02:13:35
PR,Fixed an issue 11853 window opera null problem,Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Run yarn test prod to test in the production environment It supports the same options as yarn test 6 If you need a debugger run yarn debug test watch TestName open chrome and press Inspect 7 Format your code with prettier yarn prettier 8 Make sure your code lints yarn lint Tip yarn linc to only check changed files 9 Run the Flow typechecks yarn flow 10 If you have not already complete the CLA Learn more about contributing,,"jquense,nhunzaker",2017-12-14 15:26:26,2017-12-19 03:18:31
IS,window opera null problem,I want to report a bug When there is a var named opera with value null in window before loading react then react app crashes Steps to reproduce 1 Create a new app using create react app my app 2 cd my app yarn start 3 Add one line script window opera null script just before closing body tag into file public index html 4 The app crashes here Could not reproduce on jsfiddle net I think because problem appears if we execute window opera null BEFORE loading react Expected behavior is to not crash React v16 2 0 and Google Chrome Version 63 0 3239 84 Official Build 64 bit Have no info about problematic behavior with previous versions of React,,aweary,2017-12-14 15:12:46,2017-12-19 04:48:29
IS,Uncaught TypeError Super expression must either be null or a function not undefined,Hi I am getting this error in the browser I believe it is not because of Relay but react js Getting the same error even if I install the beta version from alpha And I tried commenting Relay code also Any idea what is wrong,,jquense,2017-12-19 14:58:01,2017-12-19 15:28:03
IS,fb me CDN links redirecting to Facebook is home page,It seems the fb me CDN links have been changed The links on this page installation such as seem to simply redirect to facebook com Previously these were loading the react library Noticed this because our app suddenly started giving us this error,,"gaearon,sophiebits",2017-12-19 19:11:10,2017-12-19 19:56:26
IS,Cannot render Quora embedded links in React,The site Quora offers an easy way to embed links For instance it offers a quick code snippet which works on a normal HTML page span class 'quora content embed' data name 'What s the most morally disgusting thing you ve ever seen someone do answer Haily Cramer' Read a class 'quora content link' data width '559' data height '250' href ' s the most morally disgusting thing you ve ever seen someone do answer Haily Cramer' data type 'answer' data id '66746225' data key '9f6fd6718e65d80bd24be9822bc1546c' load full answer 'False' data embed 'oigvzao' a href '' Haily Cramer a 039 s a href ' What s the most morally disgusting thing you ve ever seen someone do ans66746225' answer a to a href ' What s the most morally disgusting thing you ve ever seen someone do' ref 'canonical' span class rendered qtext What s the most morally disgusting thing you ve ever seen someone do span a a on a href '' Quora a script type text javascript src script span Which normally renders like this image However if you place the same code in a render function like so class BlogPanel extends Component render return span class 'quora content embed' data name 'What s the most morally disgusting thing you ve ever seen someone do answer Haily Cramer' Read a class 'quora content link' data width '559' data height '250' href ' s the most morally disgusting thing you ve ever seen someone do answer Haily Cramer' data type 'answer' data id '66746225' data key '9f6fd6718e65d80bd24be9822bc1546c' load full answer 'False' data embed 'oigvzao' a href '' Haily Cramer a 039 s a href ' What s the most morally disgusting thing you ve ever seen someone do ans66746225' answer a to a href ' What s the most morally disgusting thing you ve ever seen someone do' ref 'canonical' span class rendered qtext What s the most morally disgusting thing you ve ever seen someone do span a a on a href '' Quora a script type text javascript src script span It looks like this image Is there a general way to fix this I'm seeing this problem with practically every embedded functionality I have ever used from Google Maps to social media I had to install a special library to handle Google Maps but this is happening to every single embed functionality out there,,"gaearon,gaearon,gaearon",2017-12-20 00:21:12,2017-12-20 00:26:23
IS,Why do you write this,react packages react src ReactCurrentOwner js 23 current null null Fiber react packages react src ReactDebugCurrentFrame js 14 ReactDebugCurrentFrame getCurrentStack null null string null use flow null,,"jquense,jquense,gaearon,jquense",2017-12-20 02:52:15,2017-12-20 03:08:48
IS,textarea onFocus stopPropagation incorrect cursor rendering on Firefox,What is the current behavior Using stopPropagation in an onFocus event on a textarea or its parent causes the cursor to disappear or render at an incorrect location in Firefox You can see the vanishing cursor at this fiddle There are no issues on Chrome and Edge but FireFox 50 1 0 has this problem In my full app the cursor does not vanish but rather moves elsewhere italics are placeholder text img width 118 alt 2016 12 25 src img width 88 alt 2016 12 25 1 src img width 66 alt 2016 12 25 2 src I have not reproduced this behavior in the fiddle What is the expected behavior It is hard to say what the expected behavior is since the real focus event does not bubble Here is a fiddle to show that the cursor position is not affected when the event is stopped in a vanilla JS environment Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React The fiddle shows the issue with 15 4 1 on FF on Windows 10 I saw the same issue on 15 3 Why stopPropagation Before I get eaten alive for using this I will just say that having a non bubbling focus event simplifies one of the interactions I'm setting up Specifically my app has a bunch of widgets that can be marked active When a user clicks into a field in the widget that widget should be marked active However widgets can be nested in other widgets in which only the inner most widget should be marked active,,aweary,2016-12-25 22:25:11,2017-12-21 05:15:54
IS,Feature Append component,Is there a way of appending components like we append nodes I know that it can be easily handled by state,,,2017-12-21 18:28:20,2017-12-21 23:08:52
IS,Lol,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug What is the current behavior If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React,,,2017-12-21 22:56:41,2017-12-22 00:23:19
IS,renderToStaticMarkup escapes ' ' to ' amp ',Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Bug What is the current behavior Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 2 0,,syranide,2017-12-22 05:16:42,2017-12-22 13:03:50
IS,QQ Browers is not show,I have a webapp with creat react app it not work on QQ Browers but it is ok in other browers react 16 2 0 react dom 16 2 0 who can help me please,,gaearon,2017-12-22 09:46:28,2017-12-22 13:07:34
IS,html tag a property download can not work on firefox,here is my jsfiddle OS windows 7 browser Firefox Quantum 57 0 i want to use property download to download image but this can not work but it can work on chrome,,,2017-12-22 06:05:55,2017-12-22 13:07:47
IS,Accessing TestInstance state for react test renderer package,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Feature What is the current behavior The behavior that is listed in the docs If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior Change the state of your test object as such shown below Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React It would affect all browsers,,gaearon,2017-12-22 07:58:56,2017-12-22 13:12:28
IS,TypeError CSS2Properties doesn t have an indexed property setter for 0 Firefox Quantum,React v16 2 0 ReactDom V 16 2 0 Report a bug Any component that uses inline styles fails in Firefox Quantum 57 0 1 64 Bit I would expect the function to work o Quantum as it does on Chrome Safari Edge It looks like a Quantum issue in some why but can the function be coded so check in some way or look for CSS2Property or whatever it needs to write a style like width directly,,"aweary,aweary",2017-12-20 16:19:41,2017-12-22 13:17:53
IS,Proposal to destructure prop types on import statement as a standard,I would like to propose the following when importing prop types to components Instead of doing i e Small improvement that makes it easier to see the type of each prop on a component at a glance Is there any reason this has not been chosen as the standard Please give your opinion and reasoning on this,,gaearon,2017-12-22 00:51:10,2017-12-22 13:25:55
IS,add support for nomodule attribute on the script tag,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug feature add support for the nomodule attribute to the script tag What is the current behavior with script nomodule src foo js i get and the attribute is removed If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior the nomodule attribute should be respected Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React react 16 2 0 chrome osx not a regression i do not think it is ever worked before if this is not an intentional oversight i will open a pr to add it seems like it is just a change to,,,2017-12-14 19:52:27,2017-12-22 18:18:52
PR,Add noModule boolean attribute,Resolves nomodule is now officially in the HTML specification attr script nomodule so we should support it,,aweary,2017-12-21 05:01:27,2017-12-22 18:18:52
IS,props read only,React docs say props are read only but how come mobx directly modifies them e g as in,,gaearon,2017-12-22 20:37:30,2017-12-22 20:42:07
PR,Adds module and bundle type metadata to the rollup results json,For 11865 and I discussed the idea of having smaller tables which were grouped by the module name I had a think about how to do this with the current JSON but it currently looks like this I could grab the environment out of the name but it would be brittle I could grab the module name from the string also with some real funky string normalization but that would be even more brittle So instead I updated the results generator to include the actual package name and the environment it was built in Making it more future proofed Made as a separate PR so that the PR 11865 can reference this in master,,"orta,gaearon,orta,orta,gaearon,orta,gaearon,gaearon,orta,gaearon",2017-12-22 21:15:46,2017-12-23 19:22:59
PR,Fix typos,PR created using,,"tbroadley,gaearon,tbroadley",2017-12-16 16:33:42,2017-12-23 20:32:34
IS,wed ug projektu,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug What is the current behavior If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React,,,2017-12-24 05:57:34,2017-12-24 06:23:10
IS,redacted,redacted,,,2017-12-24 22:15:59,2017-12-24 22:16:28
IS,How to enable fiber in stable version,I searched a lot but can not find any messages to enable this feature in stable version,,"aweary,aweary",2017-12-27 10:22:15,2017-12-27 19:56:05
IS,How to auto refresh in another taps in react js,I'm open the login page in two tabs in the same browser the login click after another tab also refresh or reload How to do that in react js Does anyone help this,,aweary,2017-12-27 09:49:19,2017-12-27 19:59:04
IS,FeatReq render method could receive currentState and currentProps as arguments,Do you want to request a feature or report a bug Feature What is the current behavior The render method does not receive currentState and currentProps What is the expected behavior The render method when called would receive currentState and currentProps as arguments For instance This could allow destructure the arguments to get only the needed properties for example Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 2 It does not work in any React version,,"koba04,aweary",2017-12-27 00:38:46,2017-12-28 02:11:49
IS,Default value for an select element,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Bug What is the current behavior JSFiddle When reset button is clicked input value is test select value is Grapefruit What is the expected behavior When reset button is clicked input value is test select value is Lime,,,2017-12-29 11:25:28,2017-12-29 11:50:51
IS,r,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug What is the current behavior If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React,,nhunzaker,2017-12-29 15:11:40,2017-12-29 16:12:17
IS,issue with create react app,os windows 8 64 bit C Users Bharat Moger react node v v8 9 3 C Users Bharat Moger react npm v 5 6 0 C Users Bharat Moger react create react app version 1 4 3 issue with create react app my app C Users Bharat Moger react create react app my apps Creating a new React app in C Users Bharat Moger react my apps Installing packages This might take a couple of minutes Installing react react dom and react scripts npm ERR Unexpected end of JSON input while parsing near ' lugin flowtype dist' npm ERR A complete log of this run can be found in npm ERR C Users Bharat Moger AppData Roaming npm cache logs 2017 12 30T08 14 40 408Z debug log Aborting installation npm install save save exact loglevel error react react dom react scripts has failed Deleting generated file package json Deleting my apps from C Users Bharat Moger react Done issue with create react app my app same issue with this command on npm 5 2 0 C Users Bharat Moger react npx create react app my app1 Error EPERM operation not permitted mkdir 'C Users Bharat' TypeError Cannot read property 'get' of undefined at errorHandler C Program Files nodejs node modules npm lib utils error handler js 205 18 at C Program Files nodejs node modules npm bin npm cli js 83 20 at cb C Program Files nodejs node modules npm lib npm js 214 22 at C Program Files nodejs node modules npm lib npm js 252 24 at C Program Files nodejs node modules npm lib config core js 81 7 at Array forEach anonymous at C Program Files nodejs node modules npm lib config core js 80 13 at f C Program Files nodejs node modules npm node modules once once js 25 25 at afterExtras C Program Files nodejs node modules npm lib config core js 178 20 at C Program Files nodejs node modules npm node modules mkdirp index js 47 53 C Program Files nodejs node modules npm lib utils error handler js 205 if npm config get 'json' TypeError Cannot read property 'get' of undefined at process errorHandler C Program Files nodejs node modules npm lib utils error handler js 205 18 at emitOne events js 116 13 at process emit events js 211 7 at process fatalException bootstrap node js 374 26 Install for prefix latest failed with code 7 C Users Bharat Moger AppData Roaming npm node modules create react app index js Creating a new React app in C Users Bharat Moger react my app1 Installing packages This might take a couple of minutes Installing react react dom and react scripts npm ERR Unexpected end of JSON input while parsing near ' lugin flowtype dist' npm ERR A complete log of this run can be found in npm ERR C Users Bharat Moger AppData Roaming npm cache logs 2017 12 30T08 16 05 475Z debug log Aborting installation npm install save save exact loglevel error react react dom react scripts has failed Deleting generated file package json Deleting my app1 from C Users Bharat Moger react Done unsolved,,,2017-12-30 08:31:04,2017-12-30 13:07:34
IS,React does not call onBlur callback,See title thank u,,,2017-12-30 14:22:27,2017-12-30 14:22:46
IS,Why Marko js is faster than React Can React become as fast as Marko js,Resources Marko vs React An In depth Look isomorphic ui benchmarks,,"gaearon,gaearon",2017-12-29 23:51:11,2017-12-30 16:52:58
IS,Namespace constants being inlined in production build,I was poking through the UMD react dom production min js build and noticed that the namespaces exported from DOMNamespaces are being inlined as string literals First Example file react dom min js L1779 L1794 Second Example file react dom min js L1872 L1873 This is not great since they are sort of long strings I'm not sure if its a bug or expected behavior for some component of the build system but I thought I would report it in case something can be configured,,"aweary,gaearon,aweary,gaearon",2017-12-25 06:50:56,2017-12-30 16:59:18
PR,Keep quoting consistent in README,Use double quotes in the README example Double quotes seem to be most common so I went with those Couple meta questions with this being my first PR 1 Do we care about consistent use of quotes in the codebase 2 Should I have created an issue for this first It was a tiny bit of work so I did not,,gaearon,2017-12-31 13:54:31,2017-12-31 14:45:42
IS,fiber triangle fixture is not working,I cannot see any difference between async on off I am using Chrome v63 on MacBook Pro,,gaearon,2017-12-31 09:55:23,2017-12-31 15:35:23
PR,Make React lightweight,Before 2017 end I want to turbocharge a project and boost it ahead off its competition Next year I would consider to fully rewrite it in rust wasm to be even more performant But for now it seems pretty gud You can try the js version for now,,,2017-12-31 16:39:21,2017-12-31 17:09:01
IS,love React,Thank you,,aweary,2017-12-31 22:20:12,2017-12-31 22:20:57
IS,Curly braces are pointless and ugly,Do you want to request a feature or report a bug Feature What is the current behavior Curly braces are required to delimit Javascript expressions in JSX attributes MyComponent foo bar 1 2 3 What is the desired behavior All Javascript expressions can be expressed without the need for MyComponent foo bar 1 2 3 baz quirk life 42 pi 3 1415 sum x y fancy Hello name onClick this andThat In short requiring around all of these is unnecessary although the last one is a bit ugly with the thing,,gaearon,2018-01-02 03:07:38,2018-01-02 10:51:52
IS,Facebook Engineers Thank You For 2017,To all the Facebook Engineers working on open source Like last year issue 198212596 we at Reactiflux just wanted to take a moment to thank you for all your hard work in 2017 It s been another big year After much anticipation React 16 was released in September React Native has moved from v0 41 to v0 51 fixing countless bugs and adding new features Jest has over 20 releases this year Yarn 1 0 and Relay Modern were released new engineers have joined hey and some have moved on we ll miss you and that is just a tiny snapshot of 2017 Talking with some of you I know that the dealing with the licensing issues this year was incredibly difficult and frustrating yet you all handled the situation in such a mature and humble manner all while continuing to iterate and innovate Thank you We are so happy that you can continue focusing on the work at hand especially now that this chapter is finally closed Guillermo Rauch recently tweeted As 2017 wraps up I believe more than ever that React is such a good idea that we will spend the rest of the decade continuing to explore its implications and applications We echo this sentiment and as 2017 wraps up we also believe more than ever that you all embody the spirit of open source with such humility servant leadership and true focus on community driven progress that it continues to astound us We thank you that these qualities are at the heart of our community We thank you for all the time you have taken to join AMA s and answer our questions on Twitter For all the time you have taken to respond to issues and merge PR s Thank you for going above and beyond again this year as always We d like to invite the React community to reply to this thread with your own thank you comments to the team at Facebook Let s show them how grateful we are Feel free to include experiences with the team or just how the React ecosystem has helped you as a developer Sincerely On behalf of the Reactiflux community,,"aweary,nhunzaker,Daniel15,gaearon,monkindey,M-ZubairAhmed,prometheansacrifice,gzhappysky,gaearon,gaearon,watadarkstar",2017-12-31 22:06:22,2018-01-02 13:05:16
IS,react native custom tabs not return response,I have created button to open CustonTabs to use external url into React native app external url have some forms that are submitted and return array as a response into another page i e success page I want to get response from success page into app and CustomTabs would be close automatically code for custom tab,,gaearon,2018-01-02 12:03:56,2018-01-02 13:06:24
IS,Include licensing header into react js,Currently react js distribution has a licensing header Unfortunately it is removed by webpack and uglifyjs Could you please add at the file headers so that minifiers will keep them in optimized versions so that license compliance can be achieved in an automated manner,,"gaearon,aweary,trueadm,gaearon",2016-06-18 16:59:08,2018-01-02 13:10:45
IS,Add React Children find,I think a React Children find method would be really useful in situations where you need to iterate over your children and find just one that satisfies a particular condition I'm running into this situation more and more often in my React code A few examples In React Router the Switch component iterates over its children L38 L49 to figure out which Route matches the URL In a Select component we use in our training workshops L24 L37 we need to iterate over the Option s to figure out which label we should show in the select box I wonder if there would be any interest from others in seeing something like this,,"sebmarkbage,sebmarkbage,syranide,gaearon",2017-06-01 21:35:31,2018-01-02 13:13:56
IS,Include flow type definitions,As per comments from in the following issue the flow built in react type definitions are lagging behind and the recommendation is that the definitions be included and maintained in the react repo itself The flow maintainers are doing an excellent job of implementing new JS syntax features It would be great if they did not also need to maintain this file One could of course also relegate this definition to yet another repo,,"jimfb,zpao,sebmarkbage,iamdustan,gaearon",2015-11-15 16:18:03,2018-01-02 14:06:56
IS,Generating unique ID is and SSR for a11y and more,Howdy ya will tl dr please provide a way to coordinate pseudo random identifiers across the client and server This issue has been discussed a bit before 1137 4000 but I continually run into this issue trying to build libraries that provide accessible components by default The react component model generally speaking offers a big opportunity to raise the often low bar for accessibility in the library and widget world see experiments like is react a11y For better or for worse the aria and a11y API is in the browser are heavily based on using ID is to link components together aria labelledby aria describedby aria owns aria activedescendent and so on all need is ID is In a different world we would just generate ids where needed and move on however server side rendering makes that complicated because any generated ID is going to cause a mismatch between client server We have tried a few different approaches to address some of this one is making id is required props on components that need them That gets kinda ugly in components that need a few id is but moreso it annoys users Its unfortunate because if we could generate deterministic id is we could just provide more accessible components by default The frustrating part is that the component generally has all the information it needs to just set the various aria info necessary to make the component usable with a screen reader but are stymied by not having the user provide a bunch of globally unique ids' So far only really reasonable approaches I have seen are is solution of a root ID store and using rootID The latter obviously has problems The former does not scale well for library authors Everyones' root App component is already wrapped in a Router Provider etc having every library use their own root level ID provider is probably not super feasible and annoying to users It seems like the best way to do this would be if React or a React addon could just provide a consistent first class way to get a unique identifier for a component even if it is just a base64 of the node is rootID thanks for all the hard work everyone,,"jquense,milesj,jquense,milesj,jquense,milesj,jquense,jimfb,brigand,cannona,jquense,gaearon,jquense,gaearon,jquense,jquense",2016-01-16 17:44:15,2018-01-02 14:14:54
IS,Support DOM nodes as children,It would be nice to be able to do the equivalent of div document createElement wouldiv' div It seems entirely doable now with our new fancy renderer I think Obviously it would not be supported for SSR though so you would have to provide your own fallback if necessary,,"syranide,jquense,syranide,jimfb,syranide,jimfb,jimfb,syranide,gaearon",2016-03-14 22:23:07,2018-01-02 14:15:59
IS,TestUtils findAllInRenderedTree is not iterating through all components since React 15,Most of our tests rely on this I went through a debugger and stepped through the callback function Only the components Foo and Bar are captured any sub component under Bar is not coming in the callback,,"gaearon,gaearon",2016-04-11 23:58:42,2018-01-02 14:17:24
IS,Have React ignore a specific DOM element,As per my chat here with I'm filing an issue to discuss this further I would like to avoid a specific element that I rendered on the server from beeing further updated by react once it reaches the client One specific use case is rendering ad server tags that are kind of a pain in the ars using things like document write etc I render them using dangerouslySetInnerHTML but sometimes when React is doing the reconciliation client side they get re render so they stop executing Now I managed to track down some of these cases by fixing render differences between server and client which would trigger DOM patching but it still seems to happen Any advice,,"gaearon,jimfb,sebmarkbage,sebmarkbage,gaearon",2016-04-26 17:00:11,2018-01-02 14:25:44
IS,Clean up top level event listeners after unmounting all roots,Do you want to request a feature or report a bug Bug maybe intended behaviour What is the current behavior Background I have an app that needs to be embedded by other apps other customers The idea being our react app has its javascript loaded in an iframe but the main window hosts dom elements from the customers and our react app That bit works fine As time goes on our react UI is no longer needed and then react root is removed and the iframe destroyed These apps are often long lived so there will be times when the react app needs to appear again and the iframe is recreated and everything reloaded This can and will happen many times Goal We would like to NOT keep the iframe around when its not actually needed but rather re create just in time when it is needed This app is used by customers and they would like to embed our react app without interference with their app and all its javascript which is why we are doing the iframe thing Problem It is evident by watching the chrome dev tools timeline memory graph that memory always increases each time a new iframe is created and the react UI is init would Unmounting and destroying the iframe never causes the memory to drop to near original before load value Repeating this process multiple times slowly show an increase memory This also causes a more immediate problem in that react is throwing exceptions on every event click type etc because the window of the iframe is now null Proof First symptom Event exceptions only happens in my app These exceptions only happen in my cant share app i cant repo them but parts of this apply to all react apps Please read thru it will all make sense when you get to the end and if you examine my poc Destroying the Iframe leaves React and its event dispatching system in memory I have a mixture of x tag webcomponents which are used to create the iframe and load the react app After the custom element is used lets call it EMBED REACT the console starts showing exceptions all within react code This is a side effect of the react dispatchEvent still being active and trying to do stuff If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template What is the expected behavior There are probably two possible solutions that work in tandem 1 Firstly React should provide an API that will remove all its global event listeners Naturally it could complain if there are any active components that remain mounted This API may be internal private not public if 2 was implemented It might be called something like React shutdownAll Because everything is gone the next React render would setup all its globals again 2 React should dispose of all its global event handlers when the last or root component is unmounted This would call the new api mentioned in 1 Either option solves my problem where i wish to either let react shutdown gracefully With this in mind i could unmount iframe powered react ui component call React disposeGlobals mentioned above If unmounting auto calls an internal React shutdownAll then this step is skipped destroy iframe Proof 2 Goto your compiled out locate the dispatchEvent and add a console log notice even after the last root container is unmounted stuff will continue to be printed because the event listeners are still active I did a very quick scan of the abstraction around adding listeners and i couldnt see the remove function being stored and then called to cleanup Proof 3 Look at my last section below where i have a proof of concept form of the popular todomvc react example Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 15 0 2 React Dom 15 0 2 React redux 4 4 5 might be useful to know Reproducable use case Sorry i tried but decided that using the facebook jsfiddle wasnt really a smart thing for the following reasons the compile the jsx content means loading babel etc to compile babel jsfiddle etc too many moving parts its hard to get the root component that is inserted into the output box and its even just too hard to put the jsx compiled output into somewhere for the iframe src to load I have forked the popular todomvc app and added a few minor edits to recreate reload render unmount x100 destroy everything about the app and try again in a loop separated by a sleep todomvc main site todomvc github my fork with comments and snapshots of chrome dev tools timeline memory graph Hopefully we can trust the todomvc guys are doing the right thing no dumb memory leaks If you examine it should be obvious the only thing im adding is support for my horrible create app run app render unmount many times render unmount sleep a bit and then loop again until counter exhausted Sorry if this is boring but as a convenience i will list the basic instructions to run the react version of my branch on your local machines 1 clone 2 in the root run gulp to compile everything 3 run something like python m SimpleHTTPServer 4A navigate to 8000 examples react index html 4B navigate to 8000 examples react index3 html examples react corresponds to the dist examples react directory that gulp built into My poc supports 3 concepts re run todomvc over and over again in same window create iframe load todomvc js in the iframe but render to outer window unmount destroy iframe try 20x create custom element webcontainer creates iframe and load todomvc js in the iframe but render to outer window unmount destroy custom element try 20x If you look at my p r against todomvc you will see many helpful pictures with memory leak graphs from chrome dev tools for each of the 3 described scenarios and some commentary,,"gaearon,aweary,gaearon",2016-06-27 12:36:08,2018-01-02 14:30:10
IS,Allow specifying multiple fallback values for inline styles e g for vendor prefixing with SSR,I have been using the string hack to override CSS values in React components For example if you want to have display with different values you do I have an npm module for poly filling my styles in my React components All of that worked perfectly in v0 14 No warnings no nothing Updated to v15 0 today and everything is breaking a Normally there are deprecation warnings I did not notice any warnings on that change b in the changelog I cannot see anything related to that to understand what changed Am I missing something,,"gaearon,gaearon,gaearon,zpao,zpao,vjeux,vjeux,gaearon",2016-04-09 10:59:28,2018-01-02 14:45:12
IS,RFC Idea forceDeepUpdate and forceDeepUpdateWithScope scope,Just going to put it out there for feedback Motivation Subscription management comes with a cost and that eats into the wins of async rendering since it needs to be managed synchronously Not just managing the direct subscriptions themselves but managing the dynamic dependency graph so that it can be invalidated Meanwhile most of what subscriptions are used for is data that will never update At least in our apps It is a pure loss The use case is when you are connecting to third party systems that are not as easily connected to the top level data tree Proposal forceDeepUpdateWithScope would traverse the subtree and only start rendering if shouldComponentUpdateForScope returns true for the arbitrary scope argument This allows for a bit more of a targeted update with some convenience overhead Additionally React would cache the pair of scope and components that responded For some number of scopes back If a new component gets mounted with a shouldComponentUpdateForScope we might check it against the cache to see if we need to add it to the cache Effectively this creates lazy subscriptions The use case is something like typing into an input field that then updates some global store which immediately displays in a completely different place on the page The first character might be a bit slower but still with responsive levels and the subsequent characters are fast to update Caveat The major downside of this proposal is that it relies on mutation As we know React does not really like mutation for many more reasons than just shouldComponentUpdate The effect in Fiber for example is that any component that gets a higher priority update will start using the new value Components that rely on mutable state effectively become up prioritized which is not good 1 It can temporarily show inconsistent data 2 The point of making this kind of update lower priority is because it is likely to be large Larger updates will stall the page if they take the same priority as higher priority updates Thereby defeating the benefits of Fiber anyway I would like to try to come up with a variant of this API that does not rely on mutation,,"sebmarkbage,sebmarkbage,gaearon,karczk,syranide,sebmarkbage,syranide,gaearon,gaearon",2016-09-16 23:21:25,2018-01-02 14:52:05
IS,Turn istrict' ESLint rule back on,When upgrading ESLint to the latest version I had to turn off the istrict' rule because it conflicts with combined with import type Flow statements Opening this issue to track turning istrict' back on either with a change to ESLint a new custom rule for use strict or some other means,,"tomocchino,tomocchino,zertosh,gaearon",2016-11-18 15:30:37,2018-01-02 14:53:21
IS,Stop masking context,Feature Return all contextProps available via a wildcard prop this would be helpful for those who want to do shouldComponentUpdate comparisons with props state and context Possible solutions,,"brigand,gaearon,gaearon",2017-03-27 16:22:58,2018-01-02 15:03:13
IS,DEV only requires in FB bundles,I see ReactDOMFiber prod starts with Notice how require prop types should not be there We probably require it and then don t use it in PROD We need some mechanism to express a module is pure from side effects and have Rollup DCE this require,,"gaearon,gaearon,gaearon",2017-07-13 19:11:54,2018-01-02 15:09:57
IS,New Release Checklist,The current release process is convoluted I think we agreed that we won t be maintaining stable branches from now on and will release from master This means breaking changes land behind a flag In this issue I am documenting the new master based release process It is intended to be exhaustive so let me know if something is missing If we agree on this I ll be deleting the existing documentation and point it to this issue instead This issue is in checklist format to be copy pasteable for specific release issues h t for the tip Ideally we should automate some parts of this potentially by fixing RRM to work with this model So You Want to Cut a Release Ensure all commits in master were tested at Facebook Check that they were a part of the latest internal sync For stable releases prefer that they ve been landed for a week or so Only skip this step if you really know what you re doing Verify that you have npm permissions You re in npm owner ls react You re in npm owner ls react art You re in npm owner ls react dom You re in npm owner ls react test renderer If not ping someone on the team Ensure your React is fresh Ensure you re on master Do a git pull Is master green on CI Check the most recent commits Check that your local git log output matches the commit list Run yarn in the repo root Ensure runtime dependencies match what users would get For fbjs Look at the version range of fbjs in root package json Ensure all packages package json depending on fbjs specify the same range For object assign Look at the version range of object assign in root package json Ensure all packages package json depending on object assign specify the same range For prop types Look at the version range of prop types in root package json Ensure all packages package json depending on prop types specify the same range Run yarn upgrade object assign prop types fbjs This might change the lockfile This should not change any package json Commit the changes if any Do the local sanity checks in the repo root Run yarn test in the repo root Run yarn lint in the repo root Run yarn flow in the repo root STABLE RELEASE ONLY Update error codes Run yarn build extract errors in the repo root If scripts error codes codes json changes git commit am 'Update error codes' Maybe If we still have a separate stable branch for docs when you re reading this we need to cherry pick that commit to that branch This makes sure the website decoder knows about the updated error codes But ideally we should just change docs to serve from master STABLE RELEASE ONLY Write the changelog Open CHANGELOG md and add release notes in the same format as earlier Make sure the changes are easy to understand Friendly one liners are better than PR titles Make sure all contributors are credited just like before Verify that the markup isn t messed up by previewing it in the online editor Update the version Update version in root package json Update export in src ReactVersion js Update both version and React version in peerDependencies in all packages package json packages react package json packages react art package json packages react dom package json packages react noop renderer package json packages react test renderer package json If you see any other packages update this list Run yarn version check to verify your changes git commit am version number Build it Run yarn build in the repo root Run fast packaging smoke test Open fixtures packaging babel standalone dev html in the browser for a smoke test It should say Hello world Run slow packaging smoke test Go to cd fixtures packaging and run node build all js npm install g serve Go to the repo root and run serve s Open 5000 fixtures packaging and verify every iframe shows Hello World Release Run git push Run git push tags Go to build packages For every subfolder For non stable versions Run npm publish tag next in the subfolder For stable versions Run npm publish in the subfolder Run npm info package dist tags to verify that things were published as you expect FIXME We should really automate this part because it s currently not atomic STABLE RELEASE ONLY Create GitHub Release Open New Release page on GitHub Choose the tag version you just pushed in the dropdown so that it says Existing tag Paste the new release notes from CHANGELOG md Attach all files in build dist js except react art to the release Press Publish release STABLE RELEASE ONLY Update the version reported on the website Open docs config yml Change react version in it to the newly published version git commit am Update the reported React version on the website Maybe If we still have a separate stable branch for docs when you re reading this we need to cherry pick that commit to that branch This makes sure the website knows about the updated config But ideally we should just change docs to serve from master STABLE RELEASE ONLY Update Bower Clone the Bower repo outside of main repo git clone Make sure it s on master and you did git pull Delete all JS files from the Bower repo and copy all build dist js from React repo into it In the Bower repo git commit am version number In the Bower repo git tag a v version number Don t miss the v In the Bower repo git push and git push tags STABLE RELEASE ONLY Try it out npm i g create react app create react app myapp cd myapp npm start STABLE RELEASE ONLY Reach out to DOM team Reach out to the DOM team nhunzaker in case they would like to go through DOM fixtures This doesn t block the release,,"gaearon,aweary,gaearon,flarnie,gaearon,aweary,gaearon,flarnie,gaearon,flarnie,flarnie,gaearon,flarnie,bvaughn",2017-09-06 17:11:09,2018-01-02 15:17:45
IS,TestUtils Simulate does not appear to work with React cloneElement,Do you want to request a feature or report a bug Bug What is the current behavior ReactTestUtils Simulate events do not fire on dynamic children components If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template I have a class like this As indicated Foo handleFocus will be invoked when a user focuses on the component in the browser but when I attempt to use something like ReactTestUtils Simulate focus findRenderedDOMComponentWithClass document 'foo' it will never be called What is the expected behavior The cloned element should still fire the synthetic focus event Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React This works as expected using the deprecated react addons test utils package React 15 4 1 Does not appear to work using 15 5 4,,"gaearon,gaearon,gaearon",2017-09-21 18:36:35,2018-01-02 15:20:33
IS,Loosen up type requirements for event handlers,Do you want to request a feature or report a bug Feature What is the current behavior When adding event handlers it is common practice to do something like What is the expected behavior I think it makes sense to allow null false and undefined in addition to function types for event handlers Or just anything falsy although that may be too much to ask I definitely understand the rationale from a type safety perspective but this does make it less pragmatic I am personally a huge fan of how JS evaluates null 0 and undefined to false and it reduces the amount of boilerplate needed to conditionally wire up handlers Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 all browsers This did not emit a warning in React 15 and below,,"gaearon,gaearon,gaearon,gaearon,gaearon",2017-10-02 14:44:19,2018-01-02 15:23:15
IS,Cannot read namespaceURI of null error when rendering into a comment,See internal task 22198152,,"gaearon,sophiebits,gaearon",2017-10-03 15:57:39,2018-01-02 15:24:02
IS,Need a hook for hydration mismatch,Do you want to request a feature or report a bug feature What is the current behavior In React 16 the data react checksum attribute was removed from the server rendered markup In previous versions we used this attribute to beacon checksum mismatches to our log servers to be notified of production issues With the attribute removed we have no mechanism to determine if a checksum mismatch occurred I'm aware that checksum issues no longer cause the entire DOM to re render however it is still important that we know when they do occur A typical use case is when we display ads or autoplay video We want to know if an ad gets re rendered double counted or an autoplay video is interrupted due to React re rendering the DOM Other related bugs requests Ability to debug checksums in production What is the expected behavior The solution does not necessarily need to re introduce the checksum attribute again It could be some other event hook or callback that applications can leverage to handle checksum issues Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 All browsers Worked in React 15,,"syranide,sebmarkbage,sebmarkbage,gaearon,gaearon,gaearon",2017-10-11 05:22:33,2018-01-02 15:26:40
IS,Request to release react 15 6 2 which based on MIT License,You has updated React license from the BSD patent License to MIT license could you release it as 15 6 2 thank you,,"nhunzaker,aweary,gaearon,gaearon,gaearon",2017-10-16 09:27:50,2018-01-02 15:29:39
IS,Yarn Workspaces Follow up,Should Do Soon x Having a package called react native is weird Maybe we can just rename it to react native renderer to clarify the difference x Better strategy for shared code Currently we just pile code into shared without particular structure and then import directly through Haste This is the same as we do in master though so it s at least no worse We might want to tighten that up a little bit in the future and maybe have some first class entry points into it We need to be clear shared code will be duplicated between any renderers using those modules x Server should not depend on reconciler modules I noticed warnValidStyle depends on ReactDebugCurrentFiber This seems like it will always miss owner in warnings on server Maybe it should depend on some other shared file instead Regardless this is already an issue on master so it s not a regression x Find a more solid way to avoid Jest skipping our own modules current hack is gross The hack being transformIgnorePatterns node modules react in package json Otherwise Jest skips our own code thinking it doesn t need to be compiled because it was resolved through node modules The hack is not dangerous and can t cause false positives with third party code because I specifically check the resolved symlink path in the Jest transformer Still it means that if we add a package whose name doesn t start with react it will not be Babel ed in tests until we add another exceptional case there We can live with this hack for a little bit since we don t plan to publish packages that don t start with react in near future We should file an issue with Jest though and come up with a better solution Update fixed via Should Do Later x Get rid of useFiber flag in bundle config x Rename entry points to be more intuitive e g React should be React entry point etc x Make internal folder structure more sensible x Move requires around to be prettier x Fix relative requires in tests x Get rid of fbEntry in bundle config x Why are we bundling lowPriorityWarning into PROD bundle x In general remove anything in bundle config that can now be determined using package folder x Fix the gross hack Forbid importing from other packages discussion r146703577 Move some Flow types It is odd that package level deps must be at top level too issuecomment 338707660 Split bundle config per package and autodiscover packages for bundling and version check Autogenerate simple entry point files for npm react dom npm index js being the exception Move some of scripts into packages too,,"gaearon,gaearon",2017-10-18 23:23:13,2018-01-02 15:30:33
IS,HTML5 Templates apart from JSX for Non Programmatic situations,Just before I have my view please take a look at these 2 examples Hello World React App jsx Hello World Vue App vue Identical Is not it Yes these are two different paradigm but hey they are expressing same things and both are doing it in the same way by taking benefits of the Virtual DOM My Feature Request is that Just like Vue supports JSX for Programmatic situations I think React should also support HTML5 Templates for Non Programmatic situations Also Imagine trying to create a website based on an existing theme that you purchased Changing it over to JSX literally will feel like sticking a knife through your eyeballs With Templates existing HTML just works Please also note that Programmatic situations have a low use case and Non Programmatic situations have a high use case,,gaearon,2017-10-22 12:09:58,2018-01-02 15:33:59
IS,Unexpected rerenders while in production enviroment,Do you want to request a feature or report a bug report a bug What is the current behavior React is making unexpected rerenders when used along react router dom and react css modules This happens only while in production enviroment If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Application running in development mode is setting key prop properly thus not making rerenders between route calls inside component App in production mode is appending new value to existing key resulting in rerender and this What is the expected behavior Application in production mode should be setting proper key value and not rerendering Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React I do not believe that this is browser problem I had the same issue with Safari 11 0 and Chrome 62 I have tested it with React 15 6 2 and React 16 0 0 I have tried to isolate this issue as much I could If I can help you any further please let me know,,"gaearon,gaearon,gaearon,gaearon,gaearon",2017-10-23 23:46:43,2018-01-02 15:35:08
IS,Is there something like emberobserver com,Is there something like for React world,,gaearon,2017-11-14 14:06:18,2018-01-02 15:41:32
IS,Add a ReactDOM Portal element,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug I d like to request a feature What is the current behavior To create a portal you currently have to use a function,,"gaearon,gaearon,gaearon",2017-11-17 16:51:33,2018-01-02 15:42:53
IS,can not access discuss react,I know this is not related to react directly but did not know where to turn to Am I the only one who can not access login to discuss reactjs org for quite some time already I get error This page isn t working discuss reactjs org is currently unable to handle this request HTTP ERROR 500 and sometimes when I retry this error Sorry there was an error authorizing your account Perhaps you did not approve authorization,,"gaearon,gaearon,gaearon",2017-11-20 18:53:12,2018-01-02 15:43:32
IS,Can React have a 'watcher' It is bad practice setState inside componentDidUpdate what are the alternatives,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug feature But setState inside componentDidUpdate is bad practice right So what should I do And can we have a 'watch' method like in Vue js,,"gaearon,gaearon,gaearon",2017-11-23 06:42:12,2018-01-02 15:45:32
IS,React roadmap document,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug A feature What is the current behavior I think many people would be interested in a document that would show the future long term plans for React and features that are planned If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar It is not a bug What is the expected behavior Document or link exists in repo and can be accessed to see what is planned for the future Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React N A,,gaearon,2017-11-23 13:43:52,2018-01-02 15:47:34
IS,Click event is not propagating from elements created in a loop with Unique keys,React Version 15 3 2 const items success 2h ago var outputElements items map item index outputElements push div key this getUniqueKey item div The above code generates react dom like the below If we click on the above elements the event is not propagating While debugging I found that the issue here is with keys Is there any restrictions for keys in react like max length or specific characters,,"gaearon,gaearon",2017-11-28 06:48:25,2018-01-02 15:48:32
IS,Firefox error Permission denied to access property target,Do you want to request a feature or report a bug Bug What is the current behavior Certain events in Firefox 54 0 trigger the following error suggests it could be due to an iframe and cross origin issues We do have some iframes embedded although I have not been able to reproduce the error If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template I was unfortunately not able to reproduce this though it has happened for 200 separate users since the Firefox 54 0 upgrade on June 13 2017 If it helps we reported a similar error a while ago to raven js which was fixed using a try catch What is the expected behavior No errors Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 15 3 2 Firefox 54 0 Windows and OSX I think this is only an issue with the new Firefox and not new behavior in React,,"aweary,gaearon,gaearon",2017-07-13 23:32:48,2018-01-02 15:49:19
IS,Component unmounts directly after mount,Some of my wrapper components get into the state 'mounted false' directly after mounting The componentWillUnmount does not fire and the components are still mounted into the DOM but state changes fired in that component is context e g in onClick listeners result in errors and no unmounting I cannot reproduce this issue on jsfiddle possibly due to differences in environment I currently do not have much time to explain but here are two gists of the components which together break gist of breaking component usage One of the issues I have found is that literally directly after mounting window setTimeout console log this updater isMounted 1 prints false Environment FF 58 beta React 16 2 0 Babel 6 something plugins env FF 54 chrome last 2 versions safari last 2 versions stage 0 without async react using react hot loader but this happens after page reload as well,,"gaearon,gaearon,gaearon",2017-12-05 22:14:02,2018-01-02 15:50:24
IS,Question Need help with react 16 0 new lifecycle,hi all after i have update to react 16 0 and read this and this issuecomment 287763538 i have create fiddle with example on CodeSandbox i don t understand why in not worked with hot reload when component inside hoc when component is updated we have error this subscriptions some is not a function,,"gaearon,gaearon,gaearon",2017-12-13 12:55:13,2018-01-02 15:54:04
IS,BUG Cannot read property 'isReactComponent' of undefined,Ca not seem to find the root cause of this random failure in emzyme jest test Any helps would be very appreciated TypeError Cannot read property 'isReactComponent' of undefined at shouldConstruct node modules react test renderer lib shallow ReactCompositeCompo n ent js 57 55 at ShallowComponentWrapper mountComponent node modules react test renderer lib shallow ReactCompositeComponent js 186 23 at Object mountComponent node modules react test renderer lib shallow ReactReconciler js 45 35 at ReactShallowRenderer render node modules react test renderer lib shallow ReactShallowRenderer js 138 23 at batchedRender node modules react test renderer lib shallow ReactShallowRenderer js 85 12 at Object batchedUpdates node modules react test renderer lib shallow ReactDefaultBatchingStrategy js 60 14 at Object batchedUpdates node modules react test renderer lib shallow ReactUpdates js 97 27 at ReactShallowRenderer render node modules react test renderer lib shallow ReactShallowRenderer js 112 18 at ReactShallowRenderer render node modules enzyme build react compat js 171 37 at node modules enzyme build ShallowWrapper js 128 26 at ReactDefaultBatchingStrategyTransaction perform node modules react test renderer lib shallow Transaction js 143 20 at Object batchedUpdates node modules react test renderer lib shallow ReactDefaultBatchingStrategy js 62 26 at Object batchedUpdates node modules react test renderer lib shallow ReactUpdates js 97 27 at ReactShallowRenderer unstable batchedUpdates node modules react test renderer lib shallow ReactShallowRenderer js 130 25 at performBatchedUpdates node modules enzyme build ShallowWrapper js 103 21 at node modules enzyme build ShallowWrapper js 127 9 at withSetStateAllowed node modules enzyme build Utils js 284 3 at new ShallowWrapper node modules enzyme build ShallowWrapper js 126 38 at ShallowWrapper wrap node modules enzyme build ShallowWrapper js 1546 16 at ShallowWrapper anonymous node modules enzyme build ShallowWrapper js 1614 26 at ShallowWrapper single node modules enzyme build ShallowWrapper js 1518 25 at ShallowWrapper dive node modules enzyme build ShallowWrapper js 1607 21 at process tickCallback internal process next tick js 109 7,,"gaearon,aweary,gaearon",2017-12-14 19:49:18,2018-01-02 15:59:27
IS,'tspan' and 'text' tags not working,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Bug What is the current behavior In Chrome we see the following errors What is the expected behavior The expected behavior is for these charts to work without the errors in our console related to tspan or text Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 2 but this issue occurred before we updated as well,,"aweary,gaearon,gaearon,gaearon",2017-12-20 21:50:31,2018-01-02 16:00:05
IS,react test renderer does not include key on fragments,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Bug What is the current behavior From the docs keyed fragments If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 See above What is the expected behavior That somehow the key is not lost I'm not sure where it would make sense but it should be in there somewhere Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React 16 2 0,,"SimenB,gaearon,SimenB,gaearon,SimenB,gaearon",2017-12-08 07:36:53,2018-01-02 16:02:23
IS,Is it possible to declare a class variable in component class,Is it possible to declare a class variable in a Component class For example I used to declare such variables earlier while using client side rendering using webpack dev server But recently I moved to server side rendering using express and webpack middleware Now I can not declare such class variables Where am I going wrong,,,2017-12-13 08:23:31,2018-01-02 16:58:41
IS,button className square onClick props onClick works props onClick does not,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug What is the current behavior If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template for React 16 template for React 15 What is the expected behavior Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React,,"jquense,gaearon",2018-01-01 14:09:51,2018-01-02 17:15:47
IS,How to get response from CustomTabs in react native,I have created button to open CustonTabs to use external url into React native app external url have some forms that are submitted and return array as a response into another page i e success page I want to get response from success page into app and CustomTabs would be close automatically code for custom tab how can i get response from CustomTabs into my app and close CustomTabs will be closed in react native app,,gaearon,2018-01-02 05:36:37,2018-01-02 17:16:20
IS,React Webpack Typescript fine with react v15 but fails to resolve areact dom' with react v16,tsconfig json,,"gaearon,gaearon,gaearon,gaearon,gaearon",2018-01-02 10:33:32,2018-01-02 18:15:55
PR,Run some tests in Node environment,Fixes Switches tests that shouldn t require DOM to run in a pure Node environment Splits the SSR test file into pure SSR and hydration so that we can test pure SSR in a Node environment Verified that using document in shallow renderer and SSR now fails the tests,,gaearon,2018-01-02 13:55:20,2018-01-02 18:42:19
PR,Return event name from getVendorPrefixedEventName,Instead of relying on getVendorPrefixedEventName returning an empty string for un prefixed events just return the event name That way we do not have to duplicate the string literals and can remove the Saves a few bytes,,aweary,2018-01-02 18:38:22,2018-01-02 18:46:52
IS,setTimeout not working on initial render,Do you want to request a feature or report a bug Bug I think unless this behavior is intentional What is the current behavior You can see it here Basically I am trying to batch a set of ajax calls by wrapping them in a promise that calls setTimeout I have replaced actually ajax calls with calls to console log but the affect is the same The first time the update function is called you can see the console log each statement within a single ms of each other statement The next time the update function is called 12 seconds later you can see that the console log statements are delayed as expected What is the expected behavior I expect the sleep function to work the first time it is called As it stands now my UI is broken until the interval calls the update function again which is 3 minutes in production I understand async stuff in React is a lil funky and I definitely do not know how React works under the hood so this could be intentional behavior somehow If it is why is it needed and is there any workaround so that I can get the behavior I need Thanks guys and keep up the great work Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 15 but I believe this happens on React 16 as well I'm on Firefox Developer Edition 57 0b7,,"gaearon,gaearon,gaearon,gaearon,gaearon",2018-01-02 18:33:11,2018-01-02 19:00:30
PR,toWarnInDev matcher throw on unexpected console error,Relates to 11626 Added a new matcher for dev errors and warnings Rather than checking for warnings like this This is currently supported although it is unclear if this is a case we would ever actually need or want to use Once we have migrated the current warning tests over to use this new matcher if we determine that we do not need to support nesting we can change it to fail explicitly,,"bvaughn,thymikee,bvaughn,gaearon,gaearon,gaearon,bvaughn,bvaughn,bvaughn,gaearon,gaearon,gaearon,bvaughn,gaearon,bvaughn,bvaughn,gaearon,gaearon,bvaughn,bvaughn,gaearon,bvaughn,bvaughn,gaearon,gaearon,bvaughn,bvaughn,gaearon,bvaughn,gaearon,gaearon,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,gaearon,bvaughn,bvaughn,gaearon,bvaughn,bvaughn,gaearon,bvaughn,bvaughn,gaearon,bvaughn,gaearon,bvaughn,gaearon,bvaughn",2017-12-06 16:50:44,2018-01-02 19:06:42
IS,Remove selectionStart polyfill,Looking at this code L91 L100 When would selectionStart not exist According to only in IE8 It might be wrong though It would be nice to check and remove the relevant code if it is supported everywhere else,,"gaearon,gaearon,jquense,gaearon,gaearon,flarnie,flarnie,flarnie,flarnie,sophiebits,sophiebits,flarnie,sophiebits,flarnie,sophiebits",2017-12-08 01:23:17,2018-01-02 19:11:12
IS,is there a Syntactic sugar,is there a Syntactic sugar such as FilterableProductTable products products to be like FilterableProductTable products tks,,jquense,2018-01-03 03:59:11,2018-01-03 04:32:31
PR,Fix links in README md,Fixes broken links,,"taehwanno,gaearon",2018-01-03 04:42:48,2018-01-03 14:02:33
PR,Microsoft Edge easily enters a confused state via ctrl a keypress and crashes,Microsoft Edge exposes TextInput event but it is not useful either See opened issue here,,"sophiebits,msmania,msmania,sophiebits,aweary,msmania,gaearon",2016-07-13 13:35:56,2018-01-03 14:11:41
PR,add strict attribute validation to ReactNativeAttributePayload,Intended for Is this something you would want to take If so what is the right way to add an assert inside of the renderer code provide a configurable property,,"aweary,aweary,zpao,sophiebits,vjeux,zpao,gaearon",2016-07-20 01:51:48,2018-01-03 14:12:37
PR,Update additional tests to use toWarnDev matcher,Follow up for PR 11786 Update additional unit tests to use toWarnDev instead of console spies and if DEV conditionals,,"bvaughn,bvaughn,gaearon,bvaughn",2018-01-02 22:19:06,2018-01-03 18:08:25
PR,Update additional tests to use toWarnDev matcher,Continuation of PR 11952 Update additional unit tests to use toWarnDev instead of console spies and if DEV conditionals Note commit 806035a specifically as it slightly tweaks a ReactElementValidator warning message to differentiate between Array and Object types Is this okay Seems like an improvement and since it is a dev only warning I do not think it is particularly unsafe After this PR only two files remain that spy on console packages react reconciler src tests ReactIncrementalErrorLogging test internal js packages react dom src tests utils ReactDOMServerIntegrationTestUtils js Both are a little involved so I will handle them with a subsequent PR,,"bvaughn,gaearon,bvaughn,bvaughn,bvaughn,gaearon,gaearon,bvaughn,bvaughn",2018-01-03 20:30:58,2018-01-03 21:55:38
PR,Prevent error boundary from masking a test error,This code in ReactFiberScheduler L1014 L1023 can suppress unexpected console warning Error s thrown by our custom toWarnDev matcher L34 L41 so I have changed the matcher to report those Errors to Jest as failed assertions instead This means that we wo not halt as quickly as before but we will still fail within the bounds of the expect toWarnDev callback so it is probably okay Before this change the following test would unexpectedly pass After this change it fails unless the warning is explicitly expected or the entire block is wrapped in an expect toThrow block Note that the test would also have passed if we replaced expect ReactNoop flush toWarnDev above with ReactNoop flush because of the way our default console spy queues Errors up to report in an afterEach block L66 L75 This PR also slightly improves the pretty printing message format in this case for when there are no remaining expected warnings or multiple ones For example screen shot 2018 01 03 at 2 48 19 pm screen shot 2018 01 03 at 2 48 31 pm screen shot 2018 01 03 at 2 48 40 pm,,bvaughn,2018-01-03 22:56:54,2018-01-03 23:23:06
IS,is there a Syntactic sugar like this,so that we can easy to access those Attributes I want to know is there any problem with this new reacter tks,,"milesj,jquense",2018-01-04 08:17:03,2018-01-04 12:34:54
PR,Remove Presto check 11886,Removed Presto check See 11886,,"skiritsis,nhunzaker",2017-12-26 11:26:16,2018-01-04 13:28:43
IS,Do we still need to check for Opera in BeforeInputPlugin,This came up in We have a specific browser check for Opera but Opera has used Blink for a while Is a version of Opera that uses Presto still in our browser support matrix Could we remove this check We do not have an official as official as it can be guideline for Opera in issuecomment 334274439 Any thoughts here How far back does Facebook go on Opera,,"nhunzaker,skiritsis,sophiebits,nhunzaker",2017-12-19 03:17:32,2018-01-04 13:29:02
PR,Update to Jest 22,jsdom update made this one challenging s It uncovered some issues in tests but I believe some of the remaining 9 tests I have not fixed yet actually point out legit problems where we emit a different number of warnings on the server and on the client s I made one change to the behavior Previously we were emitting two different warnings about bad prop casing and about client server mismatch when hydrating a badly cased SVG attribute like text textlength 10 In I changed it to only emit one warning about the prop casing since that is the actionable one This fixed the tests which assume the number of warnings is consistent between server and client,,"gaearon,gaearon,jquense,gaearon,bvaughn,bvaughn,bvaughn,SimenB,gaearon,jquense,gaearon,gaearon,gaearon",2018-01-03 16:49:02,2018-01-04 18:57:31
PR,Move npm output from build packages to build node modules,This fixes Node resolution mechanism in built packages and accomplishes two goals We can now use Node js shell inside packages node modules which is handy for manual testing img width 498 alt screen shot 2018 01 04 at 6 17 57 pm src We can now use link instead of file in fixtures This is important because previously Yarn would cache the fixtures until the version change So it was easy to accidentally test a cached previous version of React in a fixture Now they always point to the latest build output I verified that the build completes and all fixtures work I have not tested the release manager directly but hopefully my changes make sense Btw I considered keeping build packages and setting up build packages node modules with symlinks as an alternative but in the end it seemed less straightforward than just putting them in a folder called node modules in the first place,,"gaearon,gaearon",2018-01-04 18:39:00,2018-01-04 19:01:31
PR,Removes legacy TODOs in createfactory methods,This pull request addresses issue 11936 based on inputs from,,"gaearon,gaearon",2018-01-01 05:59:58,2018-01-04 19:40:02
IS,Remove legacy TODOs in ReactElement createFactory and ReactElementValidator createFactoryWithValidation,I came across this line L269 I am interested in taking this up as my first pull request Please let me know what is required for adding a warning and it is related test s Thank you,,"aweary,aweary",2017-12-30 19:47:53,2018-01-04 19:42:44
IS,Can you add this to this,,,jquense,2018-01-05 09:28:05,2018-01-05 12:36:42
PR,Fiber Change work priority to represent the priority of the child,When the children are reconciled set the work priority of the parent to the current priority level Do not set the work priority of the children In findNextUnitOfWork we need to check both the update priority and the work priority of the root since the work priority field no longer represents both In scheduleUpdate when bubbling the priority to the root skip the fiber that is being updated on and start with the parent Move resetWorkPriority from commitAllWork in the scheduler into ReactFiberCompleteWork so we can branch on the type of the component This is needed for HostComponents which may have leftover work priority if we bailed out on a hidden subtree Because a fiber has no field that represents its own priority we cannot bailout on low priority at the beginning of beginWork Instead we have to perform that check while performing work on the parent before its child is returned,,"acdlite,acdlite,acdlite,iamdustan,gaearon,acdlite,acdlite,acdlite,gaearon,acdlite,gaearon,acdlite,gaearon",2017-01-09 07:02:44,2018-01-05 13:52:01
IS,Do not convert attributes for DOM elements to strings for custom elements,Do you want to request a feature or report a bug Feature What is the current behavior React converts values to strings before passing them to the native setAttribute methods of DOM elements What is the expected behavior Custom Elements are landing in browsers It is possible for Custom Elements to extend setAttribute at least in Chrome to do custom things with input values before passing onto super setAttribute This means that Custom Element authors can accept values other than strings which can bring performance benefits For example imagine Custom Elements designed for rendering to WebGL and when using them imperatively the overhead of strings can be avoided For example suppose we have this class If React converts values to strings before ever passing them into setAttribute then Custom Element authors can not allow end users to benefit from performance improvements Browsers allow anything to be passed into setAttribute so React should do the same If a Custom Element does not extend setAttribute the native super class will do the string conversion anyways so React does not have to In my case this would be awesome because then I could pass number based values to my webgl rendering Custom Elements and propagate those directly into WebGL without having to convert strings to numbers every tick for hundreds if not thousands of WebGL objects Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React 15 6,,"aweary,nhunzaker,syranide,gaearon",2017-06-29 07:49:15,2018-01-05 13:53:54
PR,Implement mutation observer in DOMChildrenOperations,This pull request WIP tries to resolve I have done some basic implementation and tried to add a devtool hook but have some questions What is the goal of the hooks in ReactDebugTool js how can I trigger an existing hook to see how it works I'm not sure I would add tests to this implementation any suggestion is welcome Also I would like suggestion on where to add the disconnect function,,"edvinerikson,syranide,syranide,gaearon",2017-01-19 18:24:18,2018-01-05 13:55:17
PR,Fix an edge case in ReactFiberUpdateQueue,Correct me if I misunderstood something,,"jddxf,acdlite,acdlite,jddxf,gaearon,jddxf,gaearon,jddxf,gaearon,gaearon",2017-02-10 09:58:17,2018-01-05 15:05:22
PR,Add warning about overwriting React component is instance property updater,This should fix 9164 but I have the slight feeling that given my poor understanding of the project I might be tackling this in a really incorrect way so I have a couple of questions Also please let me know if any of my assumptions are totally wrong It seems that React is mutating the updater right Which is guess this are valid mutations Considering that my assumption is correct what does a valid updater is I currently check for it being either ReactServerUpdateQueue or a ReactNoopUpdateQueue but I'm not sure if this is correct discussion r106303781 I'm having some trouble getting the component name I tried getComponentName instance but I'm sure I'm doing something wrong here I'm getting an error when running yarn build which I guess it has to do with the bundle that gets created for browserify,,"acdlite,acdlite,acdlite,acdlite,acdlite,aweary,aweary,gaearon",2017-03-22 19:09:04,2018-01-05 15:13:21
PR,WIP Move createInstance and createTextInstance to beginWork,Currently we create the instances on the way up in completeWork This is not great because the complete phase is not time sliced So if you end up completing a very deep tree you might go beyond your deadline However it is also important for the stateNode to be initialized in the begin phase during reviving which is why I'm doing this now We should probably do the same for updates later,,"sebmarkbage,sebmarkbage,gaearon",2017-04-28 09:01:58,2018-01-05 15:13:46
PR,Add failing test demonstrating progressed work bug,In cloneFiber we always copy the memoizedProps from current That means we lose the memoization of the progressed work This bug manifests itself in several ways The simplest example is that if we resume mounting a partially rendered tree we can not reuse any of the progressed work because the current memoizedProps is null I believe the reason we did not discover this flaw earlier is because we do not implement memoization correctly and the cloned current props end up being used to memoize the progressedChild Which happens to work in many cases even though it is incorrect In addition to fixing the bugs we may want to consider adding a progressedProps and progressedState field to the Fiber type,,"acdlite,gaearon",2017-05-05 01:43:52,2018-01-05 15:13:56
PR,Refactor progressed work model,As the title suggests this is not ready for review yet but I think the big pieces are in place This refactors the whole begin phase particularly our model for progressed work I tried to avoid doing a big refactor like this in the first pass but eventually gave up there are just too many inter related things that had to change This also incorporates a change to make pendingWorkPriority exclude the priority of the fiber it belongs to as in Again I tried to keep this separate but it was too tied to everything else I wrote detailed comments inline as I refactored I will do an additional pass once it is closer to review If you are interested in taking a look read through ReactFiberBeginWork js I think it is easier to follow conceptually The basic algorithm is now Do we have progressed work since the last commit If not reset to current If we do did it render at the current priority If not stash the progressed work and reset to current This forks the child set If it did reuse the progressed work Do we have pending props state or context If so reconcile This will update the progressed work If not bailout This will leave the progressed work alone TODO x pendingWorkPriority should represent subtree excluding fiber it belongs to x Rebase on top of once that lands x Finish implementing types of work x HostRoot x HostComponent x hidden x HostText x IndeterminateComponent x FunctionalComponent x Fragments x Classes x Portals x Coroutines x Decide on heuristic for determining whether a work in progress fiber has been worked on since the previous commit or if it is actually the previous current This can be tricky after a bailout because fibers that bail out are not marked as progressed work x Hydration Bikeshed on naming before landing Distinguish between the last work that was reconciled currently called progressed work and the most recent fiber that was worked on including bailouts currently called newest work Resume a work in progress versus resetting by cloning from current We use bailout to mean do not reconcile but can we be more specific Sometimes you bailout and continue working on the child and other times we do a full bailout reuse the current child and return null Write additional unit tests or possible rewrite some existing ones using an explicit yield API to avoid brittleness Will probably do this in a later PR tests are not changing significantly and I do not think it is blocking Follow up with DevTools after this is merged,,"acdlite,trueadm,trueadm,acdlite,acdlite,acdlite,bvaughn,acdlite,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,acdlite,acdlite,acdlite,acdlite,acdlite,acdlite,acdlite,gaearon",2017-05-16 03:36:30,2018-01-05 15:14:55
PR,Fiber Warn when trying to unmount a non root React node,Fixes should warn when unmounting a non container non root node testcase in ReactMountDestruction test I have not added the second warning L59 L62 because with Fiber there is no difference between container node and root node fragments may go directly into container Btw there is no warning when one tries to call unmountComponentAtNode on a non react node it is just a silent no op Is it intentional,,gaearon,2017-05-05 18:40:45,2018-01-05 15:19:30
PR,Warn if a component is defaultProps is a function,9620,,"aweary,gaearon",2017-05-07 21:48:44,2018-01-05 15:19:52
PR,Freeze defaultProps in development mode,Resolves 7415 Freezes element defaultProps but leaves prototype methods mutable,,"sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,aweary,gaearon,gaearon,gaearon",2016-08-09 05:02:13,2018-01-05 15:26:16
PR,Have jest check for window errors in a similar to console error logs Fix for 8260,Fixes 8260,,"aweary,cpojer,aweary,gaearon,gaearon",2016-11-13 09:27:03,2018-01-05 15:27:27
PR,Try to generate a beforeInput event for buggy composition scenarios in IE,This PR attempts to fix The Sogou Wubi Chinese IME does not always produce composition or input events in IE particularly when typing full width punctuation in a contentEditable div I tried to work around this by marking the keyDown event that initiates the 'pseudo composition' and handling the corresponding keyUp if it is not handled in the normal manner,,"gaearon,gaearon,gaearon,gaearon",2016-10-10 08:28:42,2018-01-05 15:29:35
PR,Do not extract mouse events for children of disabled parents,Potential fix for React my fault only sifts out mouse events for disabled elements that are the direct target of dispatch If an element is the child of a disabled parent the event incorrectly dispatches because SimpleEventPlugin does not see a disabled prop For example Incorrectly fires the onClick handler Original test case From that issue here,,"nhunzaker,sebmarkbage,nhunzaker,nhunzaker,sophiebits,nhunzaker,sophiebits,sebmarkbage,aweary,nhunzaker,nhunzaker,nhunzaker,nhunzaker,jddxf,gaearon",2016-11-17 13:38:26,2018-01-05 15:29:47
PR,Handle composition events in ChangeEventPlugin,This PR attempts to fix 3926,,"gaearon,gaearon",2016-11-28 13:24:59,2018-01-05 15:33:25
PR,Passing props to custom elements as properties instead of attributes,This pull request introduces a breaking change to how React handles custom elements web components The change is that React props are currently passed to custom elements via setAttribute but now are passed as properties on the dom element itself See discussion in 7901 specifically this comment issuecomment 256755466 where indicated that this change would be part of the next major release of React Since react 16 0 0 alpha was released yesterday and is on the master branch I'm hoping that now is the right time for this breaking change to make it into the master branch I'm not sure if anyone else was planning on implementing this or not Notes This makes it a lot easier to pass non string data down to custom elements e g objects can be passed without getting stringified to Object object Instead of custom element ref el el myProp myProp you can just do custom element myProp myProp This does not solve the problem of how to interoperate with events fired by custom elements If this pr is merged I will follow it up with another one to tackle that problem using the proposed solution in 7901 as a guide I am not doing Object assign element props like suggested because that does not delete any props that are passed conditionally to the custom element Also Object assign element props bypasses the events recorded in ReactHostOperationHistory which seems like another reason against doing so Not sure if ReactHostOperationHistory is important or not for custom elements though I did not change the corresponding ReactDOMFiberComponent because I was not sure if I should do so The linter was broken for me on the master branch before I made any changes but my changes did not introduce any new warnings or errors as far as I can tell,,"gaearon,sebmarkbage,gaearon",2017-01-11 22:23:46,2018-01-05 15:35:00
PR,add srcObject for getUserMedia,srcObject is useful when use video elements in webRTC video chat video srcObject stream is standard and well implemented you can use video src URL createObjectURL stream but it is a hack and deprecated do not use it video srcObject stream is better neat and clean,,"aweary,aweary,syranide,syranide,aweary,gaearon,gaearon,gaearon",2017-03-10 01:07:55,2018-01-05 15:38:44
PR,Boolean attributes no longer coerced to string,From 9230 this abides by the HTML5 spec mentioned in the issue This issue was left in an unsure state and I wanted to try my first contribution,,"aweary,syranide,aweary,aweary,syranide,nhunzaker,nhunzaker,aweary,gaearon",2017-05-25 18:02:29,2018-01-05 15:46:01
PR,5626 add onLoad and onError events to SVG element,Simple fix for 5626 test but still few other SVG element events are missing,,"Simek,nhunzaker,nhunzaker,nhunzaker,Simek,nhunzaker,nhunzaker,Simek,gaearon",2017-05-07 17:41:41,2018-01-05 15:46:34
PR,Mouse enter leave,Updated version of 5762 maybe there is a new failing test tho with fiber cc,,"jquense,nhunzaker,jquense,jquense,sebmarkbage,jquense,sebmarkbage,gaearon",2017-05-31 21:45:35,2018-01-05 15:47:33
PR,Address issues where ID of nodeName causes internal errors in React,This is a continuation of More or less using nodeName as an ID on an input causes references to the nodeName prototype property to be overriden I have rebased is original PR and added some test coverage I have also browser tested this against IE11 Firefox Safari and Chrome I would like to test down to IE9 however it looks like I need the Set polyfill on our DOM fixtures Is there a preferred method of adding the Set polyfill,,"nhunzaker,sebmarkbage,nhunzaker,nhunzaker,nhunzaker,nhunzaker,nhunzaker,nhunzaker,nhunzaker,sebmarkbage,sebmarkbage,nhunzaker,aweary,nhunzaker,aweary,gaearon",2017-06-30 01:30:03,2018-01-05 15:47:47
PR,pass host context to finalizeInitialChildren,I m sorry i didn t include a test i wasn t sure where or how to confirm this in one I m happy to add it if someone has a sense on where to stick it for reference for the change discussion r159418200,,jquense,2018-01-05 14:21:24,2018-01-05 15:52:20
PR,Add output size check in CI,What Basically this in the terminal and CI logs Why This will help in keeping the library tiny How 1 Added bundlesize as a dev dependency 2 Added bundlesize in npm test There is a tiny bit of configuration needed The config sits inside package json the threshold is set to 10kB right now Sadly bundlesize does not build status for circleCI yet I will work on it and submit another PR which gives you this img src width 500px,,"gaearon,gaearon,gaearon,gaearon",2017-07-01 15:39:13,2018-01-05 15:52:38
PR,Controlled inputs do not synchronize value or checked attribute,This commit is a follow up to prior work to resolve issues with number inputs in React discussion r108826984 More or less A can of worms The discussion above concluded that React should not synchronize the value attribute checked attribute for controlled inputs This PR makes that change More info Currently inputs keep their value checked attribute in sync with the value checked property This is a React behavior Traditionally browser DOM manipulation does not rely on keeping the value checked attribute in sync It is also very problematic for number inputs and I believe a few other obscure input bugs in IE iOS Safari this needs to be confirmed After discussion it was decided to make a breaking change to no longer sync up the value checked attribute with it is associated property For this to work I made the following changes The value defaultValue checked and defaultChecked properties are now maintained within the HTML property config defaultValue maps to the value attribute as does defaultChecked to checked required adding a filter to strip out the value property on selects and textareas The logic to defer assignment of the value attribute has been removed form ChangeEventPlugin How to test this change I have pushed a build of this version of React for our DOM fixtures here,,"nhunzaker,nhunzaker,gaearon,nhunzaker,jquense,gaearon,aweary,syranide,gaearon,nhunzaker,sebmarkbage,nhunzaker,gaearon",2017-07-11 23:22:48,2018-01-05 15:58:09
PR,Remove mouse enter leave polyfill and add native event,rel I m starting with this and getting the tests to pass I m a bit unsure if there is more needed for the Portal case but I believe the existing tests for that pass right now I wasn t sure if complicating SimpleEventPlugin made sense or if maybe it s worth splitting that into two PhasedEventPlugin and DirectEventPlugin or something,,"jquense,aweary,jquense,aweary,aweary,jquense,aweary,jquense,aweary,jquense,jquense,sebmarkbage,sebmarkbage,jquense,gaearon",2017-07-21 15:07:31,2018-01-05 16:00:43
PR,WIP Native mouse enter leave with portal support,do not merge This is a POC for doing mouseenter mouseleave type events with support for portal subtree bubbling The code is not clean nor is it in the right places I wanted to get something up demonstrating what it takes to make this work to see if it s worth it,,"jquense,jquense,gaearon",2017-07-24 21:47:16,2018-01-05 16:02:06
PR,Added componentStackFrames property to error info object,We pass a componentStack string property to the injected error dialog and the componentDidCatch lifecycle method This string is pre formatted string to match the error stack string for logging convenience However this approach requires parsing in order to do anything beyond basic logging This PR adds a new componentStackFrames property to both of the above methods It is loosely based on the TC39 error stack strawman This new property looks like this In addition to adding basic tests for this property I have also updated our fixtures to expose it screen shot 2017 08 17 at 5 17 48 pm Resolves 10461,,"bvaughn,bvaughn,sebmarkbage,sebmarkbage,bvaughn,sophiebits,sebmarkbage,bvaughn,sebmarkbage,bvaughn,bvaughn,gaearon,bvaughn,gaearon,bvaughn,gaearon,bvaughn,gaearon,gaearon",2017-08-18 00:25:06,2018-01-05 16:03:00
PR,New API for top level updates,Introduces an additional new API for performing top level updates in React DOM Will fill in with more details later regarding motivations and use cases I had thought we might be able to implement the existing API ReactDOM render on top of the new API but the semantics of the then callback are sufficiently different that I do not think it is possible without a breaking change Work in progress x ReactDOM unstable createRoot that returns a public root instance Replaces hidden reactRootContainer field x Work type that represents a top level update Has then and commit methods x work commit synchronously flushes all remaining work x Pre rendering in one tree should not block updates in a separate tree x Completion callbacks then resolve synchronously if tree is already complete x Committing one tree should not flush updates in a separate tree x Figure out how hydration fits into this x Lazy containers x Namespace parameter x Owner document parameter x Things that are done but need tests to confirm x Rendering before DOM container is available Depends on expiration times PR,,"acdlite,sebmarkbage,sebmarkbage,acdlite,acdlite,acdlite,sebmarkbage,acdlite,gaearon,acdlite,acdlite,gaearon",2017-09-06 18:33:02,2018-01-05 16:16:38
PR,Remove implicit casts of Fiber to bool,In a couple places I used weak equals particularly element owner either null from ReactCurrentOwner or undefined if it is not present at all event dispatchInstances from event system where typing is sloppier and ChangeEventPlugin which mixes null undefined Everywhere else I did strict and believe that it is safe Methodology run tests with this patch and fix all errors,,"sophiebits,gaearon,sophiebits,sophiebits,sophiebits,gaearon",2017-09-11 03:19:47,2018-01-05 16:17:34
PR,docs Clarify callback function behavior for ReactDOM render,Feel free to re word this but the behavior of the callback function should be clarified I was initially trying to use it like this,,"nikolas,gaearon",2017-09-13 15:53:59,2018-01-05 16:19:01
PR,Move ref callback implementation outside JSX,In the first code snippet this document says the preferred way of ref callback is an inline function Although the document comments side effect by the inline callback is negligible at Caveats section at least it should not encourage users to make inline callbacks So I turned all the inline ref callbacks in the document into bound methods on the class I believe this change makes document is stance regarding callback more consistent Handling Events guide also discourages callbacks as inline functions,,"gaearon,gaearon",2017-09-15 15:31:42,2018-01-05 16:19:21
PR,WIP Track and set eventPhase for directional dispatches,Fixes Still need to add tests and verify if I should be setting dispatchPhases for other dispatchers or not Also I'm not sure if we actually care to do this per the discussion in cc what do you think is it worth it,,"aweary,gaearon",2017-09-16 00:59:54,2018-01-05 16:20:12
IS,Synthetic eventPhase does not reflect the synthetic phase,Do you want to request a feature or report a bug Bug What is the current behavior Both onClick and onClickCapture called on bubbling phase If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template Demo shows that event phase in onClickCapture for react is incorrect it is bubbling but must be capturing Moreover event nativeEvent also shows bubbling phase so probably the reason is not in syntethic event console output What is the expected behavior onClickCapture calls during capturing phase onClick calls during bubbling phase Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React react version 15 5 4 os win7 did this work do not know,,"gaearon,gaearon,aweary,gaearon",2017-05-26 08:21:45,2018-01-05 16:21:35
PR,issues 10085,Nope I have not done linting flow and have not fixed the test This is a draft for discussion not for merging Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 If you have added code that should be tested add tests 3 If you have changed APIs update the documentation 4 Ensure the test suite passes npm test 5 Format your code with prettier npm run prettier 6 Make sure your code lints npm run lint 7 Run the Flow typechecks npm run flow 8 If you have not already complete the CLA,,"gaearon,gaearon,gaearon",2017-09-18 16:23:06,2018-01-05 16:23:42
PR,Inline DOM property configs,This replaces DOM injections with static switch cases I think this is a lot simpler to follow See individual commits I took the strategy of getting rid of individual properties on the injected configs then getting rid of getPropertyInfo branching calls and finally removing the configs,,"gaearon,aweary,aweary,aweary,aweary,gaearon,gaearon,gaearon,gaearon,nhunzaker,jquense,aweary,nhunzaker,nhunzaker,nhunzaker,aweary,aweary,aweary,aweary,aweary,gaearon,trueadm,gaearon,gaearon,nhunzaker,gaearon,gaearon,aweary,gaearon",2017-09-24 20:55:12,2018-01-05 16:27:29
PR,Adding onSelectionChange,Hi everyone This PR definitely is not ready to go in yet tests code style and CLA all still need to be completed but I wanted to get it up here to try and foster some discussion Currently there is no way to listen to the selectionchange event unless you do it outside the React Event System I was wondering if there was room to add that functionality I know that the current onSelect plugin is a bit different then the actual select event listener And that it actually will try to use selectionchange if possible I was not sure if this improvement would require a whole new type of event or if we should just augment onSelect Thoughts,,gaearon,2017-09-19 11:10:07,2018-01-05 16:28:26
PR,Clarify preferred props default to true expr,The current text is ambiguous without reading further into the paragraph until I re read this text I was trying to avoid using the former eg props default to true we do not recommend using this This latter interpretation could still be wrong so feel free to adjust the PR if I have misunderstood things,,gaearon,2017-09-22 01:31:17,2018-01-05 16:29:07
PR,Add TRADEOFFS md,The content here is mostly copied paraphrased from from a twitter thread the other day I saw that Babel had an issue open adding a Tradeoffs md I thought it would be great thing to add to the React repo as well Maybe we want to move it to the docs directly but I thought i d get something started spur some conversation and make this more of a community endeavor I intentionally left the pros sparse for the time being since I don t think we ll all have much trouble enumerating them,,"jquense,gaearon,jquense,gaearon",2017-09-25 14:01:32,2018-01-05 16:30:55
PR,enables ctrl enter for keypress event on browsers other than firefox,The keypress synthetic event guards against non printable keys sent from firefox It makes an exception for the Enter key since it can be printable When the ctrl key is pressed the charCode for Enter is 13 in firefox but 10 in other browsers This fix enables ctrl Enter keypress on other browsers It does not modify the event itself just returns 13 when charCode 10 referenced in issue 10515,,"jquense,syranide,syranide,aweary,aweary,clemmy,jquense,gaearon,nhunzaker",2017-08-23 04:46:38,2018-01-05 16:31:25
PR,Garbage collection,Adds lifecycle methods that are invoked during the complete phase These can be used to prepare external resources like subscriptions before work is committed Corresponding lifecycle methods are invoked if work is dropped without committing Otherwise the normal commit phase lifecycles componentDidMount componentDidUpdate are called In theory the same underlying mechanism could be used to create and destroy persistent Yoga views in React Native without leaking memory The complete phase lifecycles are unstable prepareMount unstable prepareUpdate The garbage collection lifecycles are unstable abortMount unstable abortUpdate To avoid memory leaks every call of a prepare lifecycle must have either a corresponding commit phase lifecycle or a corresponding abort lifecycle TODO Dropped trees do not need to be garbage collected immediately Defer by scheduling a callback Requires refactoring to give createWorkInProgress access to the scheduler Based on top of my other open async PRs Relevant work starts with the commit titled Garbage collection,,"acdlite,clemmy,acdlite,acdlite,gaearon",2017-10-01 05:46:28,2018-01-05 16:33:45
PR,Throw better error when rendering into parentless commentNode,We have come across a use case where React renders into a comment node with no parent and this code assumes that there is always a parent node for a comment node what is the change Instead of trying to succeed somehow when rendering into a commentNode which has no parent we should throw an informative error Changes the test to check for the informative error Also updates the test to use a valid commentNode previously the test was failing because apparently you need the commentNode to have the text ' react mount point unstable ' and not just areact mount point unstable' why make this change To debug and mitigate effect of bug reported in test plan yarn test src renderers dom shared tests ReactMount test js issue See internal task,,"flarnie,aweary,gaearon,gaearon,flarnie,flarnie,flarnie,gaearon,flarnie,gaearon,gaearon,gaearon,flarnie,gaearon,flarnie,gaearon",2017-10-02 20:34:47,2018-01-05 16:35:15
PR,Use lower case for HTML attributes,It does not really matter because HTML is case insensitive but people prefer it Fixes,,"gaearon,nhunzaker,gaearon,nhunzaker,gaearon,nhunzaker,nhunzaker,gaearon,gaearon,nhunzaker,syranide,gaearon,sebmarkbage,syranide,gaearon,gaearon",2017-10-05 13:43:08,2018-01-05 16:37:39
IS,React 16 does not lowercase HTML attributes in generated HTML,Do you want to request a feature or report a bug Bug What is the current behavior ReactDOMServer generates camelCased markup for the cellSpacing and cellPadding attributes table cellSpacing 1 cellPadding 2 table Here is an example pen I believe these attributes are canonically lowercased If I lowercase the attributes in JSX React warns that I'm not using the right names What is the expected behavior The attribute names would be rendered lowercase table cellspacing 1 cellpadding 2 table Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React This is in 16 0 0 Prior versions of React stripped these attributes,,"gaearon,gaearon,gaearon",2017-09-27 05:07:15,2018-01-05 16:38:58
PR,Fail gracefully when comment container is detached,Fixes 11067 Not much we can do here but it kinda sucks for us to fail hard IMO this is the most reasonable thing we can do,,"sophiebits,sebmarkbage,sebmarkbage,sophiebits,sebmarkbage,sophiebits,gaearon",2017-10-06 01:12:43,2018-01-05 16:40:24
PR,Work in progress Blockers,Working on feature where a child can block the tree from committing,,"acdlite,gaearon",2017-10-07 02:46:30,2018-01-05 16:41:01
PR,Add unregister feature to ReactNativePropRegistry,This allows objects registered with ReactNativePropRegistry to be later unregistered to free up memory so StyleSheet can support semi static styles that are mostly static but have situations they become known to be unused It is still possible for this to work should native code starts caching props from the registry In that case ReactNativePropRegistry unregister would just keep a temporary blacklist of unregistered ids that would be passed to native code and the blacklist would be cleared as native removes things from its cache The motivation for this and rationale for semi static props is explained in facebook react native issues 15899,,"dantman,sebmarkbage,dantman,sebmarkbage,dantman,gaearon",2017-10-11 04:04:28,2018-01-05 16:41:32
PR,Accept React attributes on custom components,Hi there It seems that currently if you pass a React attribute to a custom component it does not replace it with the html counterpart but just renders it as text For example Apparently that is by design since we found that there are tests L667 L670 explicitly checking this behaviour Do you really think that this should work the way it is It feels a bit strange that for custom components you would need to use class instead of className thanks for the pairing session Cheers,,"sebmarkbage,gaearon",2017-10-13 14:22:43,2018-01-05 16:42:22
PR,Add React Children find method,Related to 9834 This is my first contribution to this repo so let me know if I'm missing anything I'm not sure where how the documentation is generated so I only added doc style comments to the added function but I can work on it too if it is in a different place I'm not satisfied yet with the code duplication from the traverseAllChildrenImpl so I'm going to try and add a testFunc argument to traverseAllChildrenImpl so that React Children find reuses it Any feedback is appreciated I have reused traverseAllChildrenImpl to minimize code duplication The trade off is that now that function is a bit more complex with all the if else branches from the isFinding mode and that it returns either a number or the child depending on the mode Let me know if code duplication is preferred instead or another solution,,"gaearon,gaearon",2017-10-14 10:26:09,2018-01-05 16:42:44
PR,Adding code property to SyntheticKeyboardEvent with test,This is about feature request 11306,,"aweary,syranide,gaearon",2017-10-22 17:16:29,2018-01-05 16:45:09
PR,WIP fix SelectEventPlugin reset mouseDown after drop event fires,This PR most probably is not ready it is rather intended to fix or at least highlight the problems of The problem is that mouseDown never gets reset after the drop event since this plugin never receives topMouseUp as topLevelType when dropping What I did here fixes the problem but I feel like the proper solution would be to make sure that the topMouseUp event is received,,gaearon,2017-10-26 22:56:31,2018-01-05 16:46:17
PR,Fix mouseenter event,Fix for,,"Andarist,Andarist,gaearon,jquense,gaearon,jquense,gaearon,jquense,gaearon,jquense",2017-07-11 22:51:17,2018-01-05 16:54:46
PR,track each individual file that has already been annotated with flow,A start to 11328 Specifically based on issuecomment 338956385 I think ideally this would be a more tabular format but I'm not sure if it is worth breaking the previous format of single line additions I'm open to suggestions It also might be nice to log files that we have left to type annotate instead of files that are already done That way it is easier to see what work still has to be done The new format would look something like,,"MatteoVH,gaearon,MatteoVH,gaearon,MatteoVH",2017-11-10 21:59:46,2018-01-05 16:58:37
PR,fix error when has the element id is 'nodeName',When there is an dom element id 'nodeName' window nodeName will be filled with element Which caused react dom select input textarea check function failed Add check logic to skip window,,"zombieJ,zombieJ,gaearon,gaearon,zombieJ,gaearon",2017-11-13 12:43:59,2018-01-05 16:59:59
PR,DO NOT MERGE Investigate switching out event delegation for direct attachment mostly,This PR replaces the traditional event delegation technique employed by React with direct attachment to DOM nodes This is just an investigation I'm attracted to it for a number of reasons 1 We can remove a lot of code 2 This is another way of addressing scroll jank issues 3 This might fix some issues with disabled interactive element bubbling I do not know 4 I might discover a nice middle ground that is ultimately better Intuitively event delegation should be faster It does less work However I want to figure out how much faster it really is particularly on weaker devices and IE 9 10 I'm curious about Start up time Memory usage Ongoing update costs I put up a build here production development Now to find some benchmarks,,"nhunzaker,jquense,jquense,jquense,nhunzaker,nhunzaker,nhunzaker,nhunzaker,nhunzaker,nhunzaker,jquense,jquense,jquense,nhunzaker,nhunzaker,nhunzaker,jquense,syranide,nhunzaker,nhunzaker,gaearon,nhunzaker,jquense,gaearon,jquense",2017-11-14 02:02:56,2018-01-05 17:02:10
PR,RFC Add a new React createRef API for ref objects,This PR adds a new API into the react package and the relevant logic to support this in react dom along with tests The ideas behind this stem from this issue from Currently we offer two ways of using refs in React string refs and callback refs In the future we would like to deprecate and remove string refs from React I'm proposing this PR as replacement for string refs that provide similar functionality to how they currently work but without many of the issues that string refs currently have a list of them can be found at 1373 The React createRef API will create an immutable object ref where it is value is a mutable object referencing the actual ref Accessing the ref value can be done via ref value An example of how this works is below This alternative API should not provide any big real wins over callback refs other than being a nice convenience feature There might be some small wins in performance as a common pattern is to assign a ref value in a closure created in the render phase of a component this avoids that even more so when a ref property is assigned to a non existent component instance property,,"trueadm,trueadm,trueadm,koba04,milesj,gaearon,trueadm,gaearon,gaearon",2017-11-14 17:20:13,2018-01-05 17:05:31
PR,Add key validation to React Children toArray,Addresses This warns only on React Children toArray I do not think the other children helper methods forEach map and count are dangerous,,"clemmy,gaearon,aweary,clemmy,clemmy,gaearon,gaearon",2017-11-15 01:52:06,2018-01-05 17:07:05
PR,Set correct event type into SimulateNative methods,This commit fixes an issue where events generated by the test utils had no type These events are not real DOM Event objects and their constructor did not assign the provided event type property This through me for a bit of a loop because I did not realize the Event class was defined locally to this module that it was not a DOM event I have renamed this constructor to FakeNativeEvent for clarity Additionally it looks like the Event object was being constructed with the top level type topClick vs click This commit ensures that ReactTestUtils Simulate and ReactTestUtils SimulateNative correctly assign the event type Why does this matter Working through which evaluates assigning local listeners instead of event delegation one of the biggest pieces of overhead is the dispatchEvent bind topLevelType done for every event attachment L130 I believe we could just use the event type avoiding the cost of the bind Other questions Do we need a fake event constructor Is it incorrect for ReactTestUtils SimulateNative to dispatch a fake DOM event instead of just using the DOM Event constructor,,"nhunzaker,gaearon",2017-11-15 12:38:21,2018-01-05 17:08:02
PR,Reworded invalid DOM property warning message 11570,This PR addresses issue 11570 which rewords the warning message invalid DOM property to be less obnoxious I tried to avoid making the warning message too long and focused on 3 points 1 The reason the warning was displayed Invalid DOM property class 2 Why In React all properties should be camelCased to avoid issues with JavaScript reserved words such as class 3 How can I fix it Did you mean tabIndex It could be expanded more by adding the exceptions to the rule as well which are data and aria attributes or mentioning that the camel case naming convention also helps to avoid confusion between HTML attributes,,"skiritsis,skiritsis,gaearon,gaearon",2017-11-16 22:32:59,2018-01-05 17:15:52
PR,Move class component code to BeginWork,Based on top of 11580 The existing separation between the BeginWork module and the ClassComponent module is awkward There is some redundant code and over abstraction that is eliminated by colocating class component logic with the same logic for other types of work Specifically anything related to bailouts or reconciliation should be in BeginWork Lifecycle related code is kept in the separate module since it is unique to class components In a future WASM implementation this would be the boundary between the reconciler and JS This will make future refactors of the begin phase easier since all the code is in the same place,,"acdlite,sebmarkbage,sebmarkbage,gaearon",2017-11-18 01:06:04,2018-01-05 17:20:16
PR,Remove IE8 event target polyfill via srcElement,Just noticed it seems like srcElement is IE8 only Not actually sure we want to do this until we remove the attachEvent call in EventListener,,"gaearon,nhunzaker,gaearon",2017-11-10 13:50:46,2018-01-05 17:21:34
PR,fix regression with non object iterables functions being renderable,x Fork the repository and create your branch from master x Run yarn in the repository root x If you have fixed a bug or added code that should be tested add tests x Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development x Format your code with prettier yarn prettier x Make sure your code lints yarn lint Tip yarn linc to only check changed files x Run the Flow typechecks yarn flow x If you have not already complete the CLA This closes 11396 I noticed a few other spots where there would be issues with non object iterables could cause problems and added checks for those as well,,"kentcdodds,kentcdodds,gaearon,gaearon,kentcdodds,kentcdodds,gaearon,kentcdodds,kentcdodds,gaearon",2017-11-21 19:02:01,2018-01-05 17:22:39
PR,Update HTTP to HTTPs in CHANGELOG md,Several URL were updated to use HTTPS protocol in CHANGELOG md Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Run yarn test prod to test in the production environment It supports the same options as yarn test 6 Format your code with prettier yarn prettier 7 Make sure your code lints yarn lint Tip yarn linc to only check changed files 8 Run the Flow typechecks yarn flow 9 If you have not already complete the CLA Learn more about contributing,,him2him2,2017-11-22 22:11:44,2018-01-05 17:26:53
PR,Fixed potential false positive in toWarnDev matcher,Spying on console error or console warn will now fail tests by default with an error suggesting the use of the new toWarnDev matcher instead This has been removed Updated toWarnDev matcher to report a failed expectation to Jest even if an Error was thrown by its callback Giving precedence to failed expectations prevents a thrown error from potentially masking failed expectations and removes a source of potential false positives from our tests As of this point all but 2 of our tests have been updated to the new matcher ReactIncrementalErrorLogging test internal There is one test case that I'm unsure of how to update I will look at it again tomorrow ReactDOMServerIntegrationTestUtils It is possible to update this test util but it will take time since several procedurally generated tests use it For the time being I have added a TODO comment for following up on it,,"bvaughn,bvaughn,gaearon",2017-12-20 20:59:14,2018-01-05 17:44:45
PR,Updated misleading error message in production environment when adding ref to a functional component 11761,I have followed the execution flow backwards from the stack trace thrown by the invariant which by the way looks like,,"skiritsis,gaearon,skiritsis,gaearon,skiritsis,gaearon",2017-12-06 05:28:00,2018-01-05 18:07:59
IS,Fix the misleading error message in production,See this test case L142 L157 Pretty sure the different message in production was not intentional but is a consequence of ReactCurrentOwner current not being set in production for functional components We need to see if it is possible to emit the same useful message both in development in production If it is not possible we need to change the production message to be more ambiguous instead of suggesting the wrong reason for the problem,,"gaearon,gaearon,skiritsis,gaearon,gaearon",2017-12-04 14:51:21,2018-01-05 18:08:21
PR,Clarify reason for setTextContent helper,Some little thing s I noticed referencing the code here writing some of react dom lite,,"jquense,jquense,nhunzaker,nhunzaker,jquense,nhunzaker,nhunzaker,jquense,trueadm,nhunzaker,jquense,jquense,syranide,syranide,syranide,jquense,gaearon,jquense,trueadm,jquense,syranide,trueadm,trueadm,syranide,trueadm",2017-12-08 19:52:48,2018-01-05 18:10:13
PR,Get selection start test,Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Run yarn test prod to test in the production environment It supports the same options as yarn test 6 If you need a debugger run yarn debug test watch TestName open chrome and press Inspect 7 Format your code with prettier yarn prettier 8 Make sure your code lints yarn lint Tip yarn linc to only check changed files 9 Run the Flow typechecks yarn flow 10 If you have not already complete the CLA Learn more about contributing,,"jquense,gaearon",2017-12-09 09:25:49,2018-01-05 18:11:47
PR,Support onLoad and onError on link,This PR add onLoad and onError to link component HTML spec Similar to probably just miss it when migrating to Fiber Added unit test related to this case we probably want to add more for other component such as object iframe as well Before screen shot 2017 12 10 at 9 26 32 pm After screen shot 2017 12 10 at 9 27 22 pm link preload such as link rel preload href external css as style onLoad this rel istylesheet' should work,,"roderickhsiao,nhunzaker,nhunzaker,nhunzaker,roderickhsiao,roderickhsiao,roderickhsiao",2017-12-11 05:39:34,2018-01-05 18:14:17
PR,Work around IE Edge bug when rendering inputs in separate windows via portals,Contributing checklist X Fork the repository and create your branch from master X Run yarn in the repository root If you have fixed a bug or added code that should be tested add tests X Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development X Run yarn test prod to test in the production environment It supports the same options as yarn test X If you need a debugger run yarn debug test watch TestName open chrome and press Inspect X Format your code with prettier yarn prettier X Make sure your code lints yarn lint Tip yarn linc to only check changed files X Run the Flow typechecks yarn flow X If you have not already complete the CLA Problem Issue Input element in a portal was throwing error only when tested on IE 11 Edge 15 Edge 14 Sample jsfiddle Solution Moved enumerable descriptor to another defineProperty of same node object there are no side effects to this as The Object defineProperty method defines a new property directly on an object or modifies an existing property on an object and returns the object This seems to solve the problem for the browsers mentioned above,,"M-ZubairAhmed,M-ZubairAhmed,gaearon",2017-12-16 21:45:38,2018-01-05 18:32:44
PR,Enhance React Children only to specify number of children 1,Hey all First time touching this repo so sorry if this is a duplicate PR or anything is out of place please close if so I have completed all the steps listed in the PR notes This PR simply adds a second optional param to React Children only to check for children of a specified length Note 1 Let me know you want me to verify that the count param is 1 explicitly 2 I would like to add more helpful error messages with parameter info included but the linter fails due to The second argument to invariant must be a string literal Use Case s eitherx L17,,gaearon,2017-12-19 03:08:38,2018-01-05 18:34:14
PR,Remove extra loop,Am I just off base here It looks like the for loop is condition is the inverse of the while loop Presumably parents will have no other elements in it with cached instances since that is the condition for building said array,,"jquense,jquense,nhunzaker,nhunzaker,jquense,nhunzaker,jquense,aweary,aweary,jquense,gaearon,gaearon",2017-12-19 16:31:52,2018-01-05 18:35:44
PR,Reduce the handleTopLevel event code indirection,This does not measurably change anything but makes the code clearer in my opinion Previously we had ReactEventEmitterMixin that exported a single handleTopLevel helper This function was re exported from specific modules like ReactBrowserEventEmitter and ReactNativeEventEmitter The mixin naming refers to it previously being Object assign ed although it is not the case anymore since we migrated to ES Modules I noticed that the mixin is extremely tiny and just calls two functions on EventPluginHub At first I wanted to inline it into the specific emitters but then I realized I might just put it into EventPluginHub This got me thinking why do we even expose enqueueEvents and processEventQueue from EventPluginHub Because we use them from handleTopLevel and a few other places But now that handleTopLevel is in EventPluginHub can we unify other callers behind a single method too It turns out that they are always called one after another so they might as well be unified into a single method I did just that and called it runEventsInBatch In the second commit I realized that there is no need to inject handleTopLevel dynamically because it is always known statically and we no longer rely on overriding it from tests fixed in So I hardcoded it instead In the third commit I renamed handleTopLevel to runExtractedEventsInBatch to make it clear that it is equivalent to runEventsInBatch for the extracted events I also removed a bunch of module redirects and changed the callers to import it from EventPluginHub directly since neither of the redirect sites actually did anything with the arguments,,"gaearon,gaearon,gaearon,jquense,gaearon,nhunzaker,nhunzaker,gaearon,nhunzaker",2017-12-22 21:31:44,2018-01-05 18:37:14
IS,State initialization disparity between shallow renderer and ReactDOM,Do you want to request a feature or report a bug Bug What is the current behavior The shallow renderer defaults a class component is state to empty object if it is not set Real renderers do not seem to do this so a component can render successfully in the shallow renderer but fail at runtime in the browser with a null reference error If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Here is ReactDOM is behavior crashes reading an uninitialized state value Here is the shallow renderer behavior component able to render What is the expected behavior They initialize state in the same way Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 This was not an issue in React 15,,gaearon,2018-01-04 22:38:24,2018-01-05 18:44:45
PR,Fix state initialization for shallow renderer,Fixes 11964,,gaearon,2018-01-05 01:28:00,2018-01-05 18:44:45
IS,ShallowRenderer not considering contextTypes when rendering children,Do you want to request a feature or report a bug Bug What is the current behavior ShallowRenderer not considering contextTypes Note I was not able to easily include react test renderer in a fiddle so I include a unit test Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React This bug is for version 16 We are upgrading from React 15 we were using enzyme shallow rendering and this was not the behavior It is difficult to say which part of the code has changed between React 15 and enzyme at this point but my code sample includes only code from react libraries,,gaearon,2017-12-15 12:26:55,2018-01-05 18:49:58
PR,ShallowRenderer should filter context by contextTypes,Fix 11862,,"koba04,koba04",2017-12-26 14:55:03,2018-01-05 18:49:58
PR,topLevelUpdateWarnings is only for dev mode hence not necessary to have extra dev mode check,,,,2017-12-27 01:16:35,2018-01-05 18:51:03
IS,Add method to remount component,Do you want to request a feature or report a bug A feature I imagine this might have been brought up before but I could not find any discussions on this after extensive searching What is the current behavior Working with certain non react 3rd party libraries sometimes require you to remount a dom node i e dumping it and creating it from scratch Currently the only way seems to be to change its key prop either by incrementing it or by generating some random uid However that feels like a hacky way of implementing that behavior I have had this issue before when working with the YouTube Player API and now with an SVG drawer library I wish there was a cleaner react way of doing this What is the expected behavior It would be nice if we could do something like this forceRemount or perhaps better from the parent via refs this someRef forceRemount which would have the same effect as changing said components key prop,,gaearon,2018-01-05 10:22:07,2018-01-05 18:54:02
PR,Disable coverage again,Updating to Jest 22 caused coverage to OOM again,,gaearon,2018-01-05 18:56:11,2018-01-05 18:59:13
IS,setState callback is being called even if the state has not been changed,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug A bug What is the current behavior As to React 16 breaking changes breaking changes setState callbacks second argument now fire immediately after componentDidMount componentDidUpdate instead of after all components have rendered and setState documentation setstate The second parameter to setState is an optional callback function that will be executed once setState is completed and the component is re rendered So I assume that if the component is not re rendered the setState callback wo not be called as well If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below What is the expected behavior The setState callback wo not be called Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 0 Did not try on previous versions,,"gaearon,gaearon",2018-01-04 12:27:45,2018-01-05 19:25:12
IS,Is render pure or not pure,Here you write render that render has to return the same result every time The render function should be pure meaning that it does not modify component state it returns the same result each time it s invoked The very next part you write motivation that render can never return the same result On the next state or props update that render function will return a different tree of React elements So is render pure or not pure,,gaearon,2018-01-04 04:45:05,2018-01-05 19:25:29
IS,Point production build at un minified file,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Feature What is the current behavior When NODE ENV 'production' react L4 and react dom L35 both point to their respective minified production builds In the context of being included in a larger bundle this is undesirable because minifying an entire bundle at once produces slightly smaller output than when its constituent pieces have already been minified What is the expected behavior I understand the desire to keep React small by default and clearly gate the dev prod builds but would you consider pointing at an un minified production build instead Sorry if this has been discussed elsewhere I could not find any issues Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React This was introduced when the NODE ENV check was simplified to point at separate builds,,"gaearon,gaearon",2017-12-28 16:52:13,2018-01-05 19:44:51
IS,Consider making pure unwrapped fragment,Note if the issue is about documentation or the website please file it at Feature request Currently if we pass Fragment with children to any custom component this component gets that fragment as a child That means in all components where children is being altered cloned we need to check first that each item is a fragment first and if it is take its children instead of itself This was a little unexpected because after reading the documentation the impression was that Fragment is a pure abstraction on the caller side that Fragment does not propagate down to components but only its children In the same time it is understandable because Fragment might have more supported props in the future that receiving component might want to read But fragment shortcut will not have props it will always mean pure abstraction to group its children to show them by condition for instance So maybe react could unwrap its children right away when elements are created and pass them down as set of children merge with another children on the same level React 16 2,,"gaearon,gaearon,clemmy,gaearon",2017-12-14 20:32:57,2018-01-05 20:24:52
IS,warning on stateless functional high order component,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug BUG What is the current behavior warning on Stateless Functional High Order Component If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below What is the expected behavior no warning Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 2 0 Yes it worked in previous versions,,"gaearon,gaearon",2018-01-05 20:17:10,2018-01-05 20:55:17
IS,inline style with decimal numbers,Do you want to request a feature or report a bug bug What is the current behavior If the style prop is passed a decimal number react converts the dot in a comma resulting in an invalid css value I suspect this might be due to my locale being different from english but the behavior should be the same irregardless of the user is locale and the conversion is correct if I use String 12 34 If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem img width 150 alt schermata 2017 11 12 alle 12 12 46 src What is the expected behavior decimal numbers should be always converted with a dot Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React react version 16 x 0 os macos 10 13 1 browsers chrome 62 safari 11 0 1 firefox 58 0 beta 1 is unaffected,,"gaearon,gaearon,gaearon,gaearon,gaearon",2017-11-12 11:12:05,2018-01-05 21:09:52
IS,ctrl Enter keypress only works in firefox,It does not work in chrome IE 11 edge nor chrome on Ubuntu these browsers report a charCode of 10 and the event dispatcher dismisses it I have made a pull request with an unobtrusive fix here 10514,,gaearon,2017-08-23 05:42:46,2018-01-05 21:10:21
IS,scryRenderedDOMComponentsWithTag throws error on FF 43 0 4,If the name of the input field is props this test fails Anything else seems fine Only in FF though,,gaearon,2016-01-13 22:09:28,2018-01-05 21:19:18
PR,Optimize escaping of IDs,I did some preliminary profiling of React 16 SSR and I found something very similar to what I found in 6862 that escaping IDs was taking an inordinate amount of time I wrote a similar solution that shortcuts for strings that do not have characters to escape and loops over matches With this new implementation I was able to make my admittedly rather synthetic SSR benchmark run about 20 faster I tried to run the react benchmark in scripts bench to see if it agrees with my benchmark but it gives me errors that the chrome launcher module does not exist I think this is because lighthouse is code has been reorganized and fixing the benchmark seemed a little out of scope for this PR If anyone knows how to get the benchmark running I would appreciate the info,,"aickin,sophiebits,aickin,aickin,syranide,aickin,gaearon,aickin,gaearon",2017-12-04 01:42:57,2018-01-05 22:50:37
IS,Drawer in react material ui,I am a beginner in react and I am having problems applying the drawer in my project in case I have an appbar and I configured the drawer to open with it but it is not working and presenting the following errors React createElement type is invalid expected to string for built in components or a class function for composite components but got undefined you might have mixed up default and named imports 'handleToggle' is assigned a value but never used handleClose 'is assigned value but never used PS Sorry for my bad english I'm Brazilian MY CODE img width 691 alt sem titulo src,,"jquense,gaearon",2018-01-06 00:22:09,2018-01-06 00:28:44
IS,Hydration warning with code splitting and server side rendering,Do you want to request a feature or report a bug Bug maybe What is the current behavior When Server side rendering is enabled on the server side along with code splitting on the client side the app throws a warning Now when i change my index js to include App instead of ClientApp i e disable code splitting i dont get any warning Am i missing something here Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 I found a similar qn here on stackoverflow Unfortunately there was no reply,,"gaearon,gaearon,gaearon",2017-12-13 00:02:21,2018-01-06 01:17:11
IS,React children do not take Functions as Children under consideration,My component can have multiple children components They can be of different types Strings JSX Components and functions I wanted to render them using React children map helper function that unwraps the children opaque data structure The problem is that children defined as functions seem to be ignored by React children map React children count and other helper functions See the example I can access them and render directly from props children wrapper but it is not a convenient way as one can never know for sure what type it will be,,"gaearon,gaearon,gaearon",2017-12-19 16:06:42,2018-01-06 01:18:23
IS,Lifecycle method to build initial state for classes,Feature request We need to have a way to build the initial state of ReactComponent in case of usage of classes What is the current behavior Warning in case this state modified in willComponentMount Access to partially constructed object in case of somewhat complex state building logic in the constructor For example if we have a hierarchy of classes with the buildState method called in the constructor to generate an initial state Derived class overrides the buildState method to have a richer state In result part of the object related to the derived class wo not be constructed yet and can not be accessed in the buildState The buildState approach is currently used in ReSub framework What is the expected behavior Rather no warning in case of this state modification or new Lifecycle method which is called right after constructor call which returns the state Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 is affected,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2017-12-13 21:24:31,2018-01-06 01:27:02
IS,MouseDown MouseUp abandoned in Chrome 55,See MouseDown MouseUp possibly others do not do anything in Chrome 55 Is it possible to shim pointervents in somehow,,"gaearon,gaearon",2017-12-09 04:34:20,2018-01-06 01:27:46
IS,Add some sugar to simplify test assertions,I made tests a bit too verbose in Might be a good time to revisit how we write them now There is a few separate issues Asserting on warning messages is too verbose Need a DEV block call spyOnDev normalize stack etc Ideally I wish there was a higher level helper that lets us push expected warning assertions and validate them as they happen It should handle component stacks automatically without having to copy paste the normalization helper everywhere In some cases I added actual duplication in in particular for cases that throw in development but do not throw in production Maybe need a toThrowInDev Although on the other hand this pattern needs to be highly visible so maybe extracting common code in a closure is good enough,,"gaearon,gaearon,gaearon,gaearon",2017-11-22 13:22:41,2018-01-06 03:02:10
IS,New way to bind event handler function,Currently there is no way to use event handlers in functional components without performance degradation e g unnecessary function recreations through bind or arrow functions and this demo To perform event delegations in an efficient way react need to assign current vdom element to each rendered dom element And vdom element has link to actual owner component where we can get our props and state So why react concealed this from developers and made them suffer not only from performance degradation but also from choosing problem how many articles and advices recommend or investigate this rule to not bind handlers in render function and how many solutions exist use bind in constructor use class field properties with arrow functions use autobind decorators And my solution not need even to recreate handlers on each component instantiation like all current solutions does so it definitely the fastest way I highly suggest make this api public or make some helper to get current props and state from event target,,"bgnx,gaearon",2017-10-17 23:57:26,2018-01-06 03:05:59
IS,Feature request Global state at the render hydrate level,This is a feature request It relates to This has been a pain point for me and I'm sure we can do better The issue How to have some state available to all components without passing everything down on props through the component tree I'm speaking about global state So why not use context I have a couple of issue with it 1 It is not the root component is job to receive and disseminate state The root component is just some component It should not care if it is root or not Maybe you have example using Express res render 'homepage jsx' But some other page might just as well have res render 'otherpage jsx' where otherpage has div Something Homepage div Components can be composed however you like they should not care what depth they are at 2 Above is talking about a multipage app The thinking around React seems to be so skewed toward to the special case of Single Page App SPA is sometimes the right choice If you are Google Maps it is clearly right If you are something broader in scope like Amazon com it is clearly not The general case is much more interesting to solve 3 Having every root component wrapped in some Provider that publishes context downwards and every non root component wrapped in some receiver higher level component that declares context is just boilerplate It is not expressive it is bookkeeping 4 Alternatives There are not any as far as I know Each component only knows about the props and possibly context passed in it does not have any handle on data for the current render call Simply importing global state through CommonJS or ES6 modules is impossible on the serverside for anything request scoped like query params route params cookies headers anything generated by middleware based on these things PROPOSAL Why not just handle global state at a higher level than props passed component to component Why not extend ReactDOM render to take a 4th argument for global context It would just make everyone is life easier Do not even worry about changes firing componentWillReceiveProps at least as a first version Think of it as analogous to Express and the req object that is passed around One should always have access to some per request object So many things would be useful to put in there authenticated user geolocation store from Redux query and route params etc etc It would look like ReactDOM render rootComponent someDiv callback request specific data Where request specific data might have things that are truly request specific and also things that are the same across requests The latter can be done with imports but it is a bit messy you end up with code like if typeof window 'undefined' Client get value from window object else Server get value from filesystem or wherever Just having global data available to all components in the tree simplifies things a lot Do not you think,,"milesj,gaearon",2017-12-08 08:31:37,2018-01-06 03:07:08
IS,smarter autoFocus,I believe autoFocus should be improved for the better DX Browser native autoFocus is nice and all but does not work when a component is updated Sure that is fine But it is pretty common to need focus after a component has been updated Yep declaratively How Immutable data ftw At least it works for me I use this wrapper component Check componentDidUpdate method I hope it makes sense,,gaearon,2017-12-05 02:11:42,2018-01-06 03:12:28
IS,Add hooks to ReactDOMServer to support caching,Do you want to request a feature or report a bug feature What is the current behavior react dom SSR performance could be improved using server side cache but currently the ReactPartialRenderer is currently not accessible from the react dom package Desired behavior On the server only it would be nice if plugins could be used to improve render performance Currently the only way to do this would be to externally maintain a renderer implementation However the ReactPartialRenderer already contains all the behavior required to support plugins with a little refactoring I have refactored the ReactPartialRenderer and created a proof of concept for supporting plugins for react server side rendering You can see the ReactPartialPluginRenderer in this fork its comprised of 3 different commits 1 Strict refactoring of ReactPartialRenderer the only addition is exporting the ReactPartialRenderer from the react dom server package 2 Create the ReactPartialPluginRenderer by extending the refactored ReactPluginRenderer and introduce a plugin interface 3 Proof of concept plugin implementations and application example You can view instructions for running the example in the repo I understand that exporting ReactPartialRenderer exposes the internal API which is far from ideal Is there any scenario in which ReactPartialRenderer would be made to be accessible from the react dom package Or would a plugin implementation similar to above be required to maintain its own forked ReactPartialRenderer Maintaining the plugin renderer in its own repo is not a problem but It would be great if plugins could be used without needing to maintain the core server renderer Thanks Adam,,"gaearon,gaearon,gaearon",2017-11-27 16:28:49,2018-01-06 03:13:36
IS,Adding support for component factories in createElement etc,Problem Let is assume you are implementing a component suite providing some dozen superfancy ready to use components for React users However you do not know whether the users of your library are preferring JSX or normal JavaScript In the non JSX case most users surely want to write So far for non JSX users providing a component as a component factory seems to be the better solution whereas JSX users would surely prefer the component class itself as createElement does not support component factories yet This is not very convenient The component suite provider has to decide whether the components shall be provided as factories or as classes respectively render functions in case of stateless functional components or whether she he should always provide both versions at once Feature request Why not promote component factories to first class citizens in the React world instead of downgrading them to legacy as currently planned and make sure that functions like createElement etc will support component factories at the same level as component classes respectively render functions in case of stateless functional components are supported currently BTW By having access to the component factory you also have access to the component class function via factory type which is considered deprecated by the React team I do not know why because factory type seems very helpful Here is a little example Many thanks in advance,,"gaearon,gaearon,gaearon",2017-10-21 17:45:00,2018-01-06 03:21:49
IS,Support srcObject attribute for video element,Do you want to request a feature or report a bug feature What is the current behavior currently you cannot set the srcObject for a video You get an error There is another issue that was closed but the issue was never resolved Firefox has deprecated using URL createObjectURL and Safari does not support it What is the expected behavior The ability to set the srcObject on a video element This is common for WebRTC applications now Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React react 16 0 0,,"syranide,gaearon",2017-10-09 18:45:57,2018-01-06 03:22:56
IS,Async componentWillReceiveProps to allow state update,Do you want to request a feature or report a bug Feature What is the current behavior An almost immediate re render is due after componentWillReceiveProps is called unless shouldComponentUpdate says otherwise What is the expected behavior If new props in componentWillReceiveProps cause an async call that is soon going to update the state anyway wo not it be cool if React might as well wait for that async call to do it is thing which calls setState and do one render instead of two Potential solution React can see if componentWillReceiveProps returns a Promise If it does it defers the re render until it resolves,,"gaearon,gaearon",2017-10-14 00:28:00,2018-01-06 03:23:40
IS,Feature Request Global didUpdate,Currently its not easy to write global logic that executes after React has re rendered The componentDidUpdate lifecycle method works great when your logic is isolated to a component but I have found myself more and more recently wanting a global didUpdate hook baked into React A simple example where this is useful is if you want an isolated function perhaps a keyboard shortcut that creates an element on the screen and then focuses it At Notion www notion so we have written custom logic for doing this but it makes upgrading with React more difficult and unstable I think this would be useful for others too particularly those who use Redux and are building complicated UI interactions,,"aweary,gaearon,acdlite,acdlite,acdlite,acdlite,acdlite,acdlite,acdlite,acdlite,gaearon",2017-09-27 22:08:12,2018-01-06 03:25:18
IS,Can not prevent portal unmounting when using ReactDOM createPortal,Previous comment issuecomment 331852434 When we use unstable renderIntoContainer implements portal we can control when the portal unmount this seems impossible when use createPortal because when parent component unmount portal will be unmount by React itself,,"benjycui,jquense,gaearon",2017-09-26 02:31:21,2018-01-06 03:27:01
IS,In WebDriver input gets partial value on IE11 after upgrading react dom from to 15 6 1,Do you want to request a feature or report a bug bug What is the current behavior We use webdriverIO saucelabs to run our tests and found our automation cases consistently failed on IE11 while inputing strings to textbox after upgrade react dom from 15 5 4 to 15 6 1 The input value will be set partially such as try to input 7d it will only input 7 some times it will be ' d' In javascript webdriverIO code browser setValue textboxSelector ' 7d' If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template Not sure if you could see this video or not 27 What is the expected behavior Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React happens to React dom 15 6 1 with IE11 works on React dom 15 5 4,,"gaearon,jquense,gaearon",2017-09-21 20:47:47,2018-01-06 03:27:53
IS,Feature Request innerHTML alternative,I think many people agree that the dangerouslySetInnerHTML html api is gross even though there is great reasoning behind it I have a few issues with it beyond it is verbosity that I think could be added as static method on the react class My Issues with dangerouslySetInnerHTML 1 Verbose and not always dangerous 2 Ca not mix safe and unsafe html 3 Ca not mix html with react elements 4 Have to manually concat html strings A better solution would be to provide a way to mark html as safe I think this api would be much friendlier than the current html api and probably would not even require a major version bump Thoughts,,"jimfb,syranide,brigand,brigand,syranide,syranide,jquense,jimfb,syranide,jimfb,syranide,syranide,gaearon",2016-03-12 18:55:40,2018-01-06 03:33:28
IS,onBeforeInput fires after Edge updates the DOM,Do you want to request a feature or report a bug Bug What is the current behavior In Edge the onBeforeInput event is fired after Edge has already made changes to the DOM negating the purpose of the event and breaking the assumptions of components built on this event such as Draft If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem via or similar template demonstrates the issue in general but to see the effects on other components consider these steps 1 Go to 2 Type hello world 3 Bold hello 4 Underline the space between the words 5 Select both hello and the space and press a 6 The entire control is text is replaced with a 7 Hit undo several times to observe further broken states until finally React fails with a NotFoundError in removeChild This issue is opened in Draft because the core issue is that onBeforeInput is misbehaving on Edge and so breaks Draft is assumptions What is the expected behavior onBeforeInput should fire before any changes occur in the DOM Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React This repros in the latest version of Draft The root cause here is the same root cause as in 7269 although that issue no longer repros The fix referenced in that issue 7270 fixes this issue as well,,gaearon,2017-01-27 18:44:50,2018-01-06 13:12:00
IS,Do not evaluate 0 prop to 0 or use SameValueZero comparison in shallowEqual to prevent double render,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Feature Bug not sure What is the current behavior For now shallowEqual function L18 L32 uses SameValue sec samevalue comparison aka Object is sec object is but 0 is evaluated to 0 inside of React anyway Example Object is comparison is false in shallowEqual of second ReactDom render call so as we can see console log is called twice What is the expected behavior shallowEqual should use SameValueZero comparison sec samevaluezero so React component does not render second time Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React All browsers React 15 0 0 notable bug fixes The change does not affect React users because 0 evaluates to 0 so it is not a breaking change for React but it is a breaking change for shallowEqual and fbjs Alternatively we should not evaluate 0 to 0 inside of React I'm ready to file PR as soon as we realize what the proper behavior is,,"chicoxyzzy,chicoxyzzy,gaearon,chicoxyzzy,gaearon,chicoxyzzy,gaearon,chicoxyzzy,chicoxyzzy,chicoxyzzy",2017-11-29 21:57:24,2018-01-06 14:24:21
PR,Use Prettier Config API,Currently when a developer is using a text editor Prettier plugin such as prettier vscode or prettier atom the formatting functionality will format the files with incorrect settings such as double quotes and no trailing commas This is easily fixed by moving a lot of the logic in scripts prettier index js upstream to Prettier via a configuration prettierrc js file I have used scripts shared pathsByLanguageVersion to maintain the addition of the trailingComma all setting for ESNext files All four modes check check changed write write changed have been maintained I have tested this by enabling format on save in prettier vscode and saving both ES5 and ESNext files to check if the correct settings are applied I have also tested the check changed and write changed files apply the correct rules to the two different types of files,,gaearon,2018-01-07 05:46:27,2018-01-07 11:52:00
PR,Deduplicate warning on invalid callback,Deduplicate warning on invalid setState replaceState forceUpdate callback Update some test cases,,"yenshih,gaearon,yenshih,yenshih,gaearon,gaearon,gaearon,yenshih,gaearon,yenshih,gaearon,yenshih,gaearon,yenshih,gaearon",2017-12-12 03:37:00,2018-01-07 11:52:52
PR,Calculate build sizes relative to merge base,See issuecomment 352539331,,"gaearon,gaearon,sophiebits,gaearon,sophiebits,gaearon,gaearon,orta,zpao,gaearon,sophiebits,gaearon,orta",2017-12-18 20:06:14,2018-01-07 14:48:46
PR,Reconcile Call component children with current,Solves the issue occurring in 11955 Because the workInProgress stateNode was used instead of current stateNode some Fibers were being deleted twice causing an invalid state The implementation of updateCallComponent is now also closer to reconcileChildrenAtExpirationTime,,"gaearon,gaearon,gaearon",2018-01-06 16:56:43,2018-01-07 20:15:06
IS,react call return Expected to find a host parent,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Bug What is the current behavior A specific order of unmounting and remounting unstable createReturn s from react call return causes an invariant violation in unmountHostComponents Reproduce The following sandbox example crashes with an invariant violation when both the min and cycle props are odd numbers greater than zero What is the expected behavior The app does not crash and cycles the number of items in the list Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React react and react dom versions 16 1 and newer react call return version 0 5 0,,"gaearon,gaearon,gaearon,gaearon",2018-01-03 15:16:26,2018-01-07 20:15:43
IS,Re enable coverage,See Jest OOM d so I disabled it,,gaearon,2018-01-05 19:00:01,2018-01-08 02:27:25
PR,Enable coverage set jest maxWorkers to 2,Overview This PR will re enable coverage and should fix the OOM issue Closes Ref Details When running with runInBand locally I get image When running with maxWorkers 2 locally I get image As mentioned in the above issue the React Circle build should allow for 2 workers,,"rickhanlonii,gaearon",2018-01-08 01:37:57,2018-01-08 02:27:25
IS,grabbing pending state value,Assume I write this this setState ctr 1 Now assume state has not been updated yet as a result of above call and I write this setState ps console log ps ctr Will I see value 1 Basically question is about if there is a pending state update from a Normal not functional setState will the previousState that I receive in functional setState capture that pending value,,"gaearon,gaearon",2018-01-08 09:19:06,2018-01-08 11:46:33
IS,Forked props not being isolated,When I fork a prop like this it mutates the original prop or more specifically the state of the component passing the prop orderForm Mutations to state forked from a prop should be isolated,,gaearon,2018-01-08 08:44:49,2018-01-08 12:27:55
IS,React 16 componentDidUpdate Warning Scheduled a cascading update,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug bug What is the current behavior React 16 componentDidUpdate Warning Scheduled a cascading update same question If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below What is the expected behavior Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16,,gaearon,2018-01-08 06:05:49,2018-01-08 13:30:17
IS,i need to learn this,what do i need to learn to get started with react js,,jquense,2018-01-08 20:11:17,2018-01-08 20:13:55
PR,Sync scheduling by default with an async opt in,Removes the useSyncScheduling option from the HostConfig since it is no longer needed Instead of globally flipping between sync and async our strategy will be to opt in specific trees and subtrees,,"acdlite,acdlite,sophiebits",2017-12-04 21:53:52,2018-01-09 02:50:03
PR,Fix Issue11963 changed in pck json and split them with in fixtures,Fixes issue X Completed all the precheck list before submitting pull request X In fixtures dir split the prestart copying of build files which was previously added with into seperate copy command X changed all occurence of the same issue in attribute behavior dom expiration,,"M-ZubairAhmed,gaearon,M-ZubairAhmed",2018-01-07 21:15:37,2018-01-09 11:15:10
IS,Warn in server renderer if class does not extend React Component but has a render method,Same as but for the server renderer You can look at implementation in and do something very similar in ReactPartialRenderer js,,"gaearon,gaearon",2018-01-08 15:29:56,2018-01-09 16:24:50
PR,Add warning in server renderer if class does not extend React Component,Let me know if the check is done in the wrong spot or if my test is invalid or need more tests somewhere In dev mode while server rendering a warning will be thrown if there is a class that does not extend React Component Close 11991,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2018-01-08 17:31:11,2018-01-09 16:24:50
PR,Upgrade to ESLint 4 1 and add no focused tests rule,It is too easy for focused tests to slip into the repo discussion r159417632 This PR addresses this by doing the following Runs a lint rule on tests only that errors if it sees fdescribe or fit calls Changes file to link for our custom internal rules just to simplify updating these in the future Updates eslint from 3 10 4 1 and babel eslint from 7 1 8 0 so that we can run this new rule only against tests,,"bvaughn,gaearon,bvaughn,bvaughn,gaearon,thymikee,bvaughn,thymikee,bvaughn,thymikee,SimenB,SimenB,thymikee,SimenB,bvaughn,bvaughn,SimenB",2018-01-05 21:17:47,2018-01-09 18:55:51
PR,flow coverage report,During last weeks' sync in London we chatted about Flow coverage stats and how we might track them over time I noticed an NPM module called flow coverage report that seemed worth testing so I thought I would put up a PR for discussion Pros The module generates a file in flow coverage flow coverage json that contains lots of useful stats that we could use to compare over time including Output ss flow coverage,,"bvaughn,gaearon,bvaughn,bvaughn,gaearon,bvaughn",2017-11-13 16:50:28,2018-01-09 19:14:57
PR,Add test to ensure checked inputs do not accidentally get value on,In absence of a value radio and checkboxes report a value of on Between 16 and 16 2 we assigned a node is value to it is current value in order to deattach it from defaultValue This had the unfortunate side effect of assigning value on to radio and checkboxes Related issues,,nhunzaker,2018-01-09 23:26:09,2018-01-09 23:45:30
PR,Remove local getComponentName from ReactPartialRenderer and use shared version,This removes the local getComponentName function from ReactPartialRenderer and uses the one found in shared package I noticed this while working on 11993 This was the only other getComponentName function that was defined separately than the shared package,,"gaearon,gaearon",2018-01-09 21:14:26,2018-01-10 14:18:23
IS,dangerouslySetInnerHTML,dangerouslySetInnerHTML currently uses document write according to googles recommendations it is better to be replaces with something like innerHTML isome html br ' because document write can affect performance Could it be done Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 02 OS Ubuntu 16 04 All browsers i think,,gaearon,2018-01-10 15:04:40,2018-01-10 15:20:43
IS,Add React Children isRenderable,Do you want to request a feature or report a bug A feature Motivation Given a component which gets props from context e g it accepts props from Redux store via connect HoC and renders either null or some React node by condition based on data from context it would be helpful to know outside the component whether it renders any markup or not It would let us render wrappers for the component only if it is visible Usage example Let is say we have a FancyContainer which wraps every child in a FancyWrapper which can add margins borders animation etc Why not just do X We could achieve such behavior by passing a handler for the condition switch of the connected component but this approach would break its encapsulation and it is not suitable for those library components which toggle their renderability internally We theoretically could use has CSS pseudo selector though it is not supported yet by any browser and setting ConnectedComponent is display property to none which would result in FancyContainer rendering invisible nodes But if FancyContainer is itself wrapped in a FancyWrapper we then would not be able to hide its styling We could try to manually find ConnectedComponent is node in DOM and if it does not exist remove FancyWrapper but that sound too messy and violates React is declarative nature Also if data in context is dynamic it usually is we would then hide components while their data is still on the way from the server and might never reveal them when it is loaded to our context maybe we could but with more mess,,gaearon,2018-01-10 16:05:12,2018-01-10 16:56:04
IS,React copies default checkbox value to attributes,Do you want to request a feature or report a bug Report a bug What is the current behavior React sets value on via attributes defaultValue on all inputs with type checkbox and no value If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below actual React expected vanilla DOM What is the expected behavior value attribute should be empty unless passed via props Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 15 any browser,,"gaearon,nhunzaker,nhunzaker,nhunzaker",2018-01-09 16:56:11,2018-01-10 23:17:41
PR,Use 2 workers for all tests on CI,Since 11983 worked I'm curious if it is better to always use two workers Maybe CI will finish faster,,gaearon,2018-01-08 13:41:47,2018-01-10 23:54:24
PR,Add test fixture for media event bubbling,We want to start refactoring some of the event constants but we do not have a great way to confirm media events work as intended This commit adds a new DOM test fixture to verify that media events bubble This should aid in testing 11912 Also I took a video of my dog as a test video Hopefully this is okay I guess I abandon any rights to the video,,"nhunzaker,nhunzaker,gaearon",2018-01-11 00:33:49,2018-01-11 00:53:59
PR,Minor typos fixed,commiting committing doens't does not interuption interruption inital initial statment statement,,gaearon,2018-01-11 10:14:24,2018-01-11 12:24:50
PR,Bump Jest to 22 0 6,Fixes a memory leak we reported,,gaearon,2018-01-11 13:53:37,2018-01-11 14:14:02
IS,AngularJS Injector Equivalent,What is the current behavior No documented way to easily manipulate components state props from a third party perspective What is the expected behavior The expected behavior is to have a mechanism similar to the AngularJS injector that allows additional compilation after bootstrapping All versions of React to my knowledge are affected by this issue I have tried reverse engineering the React Dev Tools and browserify ing them but it will not be a long term sustainable solution with constant updates being made to the React codebase Use Cases Any time an enterprise level or multi party deployment has a third party that wants to modify presentation data e g Deploying A B tests on the client side where it would not be ideal to integrate the code as part of the main back end deployment unless the A B test performs better than the control Easily allowing third party integrations e g Browser extensions editing client side presentation or utilizing model data Any time something needs to be deployed front end quickly without being tied to release cycles of back end code Any time a third party wants to modify something without being required to be on boarded as a contractor due to sensitive sensitive or private data i e PII HIPAA etc Front end unit testing,,"gaearon,gaearon",2018-01-11 14:04:47,2018-01-11 14:31:46
PR,Remove unused expect beta dependency,See discussion r160274156,,SimenB,2018-01-11 14:42:24,2018-01-11 15:01:54
PR,Drop some top level events from the list,Since they never bubble it does not seem necessary to keep them in the top level list We already do not put other events like submit there for the same reason I have not verified this works in practice but I would expect it to Or at the very least we should clarify the comment that explains the criteria for inclusion,,"gaearon,gaearon,aweary,nhunzaker,nhunzaker,gaearon,nhunzaker,gaearon,gaearon,gaearon,nhunzaker,gaearon,nhunzaker,nhunzaker,gaearon",2017-12-22 18:58:13,2018-01-11 23:38:13
IS,Debian 9 64 bit onMouseMove onMouseEnter and onMouseLeave not Firing in Chrome,Do you want to request a feature or report a bug Report a bug What is the current behavior In Google Chrome an element with the onMouseMove and onMouseEnter listeners will not fire the events unless clicked Likewise onMouseLeave will not fire unless the mouse is clicked on an area not occupied by the listening element If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem The following JSFiddle reproduces the bug To reproduce simply create an element with the above listeners and test their behavior in Chrome What is the expected behavior The onMouseEnter onMouseMove and onMouseLeave listeners should fire in Chrome without the mouse needing to be clicked Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React I tested this with React 16 2 on my own development server and also React 0 14 3 in the above JSFiddle In both cases the problem occurs I am using Debian 9 kernel version 4 9 0 5 amd64 and Chrome Version 63 0 3239 132 64 bit to reproduce the error I tried to reproduce this issue on Windows with the same major version of Chrome but it seems to work properly,,"gaearon,aweary,aweary",2018-01-08 01:49:28,2018-01-12 01:12:07
PR,Add media events back to TestUtils Simulate,The TestUtils lost media events when they were pulled out of the topLevelTypes constant This commit adds them back by concatenating the media event keys to the list of top level types I tested this by recording a snapshot of the simulated events list on master before this commit This will have to be updated every time we add a new event but it should at least give us some extra,,"nhunzaker,nhunzaker,gaearon",2018-01-12 01:44:17,2018-01-12 02:03:00
IS,Some events are missing on master for SimulateNative,See my comment in discussion r161108162 It is not really documented but people might rely on this Need to fix,,"gaearon,nhunzaker,nhunzaker",2018-01-11 23:50:47,2018-01-12 02:03:48
IS,Value in input not updated cleared with undefined value,I'm trying to clear my values of inputs with undefined values I setup a demo page Basically if I set in render const txt1 txt2 txt3 '' this state txts the button clears input 3 but not if I do not put default value for txt3 I was searching through issues but did not find similar issue The use case is that I have huge form and I have some predefined values And once I update my form and try to reset it these inputs are not cleared Thanks for any help,,"jquense,jquense",2018-01-12 14:55:19,2018-01-12 15:52:39
IS,Custom HTML tags,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Bug What is the current behavior After upgrading to React 16 I'm getting a lot of warnings about custom html tags Warning The tag company is unrecognized in this browser If you meant to render a React component start its name with an uppercase letter What is the expected behavior Warnings should not appear Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React 16 any browser It was working in 15,,gaearon,2018-01-13 17:20:31,2018-01-13 17:47:50
PR,Add a workaround for incomplete Proxy polyfill issue,This works around I feel meh about this but it is DEV only so I do not mind it either,,gaearon,2018-01-14 10:07:29,2018-01-14 18:39:33
IS,Cannot create property for a non extensible object for SyntheticEvent in IE 11,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug bug What is the current behavior An error is thrown in IE 11 The error message states Cannot create property for a non extensible object It originates from the following location File react packages events SyntheticEvent js If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below What is the expected behavior No errors Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React The version number is react dom 16 Possibly related to 11240,,"aweary,gaearon",2018-01-12 08:46:55,2018-01-14 18:39:40
IS,Each time a parent component is updated the props passed to the child component will be different,version v16 2 0 In the ReactFiberClassComponent js Have a piece of code I think it s logic is to judge if the newProps and oldProps is not the same componentWillReceiveProps will be called I hope the output should be the newProps and oldProps is equal true But I got the newProps and oldProps is equal false This means that each time a parent component is updated the props passed to the child component will be different,,"gaearon,gaearon",2018-01-14 16:42:31,2018-01-14 20:24:55
PR,Remove HTMLCanvasElement test mock,Summary This PR fixes most test failures reported by Jest is new detectLeaks feature Note I was not able to see any measurable difference in heap usage using logHeapUsage so this probably is not as big of a deal as it would seem just good to fix if we can Details Now that detectLeaks works in Jest 22 I ran it on the React repo and found that 110 130 tests report leaks That number is approximate because some tests leak intermittently After investigating the leaks I found that 1 line accounted for 100 of the leaks Removing this line reduces the failures from 110 to 10 It looks like assigning a function to any window attribute inside setupEnvironment will leak the Window after the test due to the setupEnvironment closure I have filed a bug in Jest here Testing Running this command,,"rickhanlonii,rickhanlonii,gaearon,rickhanlonii",2018-01-14 22:21:52,2018-01-15 11:15:19
IS,Add referrerPolicy to iframe for react 16,Property areferrerPolicy' does not exist on type 'DetailedHTMLProps IframeHTMLAttributes HTMLIFrameElement HTMLIFrameElement ' see react 16 2 0 react dom 16 2 0,,gaearon,2018-01-15 12:48:08,2018-01-15 12:50:35
IS,Bug Wrong render output when children has textNode,There seems to be bug in React when child node has textNode it does not render correct output Steps to reproduce JSFiddle Expected output is Hello 12 Hello 21 Hello 12 But React rendered Hello 21 Hello 12 Hello 21 rendered output is not matching console log however when textNode is removed its working as expected See this fiddle 12 21 12 Adding text node Hello before numbers causes unexpected output Tested only in React 16 2 0,,gaearon,2018-01-13 12:45:55,2018-01-16 02:27:52
IS,Should Children treat React Fragment as an array,When traversing children with Children forEach it treats Fragments as stand alone elements instead of traversing their children I was under the impression that they were a convenience equivalent to arrays Should they not be traversed as such,,gaearon,2018-01-16 14:19:39,2018-01-16 14:52:44
IS,It is not possible to set optional property to PureComponent using TypeScript,Bug What is the current behavior I am creating an interface with optional key and trying to set it as a type for PureComponent props Also I am using connect from react redux More datails StackOverflow What is the expected behavior Possibility to set somehow optional props Which versions of React and which browser types react 16 0 19 react 16 0 0 react redux 5 0 6 typescript 2 3 4 It seems that PureComponent extends from Component and require props to be Readonly type lib es5 d ts it does not allows to optional keys like Partial Should it be Partial instead of Readonly,,gaearon,2018-01-15 14:54:44,2018-01-16 15:10:58
PR,Refactor ReactElement in more es6 style,Add new function hasValidProp cause hasValidRef and hasValidKey are nearly the same And rewrite object arguments in es6 style and add destructuring for some variables,,"gaearon,gaearon,gaearon",2018-01-16 18:46:35,2018-01-16 18:57:28
PR,Adds Danger and a rule showing build size differences,Adds Danger Adds danger js with a single rule taken from the React Native Dangerfile I am less familiar with React the repo than I am with the process around React Native So I did not want to intrude Danger runs during your CI process and gives teams the chance to automate common code review chores This provides another logical step in your build through this Danger can help lint your rote tasks in daily code review Which means that you can start writing simple scripts to handle Add a CHANGELOG or No merger commits please basically wrote a bunch in RN and there is an API reference here You can test changes locally by running node node modules bin danger pr ID This PR Adds Danger as one of the build steps during CI Adds the same API token as React Native for open source bot example I'm not 100 certain that I added it into the right section in test entry point sh happy to change that if you have better ideas,,"orta,gaearon,orta,orta,gaearon,gaearon,gaearon,gaearon,orta,gaearon,orta,orta,gaearon,gaearon,gaearon,orta,gaearon,orta,gaearon,orta,orta,orta,gaearon,orta,gaearon,orta,gaearon,orta,gaearon,orta,gaearon,gaearon,orta,orta,orta,gaearon,gaearon,orta,gaearon,orta,gaearon,orta,orta,gaearon,orta,gaearon,orta,gaearon,orta,gaearon,gaearon",2017-12-15 23:47:13,2018-01-17 01:49:39
IS,On running yarn start or npm start for fixtures is throwing error,yarnerror 1 Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug A bug What is the current behavior on running npm start or yarn start in react fixtures dom is throwing errors in terminal If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below 1 Go to react fixtures dom 2 Run yarn start or npm start Following errors can be seen in the terminal react fixtures 0 1 0 prestart home gmadmin Practice react fixtures dom cp build dist react react dom development js public cp cannot stat ' build dist react react dom development js' No such file or directory npm ERR code ELIFECYCLE npm ERR errno 1 npm ERR react fixtures 0 1 0 prestart cp build dist react react dom development js public npm ERR Exit status 1 npm ERR npm ERR Failed at the react fixtures 0 1 0 prestart script npm ERR This is probably not a problem with npm There is likely additional logging output above npm ERR A complete log of this run can be found in npm ERR home gmadmin npm logs 2018 01 04T18 32 47 442Z debug log Note I have already run npm run build in the react parent directory and i can see react development js and react dom development js in react build dist Running cp build dist react react dom development js public this command on terminal works fine But when it fails when run through prestart command in package json What is the expected behavior copying should happen successfully and npm start should successfully turn up the server Which versions of React and which browser OS are affected by this issue React version 16 2 0 kernel 4 4 0 53 generic GNU Linux os info Distributor ID LinuxMint Release 18 1 Codename serena Did this work in previous versions of React Do not know If its a bug let me work on it,,"gaearon,M-ZubairAhmed,gaearon,M-ZubairAhmed,M-ZubairAhmed",2018-01-04 19:09:51,2018-01-17 11:41:35
PR,Remove experimental RT CS renderers,Will follow up with adding a new one,,sebmarkbage,2018-01-17 04:19:26,2018-01-18 02:07:25
PR,Fix copy paste error for file size comparison,This PR fixes a copy paste error for file size comparison in 11865 issuecomment 358642622 I do not understand the tool chain well enough to make a test for this I found the error when looking through recent commits of this project on lgtm com,,"gaearon,orta",2018-01-18 13:49:08,2018-01-18 13:55:40
IS,Strange Warning PropType is marked as required in the format propName isRequired,I have a component with the following proptypes Initially i set media prop as required but then changed to non required Still the console show a warning Warning Failed prop type The prop media isRequired is marked as required in Component but its value is undefined What I see is in the prop name that is identifying the required option is adding isRequired Do you think this is a bug I have faced this several times in my app but I never got it working properly The work arround was to change those propTypes to PropType any Any help or idea will be great,,"gaearon,gaearon,gaearon",2018-01-18 17:17:24,2018-01-18 17:22:43
IS,Bug createPortal element is children do not print correct clientHeight properties etc,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug could be a bug What is the current behavior The children div inside an element that is created by using createPortal does not show correct clientHeight or scrollHeight properties It shows 0 for scrollHeight as is console logged in the demo below If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below What is the expected behavior It should get correct scrollHeight etc properties Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React,,,2018-01-17 22:06:21,2018-01-18 20:15:25
IS,'npm' is not recognized as an internal or external command operable program or batch file,Current Behavior I have tried everything under the sun including uninstalling and reinstalling node npm and the create react app package switching to a different version and every variation of how to add npm to my PATH I could find on the internet I dont usually have issues with npm and I use it for several other projects and it seems to work fine I cannot figure out why it is only happening here I could actually install react and react dom manually but when I tried installing react scripts it didnt output anything and I had to ctrl c to get my console back I understand this is not a forum for npm but as I described I dont have this issue in other projects and it works fine doing literally anything else Any help would be greatly appreciated,,"gaearon,gaearon",2018-01-18 20:49:57,2018-01-18 21:52:23
PR,Added 9 x to node devEngines,,,bvaughn,2018-01-18 23:14:25,2018-01-18 23:16:48
IS,Suppress message Download the React DevTools for,feature bug What is the current behavior React library logs either Download the React DevTools for a better development experience or logs Warning The installed version of React DevTools is too old and will not work with the current version of React Please update React DevTools if previous fix is employed reproduce Run React site without production flag and without React DevTools extension installed What is the expected behavior No log output Which versions of React React 16 2 0 Tried According to comment on 3877 the following should work in React 16 1 0 However this changes the log to Warning The installed version of React DevTools is too old and will not work with the current version of React Please update React DevTools Other fixes such as those from StackOverflow yield the same results Also the plugin itself does not work for me because of So installing it is not an option for me at least TLDR I'm loving React But logging the install note is a tad annoying Previous fixes do not seem to work So please provide an option to disable the log,,"gaearon,gaearon,gaearon",2018-01-18 15:08:02,2018-01-19 10:02:00
IS,A simple react page is not working on iE11,I have created a HelloWorld app using React Typescript it outputs correctly on Chrome FireFox etc but when I view the same app on IE11 nothing appears and upon checking the devTool on IE it is also blank so I do not really know why it is not working Below is the code import babel polyfill import as ES6Promise from es6 promise ES6Promise polyfill import as React from react import render from react dom export class HelloWorld extends React Component render return div Hello World div render HelloWorld document querySelector app The WebPack Config js is const webpack require webpack const CleanWebpackPlugin require clean webpack plugin module exports entry src app tsx output filename app js path dirname dist C workspace ruc web tfl gov uk Source TfL Ruc Web cdn static scripts ulez sample code hello world tsx Enable sourcemaps for debugging webpack is output devtool source map resolve Add ' ts' and ' tsx' as resolvable extensions extensions ts tsx js json cshtml html plugins new CleanWebpackPlugin new webpack optimize UglifyJsPlugin comments false minimize false compress warnings false new webpack optimize LimitChunkCountPlugin maxChunks 15 module rules All files with a ' ts' or ' tsx' extension will be handled by 'awesome typescript loader' test tsx loader awesome typescript loader All output ' js' files will have any sourcemaps re processed by isource map loader' enforce pre test js loader source map loader When importing a module whose path matches one of the following just assume a corresponding global variable exists and use that instead This is important because it allows us to avoid bundling all of our dependencies which allows browsers to cache those libraries between builds externals react React react dom ReactDOM,,,2018-01-19 12:33:36,2018-01-19 12:39:12
PR,Create OnChangeComponent,Derived from Component it contains the OnChange method wihch permits to update properties values inside a object in the state,,aweary,2018-01-19 15:50:13,2018-01-19 17:04:17
PR,RFC 6 Deprecate unsafe lifecycles,This codemod corresponds with reactjs rfcs pull 6 reactjs react codemod pull 195 and 12036 Proposed Release Plan 16 3 Add new lifecycles 16 4 Warn about old lifecycles being deprecated Enable warnAboutDeprecatedLifecycles feature flag 17 0 Remove deprecated lifecycles The minor version numbers for 16 are just examples The main point is to note that we plan to release this change over two minor updates to give libraries a chance to update without noisy deprecation warnings Differences from RFC This proposal differs from the original RFC in a couple of ways I have updated the RFC to reflect these changes but they are also listed below x getDerivedStateFromNextProps has been renamed to getDerivedStateFromProps reactjs rfcs pull 6 commits 8f6c20e x getDerivedStateFromProps will be called after instantiation In this case prevState will either be null or the value set in the constructor Any state returned from getDerivedStateFromProps will be merged into the previous state overriding it reactjs rfcs pull 6 commits e05e317 x getDerivedStateFromProps will not accept a prevProps parameter Its signature will be static getDerivedStateFromProps props Props prevState State null PartialState null reactjs rfcs pull 6 commits e05e317 x The unsafe prefix will actually be UNSAFE capitalized to make it more noticeable reactjs rfcs pull 6 commits 7042a2a Open Questions x Is it okay that some inline comments eg here L223 and strings eg here L25 and here L334 still refer to the old lifecycle names Decision Yes These can be incrementally replaced if necessary x Should startPhaseTimer calls use new lifecycle prefix Decision No the old names are okay x Should invariants referencing the old lifecycle name sans prefix be updated Tentative decision No The meaning of these messages is clear enough that this is not worth the pain it would cause WRT white listing x Is it worth releasing an update to create react class factory so It is aware of the new lifecyle methods Tentative decision Yes This is fairly low effort and worth the cost to keep create react class working PR 12036 x Should we release an update to 15 with the new UNSAFE lifecycle hooks as well Decision No Instead we will release a backwards compatible polyfill for library authors See reactjs react lifecycles compat Remaining Work x Invoke either either old lifecycles or new unsafe ones e709e30 x Add deprecation warnings for old lifecycle names e709e30 x Create codemod reactjs react codemod pull 195 and rename lifecycles 28a0e4b f0e6f62 d9e0d48 x Update NativeMethodsMixin with new lifecycle hooks 8679926 x Manually audit repo and update comments and inline strings x Rename unsafe to uppercase UNSAFE 8d0e001 x Implement new static getDerivedStateFromProps method x For server side rendering 5d51854 035c220 x For shallow renderer 1047182 x For all other renderers via ReactFiberClassComponent b71ca93 x Verify we have new test coverage for all of the following x Ensure the old lifecycles are invoked and log the correct warnings 5d51854 035c220 1047182 b71ca93 x Cover the new static getDerivedStateFromProps method 5d51854 035c220 1047182 b71ca93 x Verify that we warn about misspelled UNSAFE componentWillReceiveProps 09c39d0 x gDSFP works for createReactClass components 286df77 68f2fe7 x Add DEV warning to functional components that define a static getDerivedStateFromProps method re this comment issuecomment 358214670 b699543 x Put lifecycle deprecation warnings behind a feature flag This will enable us to do a minor release that adds the new UNSAFE methods but without any warnings giving the ecosystem time to upgrade without noise 2d9f75d Follow Up Work x 12044 Coalesce warnings for deprecated lifecycle hooks and print single message after reconciliation rather than one per component type x 12046 Update debugRenderPhaseSideEffects behavior x Write reactjs org blog posts x 12047 For 16 3 Letting people know how to prepare for upcoming 16 4 release App developers should run codemod Library maintainers should move code to render x 12048 For 16 4 Show examples of how to use the new API pointing out tricky things to avoid eg setTimeout calls to setState etc,,"bvaughn,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,gaearon,gaearon,gaearon,bvaughn,acdlite,acdlite,bvaughn,bvaughn,bvaughn,bvaughn,acdlite,acdlite,bvaughn,acdlite,acdlite,acdlite,bvaughn,jquense,gaearon,jquense,gaearon,gaearon,bvaughn,bvaughn,acdlite,bvaughn,bvaughn,bvaughn,acdlite,bvaughn",2018-01-16 22:17:26,2018-01-19 17:36:47
PR,Highlight production bundles in bold in the Danger integration comment,This PR modified Danger integration comment change the output so that production bundles are bold in the results remove the red triangle on increase from the development bundles address 12043,,"gaearon,gaearon,gaearon,gaearon,gaearon",2018-01-19 16:28:39,2018-01-19 18:07:27
IS,Highlight production bundles in bold in the Danger integration comment,We added integration with Danger in It shows a bundle size difference on PRs like this issuecomment 358717464 We should change the output so that production bundles are bold in the results I think we can also remove the red triangle on increase from the development bundles because they are not as important,,"gaearon,gaearon,gaearon",2018-01-18 17:25:58,2018-01-19 18:07:49
IS,s,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug What is the current behavior If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below What is the expected behavior Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React,,,2018-01-19 22:30:30,2018-01-19 22:30:47
IS,onChange prop is never invoked for input type date,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug bug What is the current behavior onChange is never invoked for an input type date cc If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below This was reported back in 3659 which was closed but this issue appears present in React 16 2 0 I was able to reproduce this with a simple case in in at least Chrome 63 What is the expected behavior onChange is invoked should result in a log as well as the value being displayed beneath the input in the codesandbox link Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React 16 2 0 reproduces this issue and it appears to date back to 15 and earlier based on prior issues Thanks all Let me know if there is anything else I can clarify,,,2018-01-19 22:33:23,2018-01-19 22:40:06
PR,RFC 6 createReactClass updates,This codemod corresponds with reactjs rfcs pull 6 and facebook react pull 12028 Make create react class factory aware of the new UNSAFE lifecycle names so that It warns about spelling error for UNSAFE componentWillRecieveProps It does not trigger an invariant L389 L398 if one of the new lifecycle names are mixed in as overrides I have built addons create react class locally and compared it to the 15 6 2 release in NPM to verify that the only changes between the two are the additions I have made with this PR This should make the release very low risk,,"bvaughn,gaearon,bvaughn,gaearon,bvaughn,bvaughn,sebmarkbage,bvaughn,sebmarkbage,bvaughn,bvaughn,gaearon,bvaughn,bvaughn,bvaughn",2018-01-17 22:41:45,2018-01-19 23:13:26
IS,Rendering via JSX vs function call,From rendering via Component props is significantly faster than Component props Is there any plans in the near future within the next few months perhaps to optimise functional components so that we do not have to perform this optimisation avoiding JSX for non html elements,,gaearon,2018-01-21 13:20:49,2018-01-21 13:26:18
PR,Upgrade Jest to 22 1 and dedupe packages,Overview This PR updates to Jest 22 1 which give our tests better memory usage and adds interactive snapshots Link to full changelog here jest 2210 Update this PR also dedupes packages using yarn tools,,"rickhanlonii,SimenB,gaearon,rickhanlonii,rickhanlonii,SimenB,rickhanlonii,SimenB,rickhanlonii",2018-01-17 02:13:32,2018-01-21 16:07:45
PR,pull,Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Run yarn test prod to test in the production environment It supports the same options as yarn test 6 If you need a debugger run yarn debug test watch TestName open chrome and press Inspect 7 Format your code with prettier yarn prettier 8 Make sure your code lints yarn lint Tip yarn linc to only check changed files 9 Run the Flow typechecks yarn flow 10 If you have not already complete the CLA Learn more about contributing,,,2018-01-21 13:10:33,2018-01-21 18:12:23
IS,react 16 0 0 bug,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug report a bug What is the current behavior after upgrade react 16 0 0 safari Browser console print bug 1 TypeError undefined is not an object evaluating 'Ja ReactCurrentOwner' 2 TypeError Map constructor does not accept arguments If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below 1 upgrade react 16 0 0 2 open safari browser and look console 3 show bug What is the expected behavior do not console this mistake Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React react 16 0 0,,gaearon,2018-01-22 08:20:20,2018-01-22 14:02:39
PR,Add Experimental Fabric Renderer,This creates a tuple for the shadow node since we will need one canonical value to hold the reactTag and ref as well as a persistent node whose identity will come from native This creates a forked version due to the flat bundle but that will not work well in practice because we need some of these to be shared findNodeHandle all the ReactNativeComponent and NativeMethodsMixin stuff will need to work when applied to either renderer I did findNodeHandle with injection but the dynamic injection wo not actually work until we make that a shared module Also included a few bug fixes,,"sebmarkbage,sebmarkbage,gaearon,gaearon,gaearon,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage",2018-01-22 07:28:00,2018-01-22 17:58:36
PR,Test that fabric renderer sends diffs,Make the mocks properly do the expected merging,,sebmarkbage,2018-01-23 06:23:47,2018-01-23 06:29:44
IS,onChange event of a checkbox not firing in some circumstances,I'm not sure if that is a but or more likely just a lack of knowledge The fact I started fiddling with React only a couple of weeks ago might be a hint Anyway the code below is meant to display a checkbox I have tried with both Chrome 63 0 3239 132 and Firefox 57 0 1 Let me know if you need any additional detail Thought probably not needed I can also share the project but it would not work out of the box as it is a work I'm doing to extend the back end of a WordPress plugin,,,2018-01-20 16:08:14,2018-01-23 07:50:52
IS,Image srcSet bug,Hi I have some problems with img tag srcSet inside some small components Need some help with this thank you,,,2018-01-23 09:56:12,2018-01-23 13:56:35
PR,Warn if unsafe lifecycle methods are found in an async subtree,Part two of 12046 This PR identifies class components using unsafe lifecycles componenWillMount componenWillReceiveProps componenWillUpdate during the begin phase and prints warnings about them and with the location of the async subtree they belong to during the commit phase In the event of an error pending warnings are discarded by performFailedUnitOfWork Example warning A warning for a particular async subtree will look like this Unsafe lifecycle methods were found within the following async tree nbsp nbsp nbsp in AsyncRoot at AsyncRoot js 260 nbsp nbsp nbsp in div at SyncRoot js 259 nbsp nbsp nbsp in SyncRoot at SyncRoot js 306 componentWillMount Please update the following components to use componentDidMount instead Foo Bar componentWillReceiveProps Please update the following components to use static getDerivedDataFromState instead Foo componentWillUpdate Please update the following components to use componentDidUpdate instead Foo Bar Baz Learn more about this warning here How are warnings grouped I put a lot of consideration into how to group coalesce the warnings as well as how to dedup them I landed on the following Grouped by async subtree and then printed by lifecycle I think this grouping makes as much sense as anything else in terms of how you would approach tracking down and fixing the lifecycles Although I'm happy to tweak the wording and format if anyone has suggestions Deduped per class component type by way of an dev only expando attribute This was a nice tradeoff between uniqueness concerns mentioned below and implementation complexity Alternatives considered I considered different deduping strategies but this felt the most pragmatic Other considerations were Per async subtree aka per component stack Major drawback Components not rendered initially due to conditional logic blockers etc would never get reported Per unsafe component name Major drawback Component names might be vague eg Text and might have collisions which could lead to several rounds of fixings warnings about a component with a given name No deduping Major drawback Lots of irritating console noise Open Questions Is the way I'm flushing or discarding pendingWarningsMap safe Are there cases like interruptions that it wo not handle well cc x In the event of an error warnings may be split into multiple messages since the code below the boundary is committed in a different pass I think this is okay since it is not a common case,,"bvaughn,sebmarkbage,bvaughn,gaearon,bvaughn,bvaughn,bvaughn,bvaughn",2018-01-20 03:58:31,2018-01-23 22:01:55
PR,Improved toWarnDev matcher to avoid swallowing errors,While writing tests for unsafe async warnings I noticed that in certain cases errors were swallowed by the toWarnDev matcher and resulted in confusing test failures For example if an error prevented the code being tested from logging an expected warning the test would fail saying that the warning had not been logged rather than reporting the unexpected error I think a better approach for this is to always treat caught errors as the highest priority reason for failing a test I reran all of the test cases for this matcher that I originally ran with PR 11786 and ensured they all still pass,,bvaughn,2018-01-23 18:58:34,2018-01-23 22:46:51
PR,Improve toWarnDev matcher DX for unexpected warnings,Use jest diff to format the warnings in a way that makes it easier to spot the differences Before The differences before are hard to spot screen shot 2018 01 23 at 11 19 45 am After One unmatched expectation If there is a single unmatched expectation then just diff the individual strings screen shot 2018 01 23 at 11 15 00 am Multiple unmatched expectations Wrap in an array and do a diff Let Jest decide which of the inner strings is closest In some cases the diff might not be useful if the warning was a completely different one than you were expecting but in other cases the output can be meaningful screen shot 2018 01 23 at 11 14 34 am No remaining expected warnings Just print the unexpected warning by itself screen shot 2018 01 23 at 11 14 51 am,,bvaughn,2018-01-23 19:20:16,2018-01-23 22:46:59
IS,Remove Component childContextTypes Component contextTypes and PropTypes requirements for Context,Since there is currently undergoing work on the Context API I feel like this may be a good time to bring this up In my projects the design decision to not use PropTypes in our internal components was made early on under the assumption that if we were to use PropTypes we may as well go the whole way and use flow or TypeScript as well Enforcing a PropType declaration on a single React feature does not make much sense If PropTypes are optional on props why are they required on context To get around this enforcement my components end up looking like the following As you can see the declaration of both childContextTypes and contextTypes is essentially pointless yet I am forced to do so because the API enforces it It seems that much like props and PropTypes it should be down to the developer to decide whether or not the rule should be enforced,,gaearon,2018-01-24 05:38:51,2018-01-24 15:00:22
PR,Update debugRenderPhaseSideEffects behavior,Part one of 12046 This debugRenderPhaseSideEffects feature flag no longer double invokes componentWillMount componentWillReceiveProps componentWillUpdate or shouldComponentUpdate It continues to double invoke the constructor render and setState updater functions as well as the recently added static getDerivedStateFromProps method Tests have been updated I have verified that the new ctor statement in ReactFiberClassComponent is not dropped from the production build,,"bvaughn,flarnie,bvaughn,bvaughn",2018-01-19 23:12:30,2018-01-24 23:06:26
IS,Update debugRenderPhaseSideEffects behavior,Follow up item for PR 12028 x Phase 1 12057 Within the context of an async tree we should double invoke the following methods constructor render static getDerivedStateFromProps setState updater functions The current implementation of debugRenderPhaseSideEffects is to also double invoke several additional methods eg will mount will update sCU etc This behavior should be removed x Phase 2 12060 We should also add a dev warning if we detect any components within an async tree that contain the following methods componentWillMount or UNSAFE componentWillMount componentWillReceiveProps or UNSAFE componentWillReceiveProps componentWillUpdate or UNSAFE componentWillUpdate,,bvaughn,2018-01-18 20:52:50,2018-01-24 23:11:08
PR,Opt into unsafe lifecycle warnings without async tree,Opts a subtree into the same warnings as AsyncComponent does but does not actually enable async rendering This same mechanism could be extended for similar warnings in the future eg compiler React Fabric Following precedent this component is exposed via React StrictMode It is used like a Fragment to wrap an element This branch builds on top of 12060,,"bvaughn,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,bvaughn,gaearon,sebmarkbage,bvaughn,bvaughn,gaearon,bvaughn,bvaughn,sebmarkbage,bvaughn,sebmarkbage,bvaughn,bvaughn,bvaughn,gaearon,bvaughn",2018-01-23 21:22:55,2018-01-25 01:49:43
PR,New context API,Introduces a declarative context API that propagates updates even when shouldComponentUpdate returns false Corresponding RFC We will land this behind a feature flag and try it out on a Facebook product also behind a feature flag to get some real world performance data My plan is to build the React Redux API on top of it find our largest product that uses Redux swap out the implementation and see what happens TODO x Should be able to stop scanning when we hit a matching provider then continue the scan later Already doing this for matching consumers x Use ReactElement as child type to save on bundle size x Fuzz test x Should we use Object is to compare context values or is enough shallowEqual uses Object is but we use everywhere else x Unwind context stack when interrupted error high pri update x SSR x React Children x Put this behind a feature flag,,"acdlite,iamdustan,gaearon,gaearon,acdlite,acdlite,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sophiebits,acdlite,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,acdlite,acdlite,iamdustan,gaearon,gaearon,jquense,gaearon,jquense,gaearon,acdlite,acdlite,iamdustan,gaearon,acdlite,acdlite,sebmarkbage,acdlite,acdlite,chenglou,kentcdodds,acdlite,kentcdodds,Andarist,gaearon,gaearon,acdlite,gaearon,chenglou,jquense,gaearon,gaearon",2017-12-09 08:52:02,2018-01-25 03:36:23
PR,Coalesce lifecycle deprecation warnings until the commit phase,Builds on top of PR 12083 and resolves issue 12044 Coalesces deprecation warnings until the commit phase This proposal extends the ReactDebugAsyncWarnings utility introduced in 12060 to also coalesce deprecation warnings New warning format will look like this componentWillMount is deprecated and will be removed in the next major version Use componentDidMount instead As a temporary workaround you can rename to UNSAFE componentWillMount Please update the following components Foo Bar Learn more about this warning here,,"bvaughn,bvaughn,bvaughn",2018-01-23 23:26:20,2018-01-25 05:41:41
IS,Coalesce warnings for deprecated lifecycle hooks,Coalesce warnings for deprecated lifecycle hooks and print single message after reconciliation rather than one per component type Relates to PR 12028 and this comment discussion r162420575,,bvaughn,2018-01-18 20:44:46,2018-01-25 05:43:07
IS,Native ecmascript module for React and ReactDOM,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug This probably is a feature request since the root of this is considering the build tooling and questions on how to proceed with my efforts What is the current behavior No native ecmascript module output and the current build tools do not easily allow adding a native ecmascript module build target While investigating a workflow using a native ecmascript module version of React and ReactDOM in browsers I found no implementation which outputs native ecmascript modules One can use a wrapped version of the transpiled versions with added export statements but transpiling would not be necessary for browsers supporting ecmascript modules natively Even spread operators are supported by these browsers although they are not fully supported by AST generators or other tools due to the fact that the spec for that is not finalised After some test projects and different build tools I built a simple proof of concept which outputs ecmascript modules that can be used in modern browsers The challenge and question I have is that the tools and settings used in the POC contradict the current build settings and tools So I am wondering if this is something that can be added as a build target or that this is something that is better suitable for an external repo for the time being I would love to make this happen but I would like to hear if this is something that is deemed worth while and if so in what would be the preferred way of implementing this During my investigation I did not find an easy way of doing so without changing a considerable amount of code and build tooling Making this a relatively high risk endeavour Webpack vs Rollup different settings needed for Babel and named exports instead of CommonJS module exports pattern to name a few and all the effects those have on the build process make this somewhat complex To clarify some things these are links to the POC is repo which outputs native ecmascript modules for React and ReactDOM repo with a minimal setup to test if a working app can be made these modules in a browser If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below What is the expected behavior Preferably a build target for native ecmascript modules Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React not relevant,,"gaearon,gaearon",2018-01-25 09:38:31,2018-01-25 11:35:13
IS,use setState in componentWillReceiveProps,if i use setState in componentWillReceiveProps the question1 is in doWhatever this props is new props next props or old props prev props the question2 is when does the nextProps become this props,,gaearon,2018-01-25 06:43:39,2018-01-25 12:24:40
IS,i am trying to run create react app command,F reactjs project 1 create react app hello world Creating a new React app in F reactjs project 1 hello world Installing packages This might take a couple of minutes Installing react react dom and react scripts npm ERR Unexpected end of JSON input while parsing near ' dir recursive 0 1 ' npm ERR A complete log of this run can be found in npm ERR C Users HP AppData Roaming npm cache logs 2018 01 25T18 39 41 416Z debug log Aborting installation npm install save save exact loglevel error react react dom react scripts has failed Deleting generated file package json Deleting hello world from F reactjs project 1 Done npm version is 5 6 0,,"gaearon,gaearon",2018-01-25 18:52:12,2018-01-25 18:53:44
IS,RFClarification why is setState asynchronous,For quite a while I have tried to understood why setState is asynchronous And failing to find an answer to it in the past I came to the conclusion that it was for historical reasons and probably hard to change now However indicated there is a clear reason so I am curious to find out Anyway here are the reasons I often hear but I think they can not be everything as they are too easy to counter Async setState is required for async rendering Many initially think it is because of render efficiency But I do not think that is the reason behind this behavior because keeping setState sync with async rendering sounds trivial to me something along the lines of In fact for example mobx react allows synchronous assignments to observables and still respect the async nature of rendering Async setState is needed to know which state was rendered The other argument I hear sometimes is that you want to reason about the state that was rendered not the state that was requested But I'm not sure this principle has much merit either Conceptually it feels strange to me Rendering is a side effect state is about facts Today I am 32 years old and next year I will turn 33 regardless whether the owning component manages to re render this year or not To draw a probably not to good parallel If you would not be able to read your last version of a self written word document until you printed it that would be pretty awkward I do not think for example game engines give you feedback on what state of the game was exactly rendered and which frames were dropped either An interesting observations In 2 years mobx react nobody ever asked me the question How do I know my observables are rendered This question just seems not relevant very often I did encounter a few cases where knowing which data was rendered was relevant The case I remember was where I needed to know the pixel dimensions of some data for layout purposes But that was elegantly solved by using didComponentUpdate and did not really rely on setState being async either These cases seem so rare that it hardly justify to design the api primarily around them If it can be done somehow it suffices I think I have no doubt that the React team is aware of the confusion the async nature of setState often introduces so I suspect there is another very good reason for the current semantics Tell me more,,"milesj,gaearon,gaearon,gaearon,gaearon",2017-11-11 08:59:25,2018-01-25 19:48:28
IS,TypeError Cannot read property istate' of undefined with create react class,I am currently attempting to create a button which is red with the text Yes that when you click on it the button changes to a green color with the text Confirm before the final stage in which an action takes place Where I am currently at is defining buttonColor as a state which changes on the click of the button the initial color should be FD8F83 and the final color after the click should be A4D87C However I am currently getting the error TypeError Cannot read property istate' of undefined pointing to the style backgroundColor this state buttonColor line whenever the code is compiled on the webpage Defining initial state and behavior on click Does anyone have any ideas why this is I am brand new to React so I apologize if it is obvious I also learned React using createClass so I have been trying to piece together how to make this work with the new create react class package Any advice is greatly appreciated React 16 2 0 Chrome Version 63 0 3239 132 Official Build 64 bit,,"gaearon,gaearon,gaearon",2018-01-25 19:11:26,2018-01-25 19:52:30
IS,Debug render phase side effects in strict mode for DEV,Relates to PR 12083 Currently we double invoke component constructor render static getDerivedStateFromProps and setState reducer functions if the debugRenderPhaseSideEffects feature flag is on We should also do this if we are inside of a StrictMode subtree However it is likely that the new StrictMode element will be present in production apps so I believe it is important that it not negatively impact performance Strict warnings like all warnings only impact dev mode but up until now the double invoked lifecycles impact both dev and prod This is actually a good thing at Facebook since it helps us identify potential bugs in production and we can easily limit it to only impact developers but I think it would complicate the story for external users because of the negative performance impact I propose that we continue to observe the debugRenderPhaseSideEffects flag for dev and prod since this impacts Facebook only but only double invoke for strict mode in dev Enabling this behavior greatly complicates our incremental rendering tests see below issuecomment 360517198 so I will also be converting these to be internal so they can explicitly override the feature flag before running I think this is okay since the tests that break all use the noop renderer which is not published to NPM,,"bvaughn,bvaughn,bvaughn,bvaughn,bvaughn",2018-01-24 23:20:58,2018-01-25 22:30:54
PR,Debug render phase side effects in strict mode,Resolves 12089 A new feature flag has been added debugRenderPhaseSideEffectsForStrictMode When enabled StrictMode subtrees will also double invoke lifecycles in the same way as debugRenderPhaseSideEffects By default this flag is enabled for DEV only Internally we can toggle it with a GK This breaks several of our incremental tests which make use of the noop renderer Updating the tests to account for the double rendering in development mode makes them significantly more complicated The most straight forward fix for this will be to convert them to be run as internal tests only I believe this is reasonable since we are the only people making use of the noop renderer,,"bvaughn,bvaughn,gaearon,bvaughn,sebmarkbage,bvaughn,gaearon,bvaughn",2018-01-25 18:12:46,2018-01-25 22:30:54
IS,Ca not use React Fragment,Do you want to request a feature or report a bug bug What is the current behavior broken in runtime If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below 1 Use React Fragment React Fragment or syntax to render mapped fragments What is the expected behavior I expect the component to render It works fine when rendering as an array I just do not want to type a comma between my elements It also works fine if I use a div but that is not semantically correct Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React v16 2 0 Chrome Version 63 0 3239 132 Official Build 64 bit Mac 10 12 6,,"gaearon,gaearon,gaearon,gaearon,gaearon",2018-01-25 19:36:43,2018-01-25 23:39:42
IS,Question react app embedded as div in a container setState refreshes the container,We have observed a peculiar behavior and we are unsure whether this is by design or an issue with the specific environment basically we have a React app rendering in a div included in a web container and if we trigger a component local state change by calling setState then the whole of the web component page is refreshed thus loading the React app from scratch loosing the app state then We were expecting a setState to refresh the App only not the whole page Is not this expected behavior the proper way to react in this scenario Thanks in advance,,,2018-01-24 12:05:00,2018-01-26 13:25:11
PR,Move a comment to its original location,type was added in 11818 by below the comment that belongs to domNamespace,,,2018-01-26 13:32:08,2018-01-26 13:34:06
PR,Handle nested Fragments in toTree 12106,Resolves 12106,,"maciej-ka,gaearon,aweary,maciej-ka,aweary,gaearon",2018-01-27 20:16:28,2018-01-27 23:03:27
IS,react test renderer toTree does not yet know how to handle nodes with tag 10,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug bug What is the current behavior Invariant Violation toTree does not yet know how to handle nodes with tag 10 What is the expected behavior returns a tree Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React 16 2 0,,"gaearon,maciej-ka,aweary",2018-01-27 15:52:20,2018-01-27 23:03:55
IS,Automatically fix JavaScript errors on pull requests,I run Stickler CI which is a service aimed at improving code quality by simplifying code review by automating code feedback in pull requests We just launched auto fixing for JavaScript through pull request commits As a JavaScript open source project our service will save you time and brain power by automatically fixing style errors If you are interested in trying out our product we can submit a pull request with the configuration file but a maintainer will need to enable webhooks by logging into and enabling the webhook Thank you,,gaearon,2018-01-23 16:10:55,2018-01-28 13:06:04
IS,Question is React Fiber using GPU,Hi React Team Here in Clovis pro React 15 4 we want to enhance React performances on quite old phones and tablets Sometimes multi component updates could slow down the phone and make the UX uncomfy that is normal basic javascript uses the CPU and old hardware have low CPU To enhance React performances did you made and update in React Fiber to directly allow the javascript to be run by the GPU Or do you know libraries to make that global hack Thanks wink ps GPU is already used in CSS with Translate3D to make animations smoother,,gaearon,2018-01-22 16:57:51,2018-01-28 13:07:03
IS,Refs Must Have Owner Warning,Reporting a bug The problem I'm having is in the interplay of several packages but I feel that the only package actually doing something wrong here is react Versions react 16 2 0 also happened with 15 something node js 7 9 electron 1 7 10 windows 10 Current behavior I get the error message from here although none of the three explanations is true Actually react is loaded twice but it is the same version and there is little I can do to prevent it What happens as far as I can understand is this my application imports react from in two ways application react application node modules myapi react both get the same react module from the same path However the myapi module is installed via yarn link Now on case insensitive filesystems yarn link can cause the file path to have different caseing i e my application is in C application but the resolved link which node uses via require is c application so the case of the drive letter changes for the api and everything require d from the api So even though I call require areact' both times I end up importing C application node modules react and c application node modules react which is obviously the same thing yet it means react is loaded twice Now the ref that is triggering the error is also not added by me but by react bootstrap which adds a string ref So my code has no bug I'm not using different react versions or different case when importing react in my code react bootstrap does not do anything wrong because string refs are still allowed node is not doing anything wrong since it documents that require is not guaranteed to always return the instance yarn is not doing anything wrong because on a case insensitive filesystem there is nothing wrong with using different cases for the drive letter between link source and link target react however relies on require always returning the same instance which it can not What is the expected behavior React does not rely on behavior that is documented to be unreliable,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2018-01-17 09:11:10,2018-01-28 13:14:22
IS,onPaste event firing on wrong target,Do you want to request a feature or report a bug bug What is the current behavior pasting this string 12 11 2013 into either of the 2 input fields one of type date and the other text Chrome Version 63 0 3239 132 Official Build 64 bit For Firefox 57 0 1 the paste event does not trigger on the input type date at all,,gaearon,2018-01-17 03:57:26,2018-01-28 13:15:53
IS,React test utils do not reset form inputs upon simulated reset button click,Do you want to request a feature or report a bug Bug What is the current behavior In one of my components I have a form with few inputs and reset button In my tests I find that button simulate a click on it but none of the inputs are reset Reproduction See here Component above shows how it should be but the test shows the expected behaviour does not occur What is the expected behavior Simulated click on the reset button causes the inputs in the form to be reset Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React and ReactDOM 16 2 0 testing with Jest 21 2 1,,gaearon,2018-01-21 15:58:44,2018-01-28 13:19:13
IS,Access Component from child is instance,I am creating a small generic state management based on the Proxy object Now I am writing a React helper but I have found an issue to create the HOC I need access to Component from React Looking at the source code for Component it does not seem like it can should be a standalone function This library should be able to be used independently so making everyone download React is not feasible I have navigated through the official HOC documentation past issues and Google but could not find any way to retrieve Component from the passed component to my HOC This is the code I am working with not yet in the repo linked above I think that is not the way Javascript React works but I figured I will ask here since chances are you will know way better than me whether something like this is possible or not Do you want to request a feature or report a bug Request a feature I think,,"gaearon,gaearon",2018-01-26 10:15:55,2018-01-28 13:24:28
IS,Extend className manipulation,Currently we are doing string manipulation outside React Starring classnames and it works perfectly but after a while writing code it feels a little verbose The prop className is a plain string because it is directly mapped to DOM Element property Let is not create a polymorphic Frankenstein here Keep it as close to pure JS DOM as possible My suggestion is not about changing but adding Since a long time ago not for Microsoft DOM Element has the classList method It works greatly for direct manipulation but it would not fit JSX declarative syntax How about extending the components with a classMap prop that would work pretty much like classnames mapping class names keys to conditional values Upon rendering that component React would merge classNames and classMap into a single string to be passed down the render as the good old plain string classNames Angular has something like this for a long time class prop is a plain string ngClass directive makes the magic,,gaearon,2018-01-26 04:45:28,2018-01-28 13:28:33
IS,Error event fired twice when in development mode,Do you want to request a feature or report a bug bug What is the current behavior Error event fired twice when in development mode In the example you can see that ' error' is logged twice while I only expect to see it once Note this issue does not happen with the production version of react If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below codepen demo static html reproducing the problem What is the expected behavior I expect to see ' error' logged once Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React reproduced on react v16 2 0 Chrome 63 0 3239 132 OSX 10 10 5,,gaearon,2018-01-25 17:01:43,2018-01-28 13:30:58
IS,Feature request middleware,This is an incomplete draft for a feature I think could be really cool It can replace higher order components and context in a way I think is more in the component spirit of React I do not know if this feature is feasible or desirable for React especially as it would lead to a bigger API surface The proposal is written as if it was documentation to give a feel for how it would be to use it About React middleware A middleware is applied somewhere in the component tree and are instantiated just after child components are instantiated and just before they mount In this context child components means child components at any depth Middleware is used just like normal components but it works slightly differently When a middleware element is used it added to the middleware stack If it is already on the middleware stack it removed from the stack and pushed to the end with the most innermost props Simplified example In addition to the actual classes the stack also includes its most recent props But this is roughly how it works Why middleware React middleware can replace two problematic patterns used with React Context The h2 on context in the React docs says Why Not To Use Context Context is however a very useful feature And people have been and will continue to use and abuse it in the forseeable future React Router has started abusing context in its most recent version which shows that there is clearly a need here With middleware as I propose it you would be able to inject props into an arbitrary subtree of your app This has performance implications but would be an ideal scenario for libraries such as React Router as the relevant props or as it is now context rarely changes With middleware shouldComponentUpdate will still function like you would expect Higher order components A primal rule of programming is DRY When using Mobx with React you must use the observer decorator on all reactive classes This is not a really big deal but not having to include that would reduce the size of every single observer component by two lines and most importantly I would not forget it When creating a higher order component static properties are no longer available The package hoist non react static is designed so that you should be able to access static properties of higher order components transparently If a static property is initialized in the lifecycle methods of a component it will however not be proxied Creating higher order components is also a messy affair With middleware you could achive the same thing in a React way To replace connect from react redux you could set shouldMiddlewarePropagate to return false and it would affect only one component Alternatively you could use static properties for mapStateToProps and mapDispatchToProps,,"gaearon,gaearon",2018-01-23 23:51:58,2018-01-28 13:46:35
IS,expose component methods,Do you want to request a feature or report a bug request a feature What is the current behavior methods of components cannot be exposed What is the expected behavior I would like to be able to expose methods of a component so it can be used from a container component it can be done through an attribute similar to aref' like for example 'expose' For example imagine a have a car component and a wheel component the car would like to rotate the wheels using a method that the wheels expose to the cars Something like Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React all versions all browsers,,"gaearon,gaearon,gaearon",2018-01-22 19:39:26,2018-01-28 13:49:35
IS,setState callback is never called and component state does not update production only,Using React 16 2 0 I'm running into a very strange behavior when things work fine locally but in production using Meteor setState stops working Here is what I have noticed setState is callback is never called The DOM does not reflect any changes The Devtools do not reflect the changes Calling this forceUpdate after setState does not do anything On the other hand r state returns an object with the correct updated state setState returns an object with the correct updated state I'm sure the problem is on my side somehow it is a fairly complex component which I did not even write myself to make matters worse but I thought maybe I could get some tips on how to go along debugging this frustrating issue,,gaearon,2018-01-26 10:45:35,2018-01-29 01:01:38
IS,router of React,hi I'm using packages like react router and react router dom Does react has default router Is npm packages like react router and react router dom is part of react,,"M-ZubairAhmed,gaearon",2018-01-28 21:24:35,2018-01-29 10:23:10
IS,Automatically assigning keys,Do you want to request a feature or report a bug I want to request a feature What is the current behavior Currently developer should manually assign a key to each element in an array even if he knows the elements in the array nor their order will not change I prefer fourth methods as second method may lead to some conflicts Third method makes me feel I'm doing dirty things or I'm touching internal cogs in React Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 Browser and OS are not relevant,,gaearon,2018-01-29 14:38:12,2018-01-29 14:43:27
IS,Document the use of setState in componentWillUnmount,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Feature What is the current behavior Excerpt from documentation componentWillUnmount is invoked immediately before a component is unmounted and destroyed Perform any necessary cleanup in this method such as invalidating timers canceling network requests or cleaning up any subscriptions that were created in componentDidMount The docs do not mention if setState can be used in componentWillUnmount Consider the following example where the state showGreeting is undone by timer over time But since the timer has to be invalidated in componentWillUnmount there no other place to reset the state Is it legal to call setState from componentWillUnmount Given that it can be asynchronous it feels that setState may not be invoked until after component is actually unmounted which may produce a warning in my understanding until componentWillUnmount actually pumps up the state is dispatch queue manually to ensure that all state changes land in component before it is too late If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below What is the expected behavior Not sure Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React 16 2 Webkit,,"gaearon,gaearon,gaearon",2018-01-29 13:25:26,2018-01-29 15:10:02
PR,React lifecycles compat,In order to support the upcoming react lifecycles compat module and various edge cases that are possible when considering eg class inheritance and other React like libraries this PR makes the following changes If a component defines static getDerivedStateFromProps React will not invoke any of the following instance methods componentWillMount componentWillReceiveProps and componentWillUpdate If React detects that a component has been polyfilled by react lifecycles compat based on the presence of a suppressDeprecationWarning flag it will suppress both deprecation and unsafe lifecycle warnings Those lifecycles wo not be executed anyway and in this case it can be assumed the lifecycles only exist for backwards compatibility purposes All affected tests have been updated and some new ones have been added I have left a TODO comment in a few tests to replace an inline approximation of the new polyfill with the actual module once it is been published,,"bvaughn,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn",2018-01-26 18:22:18,2018-01-29 16:06:51
PR,add 'autobind' method to Component class,Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Run yarn test prod to test in the production environment It supports the same options as yarn test 6 If you need a debugger run yarn debug test watch TestName open chrome and press Inspect 7 Format your code with prettier yarn prettier 8 Make sure your code lints yarn lint Tip yarn linc to only check changed files 9 Run the Flow typechecks yarn flow 10 If you have not already complete the CLA Learn more about contributing,,gaearon,2018-01-29 16:13:07,2018-01-29 16:22:29
IS,Error when I save the component ref to state,Do you want to request a feature or report a bug Bug What is the current behavior Error when I save the component ref to state If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below What is the expected behavior it seems like the ref callback is called too many times and every time have a different argument and this will fix the problem but I do not know why Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React V16 2 0,,"gaearon,gaearon",2018-01-29 14:30:09,2018-01-29 17:32:04
IS,Getting minification warnings even with DefinePlugin and UglifyJSPlugin,Hello I have scoured through other issues and can not figure out why the warning is still around because it feels like I have done everything Here is the setup Build scripts Using React v15 4 2 and Webpack v1 14 0 I'm not sure what I'm missing DefinePlugin and UglifyJsPlugin seem to be declared properly and the NODE ENV is set to production up in the script Any help would be greatly appreciated Thank you,,"gaearon,gaearon,aweary",2018-01-10 23:43:56,2018-01-29 19:23:01
PR,Updated ReactFeatureFlags shim,,,bvaughn,2018-01-29 22:50:34,2018-01-30 00:11:19
PR,Replace unstable AsyncComponent with unstable AsyncMode,Mirrors the StrictMode API and uses the new Mode type of work Also changes fiber internalContextTag fiber mode now that we have a better name,,"acdlite,sebmarkbage,sebmarkbage",2018-01-30 02:23:59,2018-01-30 03:12:00
PR,ReactDOM flushControlled,New API for wrapping event handlers that need to fire before React yields to the browser Previously we thought that flushSync was sufficient for this use case but it turns out that flushSync is only safe if you are guaranteed to be at the top of the stack that is if you know for sure that your event handler is not nested inside another React event handler or lifecycle This is not true for cases like el focus el click or dispatchEvent where an event handler can be invoked synchronously from inside an existing stack flushControlled has similar semantics to batchedUpdates where if you nest multiple batches the work is not flushed until the end of the outermost batch The work is not guaranteed to synchronously flush as with flushSync but it is guaranteed to flush before React yields to the browser flushSync is still the preferred API in most cases such as inside a requestAnimationFrame callback,,"acdlite,sebmarkbage,acdlite,sebmarkbage,sebmarkbage",2018-01-30 03:12:44,2018-01-30 06:36:35
PR,Interactive updates,At the beginning of an interactive browser event events that fire as the result of a user interaction like a click check for pending updates that were scheduled in a previous interactive event Flush the pending updates synchronously so that the event handlers are up to date before responding to the current event We now have three classes of events Controlled events Updates are always flushed synchronously Interactive events Updates are async unless a subsequent event is fired before it can complete as described above They are also slightly higher priority than a normal async update Non interactive events These are treated as normal low priority async updates,,"acdlite,acdlite,acdlite,aweary,sebmarkbage,acdlite,sebmarkbage,acdlite,sebmarkbage,acdlite",2018-01-26 05:44:40,2018-01-30 07:49:10
IS,I have an error after deployed my react website I am using react 16 2 0 and this is the error,erreur1 visit for the full message or use the non minified dev environment for full errors and additional helpful warnings,,gaearon,2018-01-30 08:28:51,2018-01-30 10:55:23
IS,Add Seo support in reactJS without using SSR,Hi Team Currently I was working on SEO in my ReactJS application So How was thinking how to add different meta tags to each route I figured out using it with SSR but converting all applications to use SSR for SEO support is not a good option TIA,,gaearon,2018-01-30 12:43:40,2018-01-30 13:36:46
PR,Switch to JSX API for context,80 sure this will be the final API Merging this now so we can get this into the next www sync in preparation for 16 3,,"acdlite,gaearon,gaearon",2018-01-30 19:32:24,2018-01-30 21:06:13
IS,Concating react with other resources,Hi I want to use many libraries and frameworks in my project Can I concat React with other framework like angular vue ember,,aweary,2018-01-30 14:39:07,2018-01-31 02:14:23
IS,Input not accounted for by form,Do you want to request a feature or report a bug A bug What is the current behavior Inputs rendered by React controlled or uncontrolled are not accounted for when submitting forms For instance will produce foo1 bar1 I can not get a fully working example on CodeSandbox as this requires looking at the resulting HTTP request or having jQuery or such to serialize the form What is the expected behavior The second example should produce foo1 bar1 foo2 bar2 React components should be usable in regular forms Note browser inspectors show expected value s and name s for the React rendered inputs However it seems the value attribute uses getters and setters for these inputs whereas plain HTML inputs value s are just strings Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 2 0 Tested on Chromium 64 0 and Firefox 58 0 on Archlinux,,"aweary,aweary",2018-01-28 14:36:57,2018-01-31 02:25:43
IS,Unexpected DOM elements in list rendering with duplicate keys,Do you want to request a feature or report a bug Reporting a bug What is the current behavior Unexpected DOM elements in list rendering If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below just switch the tabs there are unexpected DOM elements What is the expected behavior no unexpected DOM elements Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React tested with React 16 no extra elements with React 15 Duplicate keys are mistakes but these DOM elements should not be there anyway,,"aweary,aweary",2018-01-31 02:33:40,2018-01-31 03:57:55
IS,How to fix Only secure origins are allowed with nginx,I do not want to use https thanks,,gaearon,2018-01-31 08:12:37,2018-01-31 11:15:50
PR,Update create react class 15 6 3 and update tests,Addressing some TODOs now that create react class 15 6 3 has been released,,bvaughn,2018-01-31 17:21:33,2018-01-31 17:41:09
PR,Add react lifecycles compat and update tests,Now that react lifecycles compat has been published to NPM update tests to use the real polyfill,,bvaughn,2018-01-31 18:13:57,2018-01-31 18:34:00
IS,data reactId property,Hi I have many projects written with reactjs in one of this project the data reactid property is existing In others isn t existing But what is this,,gaearon,2018-01-31 18:38:19,2018-01-31 18:56:19
IS,What is Server Side Rendering,OK What is Server Side Rendering,,jquense,2018-01-31 19:32:20,2018-01-31 19:46:14
IS,How to update State in a batch with react 16 from outside the render cycle,App has many state changes coming in from external sources calling setState for each from outside the render cycle hurts performance a lot as each setState starts a new render cycle How can i achieve this with react 16,,gaearon,2018-02-01 06:22:20,2018-02-01 10:40:33
IS,Characters in String objects are rendered as separate elements,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Bug What is the current behavior Characters in String objects created with new keyword are rendered as separate elements For English this is not visible for the user but for Farsi the letters become disconnected for them it looks like t h i s If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below p new String hello p Five separate text elements are rendered In Chrome Inspector it looks like this image What is the expected behavior The value represented by the String object to be rendered just like any native string value would Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 1 0 17 tested on Chrome on Ubuntu Likely unrelated to version or OS,,"gaearon,gaearon,aweary",2018-02-01 11:39:55,2018-02-01 12:58:07
IS,What is synthetic Event System,Hi Am new to react So I dont know about synthetic event Can anyone help me to explore this topic,,jquense,2018-02-01 16:45:06,2018-02-01 17:16:21
PR,Exposes the host container to prepareForCommit and resetAfterCommit,This commit exposes containerInfo which per my experience is the second parameter of the render functions is that correct to prepareForCommit and more importantly resetAfterCommit I'm using this change in my custom renderer so that I can trigger a flush of my visual display after the React tree has been reconciled while not needing my visual server to be stored in a global,,"sebmarkbage,acdlite,acdlite,gaearon,sebmarkbage,sebmarkbage,acdlite",2018-01-25 20:39:32,2018-02-01 18:38:20
PR,Invoke both legacy and UNSAFE lifecycles when both are present,This is to support edge cases specifically with create react class where a mixin defines a legacy lifecycle but the component being created defines an UNSAFE one or vice versa I did not warn about this case because the warning would be a bit redundant with the deprecation warning which we will soon be enabling I could be convinced to change my stance here though Added some new tests for this on the various renders that it impacts default ssr shallow Also verified that this change fixes several all that I have tested so far of the test that failed internally for me on www after running the rename codemod,,"bvaughn,gaearon,gaearon,bvaughn,gaearon,bvaughn,gaearon,gaearon",2018-02-01 18:02:26,2018-02-01 19:15:58
IS,Meta is charset is rendered as camel case,When I use react dom is renderToString the meta property charset is rendered with camel case like this meta charSet UTF 8 insted of meta charset UTF 8 I'm using react and react dom of version 16 2 0,,aweary,2018-02-01 11:07:25,2018-02-01 21:36:36
IS,not working context,,,milesj,2018-02-02 04:50:40,2018-02-02 07:22:07
PR,simplify performWorkOnRoot,Simplify if else branch in function performWorkOnRoot to delete some duplicate code,,,2018-01-21 17:37:54,2018-02-02 09:49:26
IS,Can modify parent component is state through child component is props,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Bug What is the current behavior It is possible to modify the state of a parent component through child props if the prop is an array or object This seems to be a byproduct of the fact that javascript passes arrays objects into functions by reference instead of by value If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below I have shown what I mean in this codepen What is the expected behavior You should not be able to modify parent state in a child component through props since props are normally assumed to be immutable It is easy to prevent this behavior by doing a deep clone of array object before it is passed in as a prop Just do a slice on the value array in my example to see what I mean Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React I have tried React 15 6 1 and 16 2 0,,gaearon,2018-02-02 03:49:12,2018-02-02 11:25:09
IS,Question call a method of a react component instance,I'm a bit new to react If you have any advice or pointers on my current implementation i'm always open for advice Question So i extended the react component class to create a new component I'm doing it like this because an element could be on different places on the page We are currently in a transition of moving all te components to react But we are not there yet So if i have multiple components on the page How can i call the method of a specific component instance Is there a way to get the instance by selecting the dom element Or should i approach this in a totally different way,,gaearon,2018-02-02 10:50:09,2018-02-02 11:39:26
IS,Safari 11 errors when using Fragment upon hydrating,Do you want to request a feature or report a bug This is a bug What is the current behavior Safari 11 both Mac OS X and iOS throws error 130 Which errored in Safari 11 until I replaced the Fragment with a div In this case the Modal component was also connected to Redux and returned node using createPortal In another scenario we have CMS content using a custom renderer where JSON is transformed for React rendering and with some components there is a complex context based logic where using Fragments anywhere causes error in Safari 11 Similarly the issue was fixed by replacing Fragment with a div or a span depending on case Currently the only things I have been able to track together is the use of Fragments and context It is possible that the bug requires some other condition but we have a large complex project and I'm not an Apple user which complicates things for me It is also very inconvenient that this bug only happens with production React and bundle which results in very unhelpful error messages If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below This is my current best attempt in isolating the issue but it does not replicate it What is the expected behavior Safari 11 should not throw during hydrate when using a mixture of Fragment and context Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 2 production only no issue with development version Safari 11 Safari 10 works fine,,"gaearon,gaearon,gaearon",2018-02-02 15:24:12,2018-02-02 15:57:46
IS,Upload files in a ftp server location using reactjs,Hi Please let me know if anyone knows how to upload files in ftp server using reactjs,,gaearon,2018-02-03 06:18:20,2018-02-03 14:46:28
IS,Using a react app without rendering a html piece,I come from Angularjs 1 6 x What is i need is that using a react app without rendering a html piece like ReactDOM render null document querySelector container this is my container that contain some html tags that want to use my react app model and logic in it FYI I can achieve this scenario with Vuejs My question is can I achieve this scenario with React,,gaearon,2018-02-03 11:10:20,2018-02-03 14:48:59
IS,process CI check looks like a typo,if process CI check looks like a typo here L13 May be I'm wrong but I have not found what process CI is If CI is circleci environment variable descriptions it should be checked as process env CI,,gaearon,2018-02-03 19:28:28,2018-02-04 01:56:07
PR,Fix process CI typo,Closes 12145,,gaearon,2018-02-03 22:50:26,2018-02-04 01:56:07
IS,CI broken,Looks like commit 8a995f7 broke our CI Not sure why The release script passed all 4 test variants dev prod and bundle dev prod At first I was unable to reproduce the broken behavior but after doing a fresh install rm rf node modules yarn install I'm able I'm not sure yet what is causing this Perhaps it has something to do with Yarn workspace and prerelease versions,,"bvaughn,bvaughn,bvaughn",2018-02-04 03:14:18,2018-02-04 16:54:43
PR,Pre release version fix,Resolves 12147 Release script properly updates peer deps for prerelease versions Local release script test Fix previous release scripts release build js v 16 3 0 alpha 0 dry,,"bvaughn,gaearon,bvaughn",2018-02-04 16:11:30,2018-02-04 16:54:43
PR,Release script does a fresh Yarn install of deps,This would have caught the recent Yarn workspaces semver issue sooner Probably should have included this with 12148 sorry Also relates to 12147,,bvaughn,2018-02-04 17:02:40,2018-02-05 01:06:15
PR,Handle nested Fragments with multiple children for ReactTestRenderer,Fixes 12106,,"gaearon,gaearon,gaearon",2018-01-28 15:14:11,2018-02-05 10:29:50
IS,update rollup plugin node resolve to 3 0 0,Do you want to request a feature or report a bug feature What is the current behavior Just update rollup plugin node resolve to 3 0 0 What is the expected behavior We would like to use rollup plugin node resolve 3 0 in debian We are packaging react as a dependency of gitlab 9 5 so apt get install gitlab works to setup a gitlab server pr that removed this option Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React It is not dependent on react version only its build dependency,,"gaearon,gaearon,gaearon",2018-01-23 07:06:02,2018-02-05 10:40:01
IS,Typescript definition for SFC returning fragment string,Do you want to request a feature or report a bug Most likely a bug What is the current behavior If you open that sandbox and wait for a compiler to catch up you see that TextReturningComponent has an error It is expecting ReactElement any null to be returned,,"gaearon,gaearon,gaearon,gaearon",2018-02-05 10:59:52,2018-02-05 11:30:39
PR,Fix fragment and portal handling in toTree,This fixes Since Enzyme already supports fragments and has battle tested this support I used the same algorithm with a few differences We do not need this L98 L100 because test renderer does not inline a single host text child I believe these lines L71 L73 are slightly wrong and do not work for multiple child case I filed about this This gets the new test I added passing,,gaearon,2018-02-05 10:33:27,2018-02-05 16:55:49
PR,Expose persistent reconciler to custom renderers,Ideally we would write a test for this via react noop but that requires some rewiring so I did not bother It is even more experimental than the main react reconciler anyway We can fix this later Test plan This was enough to smoke test it and verify the flag gets set if you remove persistent it crashes There might be other issues but I think it is good for starters,,"gaearon,gaearon,iamdustan",2018-02-05 11:05:46,2018-02-05 16:56:22
IS,Provide a better message when component type is undefined with SSR,This might be a reference to this one issuecomment 346302374 The problem still exist So trying to render with server side and got this error I do not have this notation in my code but this might be a problem with dependencies Thx for help,,"aweary,gaearon,gaearon,gaearon,HeroProtagonist,gaearon,HeroProtagonist",2017-12-21 14:55:26,2018-02-05 17:09:10
PR,Clearer ssr error message 11902,Resolves 11902 Only in development was a warning L280 being thrown about ReactElements with non string type Nothing stopped the code from continuing to execute calling the string method on invalid types I added a check in ReactPartialRenderer js that throws an error before toLowerCase is called Also a simple test of this new behavior,,"HeroProtagonist,gaearon,HeroProtagonist,gaearon,HeroProtagonist,gaearon,gaearon,gaearon,gaearon,gaearon,HeroProtagonist,HeroProtagonist,HeroProtagonist,HeroProtagonist,gaearon",2018-01-05 03:55:45,2018-02-05 17:09:11
IS,Change lifecycle deprecation warnings to low pri,Any warnings driven off of warnAboutDeprecatedLifecycles should use shared lowPriorityWarning rather than fbjs lib warning to avoid thrashing automated tests,,bvaughn,2018-02-03 17:17:38,2018-02-05 21:39:08
PR,Changed cWM cWRP cWU deprecations to low pri warnings,Resolves 12144,,bvaughn,2018-02-05 21:04:59,2018-02-05 21:39:08
IS,Getting started docs are terrible,I just came back to react after about a year or so of not using it and now the getting started docs are pretty much not helpful in the slightest All the docs are now is just links to other websites without any instructions on how to get a react project running I remember a year ago back in react 15 the docs had a step by step walkthrough for how to set up and get a project running from scratch and now they are just links to websites without react specific instructions What happened to the docs when did they become so useless There needs to be a step by step guide added back to the docs a guide that will get you from having nothing to running it in the browser instead of just links to other websites that do not have anything to do with react I remember back in react 15 you could run through the guide and have a hello world app running within 10 minutes no problems I have been trying to figure it out with these new docs for over an hour now and still 0 luck getting this running The instructions used to actually be instructions basically saying install this then that then run this command in terminal then do this and so on The docs now just say well you can use this then has a link to a site that has nothing to do with react there is not even any sort of instruction on the react website on what to do with that just the link without any context around it Can these docs please be reverted to the old versions or actually create a proper getting started page to get you from nothing to running,,"milesj,gaearon,jquense,jquense,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2018-02-05 19:36:12,2018-02-05 21:58:57
IS,react16 unstable renderSubtreeIntoContainer execution order,What is the current behavior From react16 unstable renderSubtreeIntoContainer execution order has been changed I know it is an old API and createPortal has replaced it and I'm starting to switch to it in my codebase But I'm still depends on some libraries that use the old API So just for the matter of knowing what has change I wrote in the link the order of which the functions has been executed in react15 and 16 As you can see in react16 the componentDidMount of the App is calling before his children gets mounted and in react15 it is called only after Is this behavior change intentional,,gaearon,2018-02-05 22:51:02,2018-02-05 23:02:54
IS,react test renderer Asynchronous rendering guarantees,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug I think this is just a question As I understand it React is newer Fiber architecture introduces an asynchronous rendering pipeline which allows for better prioritisation of work I'm also aware that in version 16 React is still expected to render synchronously Looking forward though when using react test renderer especially the ReactTestInstance L466 L512 helper APIs what guarantees are safe for a developer to lean on After creating a test renderer instance is it safe to immediately introspect the instance to look for a child node with a given type Does this differ from components with user space asynchrony For instance if I have a class component with a child node that I want to make a test assertion against is this safe If not is there a safe way to flush pending reconciler changes or check for pending work Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React I am seeing this failure when running react 16 0 0 with react test renderer 16 0 0 in jest 22 1 4 while running in node 8 3 0,,gaearon,2018-02-05 05:00:31,2018-02-05 23:36:59
IS,Add string ref warning to strict mode subtrees,,,bvaughn,2018-02-05 20:23:23,2018-02-06 15:43:32
PR,Warn about string refs within strict mode trees,Took an initial stab at warning about string refs within a strict tree There are a couple of things I feel uncertain about What is a better more informative warning message than the one I wrote Is the approach of deduping based on the returnFiber display name reasonable For the time being I have linked fb me react strict mode string ref to a little blurb in our current documentation Where should I link it long term Resolves 12158 Relates to 1373,,"bvaughn,bvaughn,bvaughn",2018-02-06 01:26:58,2018-02-06 15:43:32
PR,String ref warning shows name of ref,Follow up for PR 12161 It occurred to me that the error message could be a bit more helpful if we showed the ref name,,bvaughn,2018-02-06 16:48:58,2018-02-06 17:00:45
PR,Revert deprecation warnings for custom event plugin injection,Reverts the warning introduced in 3e64b18540d474c88c440080681673faea5d3186 as planned in 12152,,gaearon,2018-02-06 18:28:35,2018-02-06 18:39:04
PR,Adds createRef as per RFC,This PR adds the React createRef API which can be thought of as a replacement for those who use string refs or for those who do not need the powerful features from callback refs To find out more about this new API see its respective RFC Example,,"trueadm,bvaughn,trueadm",2018-02-06 11:59:12,2018-02-06 20:19:49
IS,can not edit the wiki,Hello I can not edit the wiki to add my website to the list there is editing disabled,,"gaearon,aweary",2018-01-26 16:58:31,2018-02-06 21:02:34
PR,0 12 stable,Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Run yarn test prod to test in the production environment It supports the same options as yarn test 6 If you need a debugger run yarn debug test watch TestName open chrome and press Inspect 7 Format your code with prettier yarn prettier 8 Make sure your code lints yarn lint Tip yarn linc to only check changed files 9 Run the Flow typechecks yarn flow 10 If you have not already complete the CLA Learn more about contributing,,,2018-02-06 22:50:22,2018-02-06 23:49:30
IS,Why can not we use both prevstate function callback as parameters in setState,,,"aweary,gaearon",2018-02-06 17:06:28,2018-02-07 00:44:03
PR,Fix server render strict mode,Without this StrictMode failed on server rendering and get following error,,"chentsulin,gaearon,gaearon,chentsulin",2018-02-07 04:44:49,2018-02-07 07:51:14
PR,Fix server render async mode,12170 Fix unstable AsyncMode on server rendering too,,"chentsulin,gaearon",2018-02-07 11:30:00,2018-02-07 11:51:54
IS,Flow cannot find react dom is hydrate function,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Bug What is the current behavior Flow can not find react dom is hydrate function If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below Try the following code in a project using Flow What is the expected behavior It should not cause any Flow errors Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React react dom 16 2 0 node 8 9 4 flow 0 64 0 I do not think it has ever worked,,gaearon,2018-02-07 12:53:31,2018-02-07 13:30:45
IS,Is there a way to directly use a function like camelCasedStyleProps cssString from React,Case nb somewhat related to 11706 I'm tasked with integrating a WYSIWYG which uses an iframe which is ofc React agnostic We want to use the same theme object in the iframe as we use for style props on the website for consistency The properties in the theme object are as per React convention camelcased e g paddingTop However the CSS that needs to be put in this iframe needs to be 'CSS standard cased' Question Is there a way to directly use a function like camelCasedStyleProps cssString from React I'm guessing this is handled in the source is CSSPropertyOperations js but afaik there is no direct export of this,,jquense,2018-02-07 17:20:04,2018-02-07 17:28:35
IS,Removing a ref callback works differently on HostComponents vs ClassComponents,Do you want to request a feature or report a bug Bug What is the current behavior If you remove the ref from a mounted HostComponent on an update it calls the original ref with null If you remove the ref from a mounted ClassComponent on an update it does not call the original ref with null Note that it does not call ref1 passed to FooInner as ref with null Note that it does call ref1 passed to div as ref with null If you modify the ref from either a HostComponent or a ClassComponent change from ref this ref1 to ref this ref2 the original ref ref1 is called with null and the new ref ref2 is called with the instance take the sandboxes above and change the second Foo to ref this ref2 What is the expected behavior Honestly not sure but it should be consistent The reason this is different is because for HostComponents we decide to schedule a Ref effect on completeWork L464 L466 as long as current ref workInProgress ref For ClassComponents this decision is made on beginWork L184 L188 as long as workInProgress ref current current ref workInProgress ref which means if workInProgress ref is null the behavior is different hence this issue We should probably pick one and make it consistent Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Unsure it for sure is an issue in latest Fiber but I have not dug deep enough to see what happened in 16,,,2018-02-07 18:47:09,2018-02-07 20:13:42
PR,Fixed descrepancy between host and class component refs,Overheard mention this to Flarnie so I took a stab at it Resolves 12177 When a ref is removed from a class component React now calls the previous ref setter if there was one with null Previously this was the case only for host component refs A new test has been added that previously failed before the fix was made,,"bvaughn,bvaughn",2018-02-07 19:40:42,2018-02-07 20:13:43
IS,input Form causes React to crash,File a new Bug When adding an input form element in a Component React crashes This is caused in Mozilla Firefox Browsers version 20 0 1 for React version 16 0 0 and higher,,"aweary,aweary",2018-02-07 12:09:42,2018-02-07 22:17:09
IS,Request for Filipino Translation,Hi I would like to contribute on this project thru translation I would like to translate the necessary files to Filipino Hoping for your response Thanks,,aweary,2018-02-08 02:42:02,2018-02-08 02:58:50
IS,to access refs we recommend the callback pattern instead How,What do you mean by that Here legacy api string refs If you re currently using this refs textInput to access refs we recommend the callback pattern instead What callback pattern do you mean How do you mean to use it with refs,,gaearon,2018-02-08 09:36:36,2018-02-08 13:14:18
IS,Ref callbacks are not called at componentDidUpdate,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Bug What is the current behavior Refs documentation states ref callbacks are invoked before componentDidMount or componentDidUpdate lifecycle hooks However it seems that no ref callback is called at all when update occurs Closest things similar are I'm a bit confused because it seems nobody ever experienced something like this so I might be misunderstanding something If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below Here is a copy of the code in the link What is the expected behavior Ref callback should be logged just before Updated is logged Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Tried several versions of React 15 6 1 16 1 1 16 2 0 with Chrome 64 I'm running MacOS 10 13 3,,gaearon,2018-02-08 09:22:33,2018-02-08 13:18:04
IS,onChange behaviour on radio buttons in 15 6 2,Do you want to request a feature or report a bug A bug What is the current behavior When assigning the onChange listener on a radio button group or its form the event only fires once per radio button If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below I created a basic example of the problem which is working in jsfiddle since I guess its using the most up to date version of react I also found a workaround for the problem by using a components internal state detailed here What is the expected behavior The onChange event should fire every time the selected radio button changes Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Affected version is 15 6 2 and as far as I can tell it happens across all browsers I did not check previous but future versions and in 16 x this problem appears to be fixed sadly we are still in in the process of preparing for the update to 16 x,,aweary,2018-02-07 09:40:27,2018-02-08 17:45:29
PR,Enable warnAboutDeprecatedLifecycles for ReactNative,I am currently in the process of landing a codemod internally at Facebook to rename all of the deprecated lifecycles This codemod will also remove the lifecycles from react native open source components Once it lands the warnAboutDeprecatedLifecycles flag will help prevent the old lifecycles from sneaking back in Once this change lands here it will go down with the next ReactNative sync to fbsource and from there it will be auto synced to the react native repo and will make its way into the next RN release cut This process will take a couple of weeks,,"bvaughn,bvaughn",2018-02-08 18:07:54,2018-02-08 18:48:18
PR,Fix finding Fabric feature flags,Test Plan yarn build fabric inspect build react native ReactFabric dev js to see enablePersistentReconciler true,,sophiebits,2018-02-08 21:23:58,2018-02-08 21:28:18
PR,Fix mixing contexts together,Builds on 12187,,"sophiebits,sophiebits",2018-02-08 22:03:18,2018-02-08 22:18:12
IS,unexpected ContextConsumer or ContextProvider behavior,Do you want to request a feature or report a bug Bug What is the current behavior When use two or more contexts that created by createContext in the child tree of cxt2 Provider i use cxt1 Provider to set a new context of cxt1 i expect only the child consumer got the new cxt1 but the result is that the cxt2 Provider is next sibling is child tree got an unexpected cxt2 Provider is new context If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below createContext issue What is the expected behavior ContextProvider only affect the children node Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 3 0 alpha 0,,"gaearon,bvaughn,bvaughn,bvaughn,aweary,aweary,bvaughn,aweary,bvaughn,sophiebits,aweary",2018-02-08 06:34:51,2018-02-08 22:23:42
PR,Interleaved Context Provider bugfix,Resolves 12182,,"bvaughn,acdlite",2018-02-08 20:08:00,2018-02-08 22:23:42
IS,Add oldProps as additional argument to getDerivedStateFromProps,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug feature What is the current behavior getDerivedStateFromProps only receives the nextProps and previousState as arguments If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below The deprecated componentWillReceiveProps nextProps used to allow code like this props foo nextProps foo With the new getDerivedStateFromProps function there is no choice because it is a static method but to constantly copy nextProps foo into state in order to access it later This is illustrated in the example posted to twitter by What is the expected behavior Ideally if it is not difficult to implement the getDerivedStateFromProps would also take the current previous old props as an argument something like getDerivedStateFromProps nextProps prevState prevProps This would eliminate the need to constantly assign props to state purely for comparison purposes A quick look at the source does not make it clear to me how easy this would be though L456 Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React 16 3 0,,"bvaughn,bvaughn,bvaughn,bvaughn",2018-02-08 21:09:50,2018-02-08 22:39:19
PR,Use linked list instead of stack to keep track of fibers,This is closer to the original implementation We are already storing the current values on the context object itself so we should not be storing them on a stack too The only reason I added a stack of provider fibers was so we could reset all the in progress contexts during an interruption resetProviderStack I think the presence of a stack was misleading including to me because it is easy to confuse it with how the legacy context API works The linked list version is more straightforward and hopefully harder to screw up For resetProviderStack I'm using a Set to avoid duplicate entries No additional tests because the behavior should be the same,,"acdlite,aweary,acdlite,aweary,acdlite,acdlite",2018-02-08 23:26:46,2018-02-08 23:42:33
IS,How to know onError resons,,,,2018-01-30 09:14:34,2018-02-09 03:48:30
IS,Requesting for Localization tl Tagalog or Filipino,I would like to ask if I can translate your documentation in Tagalog or Filipino,,aweary,2018-02-09 07:29:14,2018-02-09 08:08:15
IS,BUG gulp util is deprecated in react 0 14 3,Hi everyone I have a problem with react 0 14 3 after run command npm install Log npm install npm WARN deprecated gulp util 3 0 8 gulp util is deprecated replace it following the guidelines at For resolve this conflict in my project i see some variant 1 Migrate to new react version it is a dangerous and pain variant 2 Fix react 0 14 3 source code change gulp util use to some packages from instruction Is it possible Help me PS Sorry my english,,gaearon,2018-02-09 08:01:55,2018-02-09 10:46:58
IS,Warn on ComponentName PropTypes,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Feature What is the current behavior Sometimes when my boss is stressing me out I add prop types this way Notice the upper case P in PropTypes React does not warn me about this typo What is the expected behavior I would love to get a warning about this and DefaultProps for that sake whenever I mis type them I would actually love to implement a pull request for this but I could not find anywhere else where you are warning about static properties like these Where would you like me to put this code,,,2018-02-09 12:11:27,2018-02-09 12:27:49
PR,Disable for of by default rewrite cases where it matters,for of introduces a dependency on Symbol and Symbol iterator and bloated code too with try catch in a potentially very hot DEV path We accidentally merged that in I'm adding this rule so we can be more vigilant You can ignore it for build and other scripts but please do not ignore it in the source,,"gaearon,gaearon,gaearon",2018-02-09 15:47:39,2018-02-09 16:11:23
PR,RFC Add react is package,Authoritative cross realm brand checking library Can be used without any dependency on react Plausible replacement for React isValidElement Builds on the idea of,,"sebmarkbage,trueadm,milesj,sebmarkbage,trueadm,sebmarkbage,sebmarkbage,MatteoVH,gaearon,aweary,sebmarkbage,aweary,gaearon,sebmarkbage,aweary,gaearon,sebmarkbage,sebmarkbage,bvaughn",2017-10-19 07:51:49,2018-02-09 17:50:37
IS,How to stub document object on Link click,Hi I am trying to mimic this function its being called on Link click React describe 'CAMNavPanelListItem with isRedirect false plus highlight li' let wrapper let a const navData title 'My Orders' isRedirect false isExternalLink false url ' orders' const location pathname ' orders' basename '' beforeEach a sinon stub document body 'getElementsByClassName' const li getElementsByTagName sinon stub const eleme a withArgs 'CAMNavPanel rewardsMenu' returns li console log 'Elements ' eleme getCall 0 wrapper shallow CAMNavPanelListItem navData navData location location wrapper setState currentView navData url it ishould render CAMNavPanelListItem with Link as well' expect wrapper find 'li' to have length 1 expect wrapper find 'li' hasClass 'active' to equal true expect wrapper find 'Link' to have length 1 it ishould click and activate activeClass' wrapper find 'Link' simulate 'click' button 0 afterEach wrapper unmount a restore Please help I am getting getElementsByTagName undefined,,gaearon,2018-02-09 05:24:02,2018-02-09 19:44:33
PR,Capture and recover from errors within a single render phase,A rewrite of error handling with semantics that more closely match stack unwinding Errors that are thrown during the render phase unwind to the nearest error boundary like before But rather than synchronously unmount the children before retrying we restart the failed subtree within the same render phase The failed children are still unmounted as if all their keys changed but without an extra commit Commit phase errors are different They work by scheduling an error on the update queue of the error boundary When we enter the render phase the error is popped off the queue The rest of the algorithm is the same In the future this same algorithm will be used for throwing non errors though those will be handled slightly differently rather than unwind directly to the boundary we will continue rendering the siblings Unwinding will work using the normal complete phase algorithm This is required for blockers unless we ship the two implementations side by side Open question could we release this in a minor version Error boundaries are a public feature On the other hand the changes are only observable if an error is thrown We also warn so nobody should be relying on error boundaries for anything other than their intended purpose Behavior that has changed Render phase error recovery is no longer synchronous in async mode They have the same priority as whatever component threw the error Previously when an error boundary captured an error the children were deleted and committed first before attempting to re render Now they are re rendered in a single pass without an extra commit to unmount componentDidCatch used to always fire in the commit phase Now it is always called in the render phase All errors are modeled as render phase errors Even errors that are thrown during the commit phase are implemented by scheduling an update entering the render phase then capturing Modeling it this way has many benefits the most obvious being that we no longer need to keep track of a global set of failed error boundaries But it means that this will now cause an infinite loop It is similar to the case where you call setState inside componentDidUpdate without a guard Please tell me if you disagree and I will do my best to convince you D TODO x Test that render phase error recovery now works in async x Do not capture non errors x Use resume mount instead of resume update path on initial mount x Do not complete parents of children that threw Moar comments Potential follow ups Add this unstable dispatchError for capturing errors outside React lifecycles I have implemented internally it is how React lifecycles work too but it is not exposed,,"acdlite,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,acdlite,acdlite,acdlite,acdlite,gaearon,bvaughn,gaearon,acdlite",2017-12-21 09:08:00,2018-02-10 00:14:51
PR,Add fragment validation function,resolve,,bvaughn,2018-01-25 13:58:58,2018-02-10 12:18:39
IS,rowSpan and colSpan render with inconsistent case,rowSpan is JS renders to rowspan in DOM but colSpan is JS renders to colSpan I'm not sure which is preferred but it should be consistent right,,gaearon,2018-02-10 05:59:23,2018-02-10 13:04:35
PR,Move ReactContext source to React package,This does not really change anything Just seems like it is unnecessary for it to be in shared,,gaearon,2018-02-10 15:48:53,2018-02-10 16:41:33
PR,Danger Use the PR is mergebase for a branch in the dangerfile,After chatting with we figured it made more sense to use the merge base for a PR to determine the build size changes instead of the parent commit of the first commit on the branch This does that and adds some docs to the header,,"orta,gaearon,orta,gaearon,orta,orta,gaearon,orta,orta,gaearon,gaearon,orta,orta,gaearon,gaearon",2018-01-18 21:10:30,2018-02-11 19:43:30
PR,Not for merge Test Danger,,,"gaearon,gaearon,orta",2018-02-11 19:48:07,2018-02-11 20:01:20
IS,Autofocus issue in Firefox only going from React 16 0 0 to 16 2 0,I have got a strange issue might be a bug in Firefox Quantum not sure I just tried upgrading from React 16 0 0 to 16 2 0 and noticed some pages give a flash of unstyled content now It is an isomorphic app but even with JS turned off I see the same thing This only happens on pages that use the autoFocus attribute and only in Firefox version 58 0 2 for Mac Maybe a React developer can give this scenario a try to see if they see anything strange Server side rendered template with a regular stylesheet in the document head React and ReactDOM version 16 2 0 Create page with input type text autoFocus Load it in latest Firefox 58 0 2 Issue is not present in Chrome or Safari and not present if I remove the autoFocus attributes cc Maybe something to do with autoFocus attribute changes recently,,gaearon,2018-02-11 21:11:03,2018-02-11 21:34:13
PR,Add react is package,Supersedes PR 11279 and 12092 Resolves issue 12038 Perhaps we could use this in React DevTools as well This would not be the case in its current form since this library accepts React elements and DevTools receives fibers Tests In addition to the newly added unit tests I ran yarn build react is locally to build this then npm pack ed the result and installed it in a fresh project I also tested the UMD build in CodeSandbox Example Assumptions It is okay that isElement is looser than typeOf e g it returns true for host elements fragments strict mode context etc There are no additional component types e g the experimental call return types that we want to expose for the initial release It is okay to support the currently unstable AsyncMode for the initial release This package should mirror the version of React rather than be versioned independently since we will be adding types over time,,"bvaughn,gaearon,gaearon,bvaughn,gaearon,bvaughn,gaearon,gaearon,bvaughn,gaearon,gaearon,bvaughn,bvaughn,gaearon,gaearon,bvaughn,gaearon,bvaughn,sebmarkbage,bvaughn,sebmarkbage,bvaughn,sebmarkbage,bvaughn,bvaughn,bvaughn,gaearon,bvaughn,gaearon,gaearon,gaearon,bvaughn,bvaughn",2018-02-09 17:50:21,2018-02-11 22:08:41
PR,NativeMethodsMixin DEV only methods should not warn,Built in React Native components e g View currently trigger deprecation warnings for lifecycles componentWillMount and componentWillReceiveProps due to these DEV only mixins added by the NativeMethodsMixin component L183 L207 Long term we should remove the deprecated lifecycles but for the time being I think we should just suppress the warnings from the builtin methods specifically using a similar technique as the react lifecycles compat polyfill This will hopefully improve the in between period for the RN community significantly,,"bvaughn,gaearon,bvaughn,gaearon,bvaughn,bvaughn",2018-02-11 22:40:22,2018-02-12 00:29:02
IS,Warning React createElement type is invalid expected a string,I'm taking a tutorial to learn React JS everything was fine for days I could run an example simple carrying out a recommended basic configuration plus a few more add ons that I add to recognize the Javascript version After several days of no longer reviewing the project but it is working correctly when executing the command I do not see any error but it does not show anything in the browser only multiple errors appear in the console of this one I have uninstalled and reinstalled reac and react dom and the problem still persists try a new project cloning it from a friend and it works normally and it only copied the same structure of mine Warning React createElement type is invalid expected a string for built in components or a class function for composite components but got undefined You likely forgot to export your component from the file it is defined in or you might have mixed up default and named imports The above error occurred in one of your React components Consider adding an error boundary to your tree to customize error handling behavior issues project structure Packge json,,"gaearon,gaearon,gaearon,gaearon,gaearon,gaearon",2018-02-12 02:00:28,2018-02-12 02:32:00
PR,Danger Include 1 changes in a build not just greater than,Thanks for I would been running mostly in the dark and faking data now have an easy PR to test against The main change is It means that a 1 change will show Which means it will get picked up and shown The other changes are to loosen up the constraint on highlighting when either react or react dom changes outside of the closed table When I run yarn danger pr after checking out the branch and running yarn build to get the right results json the output by Danger is this ReactDOM size 1 gzip 1 details summary Details of bundled changes summary p Comparing c7ce0091dcb2036e19df980247c9a4388ad75741 232208e5d15d13c6deb47ad7b5ab0e1d922f9854 p react dom File Filesize Diff Gzip Diff Prev Size Current Size Prev Gzip Current Gzip ENV react dom development js 1 1 577 79 KB 577 78 KB 135 49 KB 135 49 KB UMD DEV react dom production min js small red triangle 1 small red triangle 1 94 51 KB 95 86 KB 30 71 KB 31 04 KB UMD PROD react dom development js 1 1 562 17 KB 562 17 KB 131 37 KB 131 36 KB NODE DEV react dom production min js small red triangle 1 small red triangle 1 93 26 KB 94 62 KB 29 9 KB 30 28 KB NODE PROD react art File Filesize Diff Gzip Diff Prev Size Current Size Prev Gzip Current Gzip ENV react art development js 1 1 380 87 KB 380 87 KB 84 39 KB 84 39 KB UMD DEV react art production min js small red triangle 1 small red triangle 1 84 77 KB 86 12 KB 26 31 KB 26 62 KB UMD PROD react art development js 1 1 306 72 KB 306 72 KB 65 8 KB 65 8 KB NODE DEV react art production min js small red triangle 2 small red triangle 2 49 56 KB 50 93 KB 15 63 KB 16 06 KB NODE PROD react test renderer File Filesize Diff Gzip Diff Prev Size Current Size Prev Gzip Current Gzip ENV react test renderer development js 1 1 303 76 KB 303 76 KB 64 77 KB 64 77 KB NODE DEV react test renderer production min js small red triangle 2 small red triangle 3 48 07 KB 49 43 KB 14 96 KB 15 42 KB NODE PROD react noop renderer File Filesize Diff Gzip Diff Prev Size Current Size Prev Gzip Current Gzip ENV react noop renderer development js 1 0 18 34 KB 18 34 KB 5 18 KB 5 18 KB NODE DEV react noop renderer production min js small red triangle 8 small red triangle 4 6 28 KB 6 79 KB 2 51 KB 2 62 KB NODE PROD react reconciler File Filesize Diff Gzip Diff Prev Size Current Size Prev Gzip Current Gzip ENV react reconciler development js 1 1 285 66 KB 285 66 KB 60 32 KB 60 31 KB NODE DEV react reconciler production min js small red triangle 3 small red triangle 2 41 45 KB 42 82 KB 13 04 KB 13 4 KB NODE PROD details,,"orta,gaearon,orta,gaearon",2018-02-12 01:01:04,2018-02-12 12:44:18
PR,Added ReactFabric shim,This shim needs to be in GitHub or syncing will wipe it out and cause fbsource breakage,,bvaughn,2018-02-12 18:03:49,2018-02-12 18:12:46
PR,Danger Test danger,not for merge,,"gaearon,gaearon,orta",2018-02-12 12:44:59,2018-02-12 19:46:40
PR,Handle packages without dependencies,Noticed the release script did not handle this case when trying to publish an alpha containing the new react is package,,bvaughn,2018-02-12 18:38:41,2018-02-12 23:46:43
IS,very important note,,,,2018-02-13 16:51:25,2018-02-13 17:21:59
IS,Uncaught TypeError 0 arrays2 default is not a function,Do you want to request a feature or report a bug Bug What is the current behavior I got following behavior if i import SearchArea js in Index js SearchArea js it work is like a charm Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React v 16 1 1 Google Chrome 64 0 3282 119 Mac OS 10 13 3,,aweary,2018-02-13 17:43:34,2018-02-13 18:18:42
PR,Additional release script options for publishing canary versions,branch specifies a branch other than master local skips pulling from the remote branch and checking CircleCI tag specifies an npm dist tag other than latest or next We may add a higher level canary option in the future Test plan I used this to publish 16 4 0 alpha 7926752 and it worked,,"acdlite,bvaughn,bvaughn,bvaughn,acdlite",2018-02-13 03:54:53,2018-02-13 19:44:28
IS,Is it ok I put random things in div root,Can I put some initial text in div root element eg p tag with text div canvas Because I saw many people put their entire rendered markup in div root to hack seo So when ReactDOM render App document getElementById 'root' What will happen with div root Is it is childNode all being erased If it is then I can put random things in it am I right Thank for your patience,,aweary,2018-02-14 09:35:53,2018-02-14 17:52:36
IS,New Chrome iframe spec requires allow attribute to use devices,Do you want to request a feature or report a bug Not sure maybe more on the feature side What is the current behavior When opening an iframe to a third party site I need access to the user is camera The new specs for Chrome states that since version 64 we need to add the allow attribute in order to have access to things like camera or microphone However React 15 6 1 does not recognise this attribute and removes it Therefore I do not have access to the user is camera Error displayed in console Warning Unknown prop allow on iframe tag Remove this prop from the element For details see What is the expected behavior This tag should be known Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React version 15 6 1 no real possibilities to change to 16 yet Chrome Version 64 0 3282 140 Official Build 64 bit OS MacOS Sierra Sorry if this was already reported I could not find another issue mentioning this,,aweary,2018-02-14 09:27:50,2018-02-14 17:56:56
IS,FEATURE implement a getState method to get the sync state since setState is async,Do you want to request a feature or report a bug h2 FEATURE REQUEST h2 What is the current behavior,,"gaearon,milesj",2018-02-09 03:30:16,2018-02-14 18:33:37
PR,Add a warning for style values containing important,Related to 1881 This patch ensures that a warning is displayed when important is included in an inline style value as those values will cause the style not to be applied to the DOM node Current behaviour is silent failure,,,2018-02-08 00:01:44,2018-02-14 20:26:34
IS,Issue with error boundaries and custom error types,I think I may have found a bug in React I have defined a custom error type in a React application which I'm throwing I have an error boundary defined at the top of my application is component tree whose purpose is to catch uncaught errors and display an error page The error boundary is catching the custom error but is not able to distinguish it from an error of type Error Put simply custom error types created with the following syntax Am I crazy or is this a bug in React This issue is reproduced here the code is all documented butin a nutshell I have implemented an Application component that wraps its contents in an error boundary A custom error is thrown from a subcomponent and the custom typing gets lost somewhere along the way That is from the error boundary is perspective the error that is thrown is of type Error not the custom type defined in the application Also on StackOverflow The expected behavior is that custom error types would be preserved as they crossed error boundaries Tested in React ReactDOM 16 2 0 in Chrome 63 0 3239 132 MacOS 10 12 6,,aweary,2018-02-14 22:38:35,2018-02-14 23:45:24
PR,Danger Look at adding this repo as an upstream base,Re issuecomment 365617693 Uses the Danger DSL to grab the base repo and branch adds it as a remote and fetches for reference master on my personal fork is at d906de7 and master for facebook react is 1fd205a as of creating this PR,,"orta,gaearon,orta,orta,gaearon",2018-02-15 00:45:26,2018-02-15 12:19:31
PR,Add an unit test for React Fragment with ShallowRenderer,I think it would be nice to add a test to verity that React Fragment works fine with ShallowRenderer,,"koba04,gaearon,orta,gaearon,koba04",2018-02-13 16:37:38,2018-02-15 14:19:08
PR,should be instance instead of node,since there is no property 'valueTracker' on otherNode I think it should be otherInstance image,,aweary,2018-02-15 08:45:55,2018-02-15 19:02:47
PR,experimental simple cache provider,Pushing an early version of this for testing and demonstration purposes,,"acdlite,sebmarkbage,sebmarkbage,acdlite,acdlite,sebmarkbage,gaearon,gaearon,acdlite,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,acdlite,acdlite,sebmarkbage,acdlite,acdlite,acdlite,acdlite",2018-02-14 03:17:59,2018-02-16 00:38:16
IS,ContextConsumer and ContextProvider in react test renderer,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug bug What is the current behavior Unsupported component type 13 in test renderer This is probably a bug in React invariant is called because react test renderer does not know about the the ContextConsumer and ContextProvider component types If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below What is the expected behavior It can identify the new context types Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React 16 3 0 alpha 0,,,2018-02-04 18:59:20,2018-02-16 19:27:21
PR,Update test renderer to support new types of work,Adds support for ContextProvider ContextConsumer and Mode Closes,,"acdlite,acdlite,acdlite,acdlite",2018-02-16 19:13:41,2018-02-16 19:27:21
IS,Why does the new Context require an explicit interface,I just read a post about the new Context from what I understood we are creating more problems rather than solving one Please correct me if I was wrong The previous Context in my opinion it achieved what called implicit interface it means you do not need to import explicitly an API to use it instead you just define what an API should provide using prop types and expect implicitly that it will be provided at runtime This design helps to decouple API providers from API consumers in the React component tree which I believe the original idea of the Context implicit interface was also applied in Golang you would understand what I'm talking about if you have used its interfaces But the new Context consider below example So from now on we have to import the X context in every consumers of X I have worked in this industry for 8 years and got pain enough to understand how bad when we have a complex and heavy dependency graph in our code I'm not good at explaining things in English please help me to explain further the problem we are having here if you got me,,"gaearon,gaearon,jquense,gaearon",2018-02-16 18:02:23,2018-02-16 19:28:51
PR,Support context components in react test renderer,Potential fix for 12150 I had to use the pendingProps instead of memoizedProps for the ContextConsumer I do not know enough about React is internals to know why that does not have a memoizedProps,,"gaearon,acdlite",2018-02-04 22:14:49,2018-02-16 19:43:44
PR,Not for Merge Test DangerCI integration,Just testing,,"gaearon,gaearon,orta",2018-01-17 01:51:28,2018-02-16 21:47:54
IS,New React component definition with autobind,I do not know what exactly is planned but auto bind for methods would be nice Yeah I know property initializers still a user should not have to think about that I suppose a state should be stored in an object not in a closure because of logs and component should be an object ideally Nevermind feel free to close this issue without any explanation I am just curious the reasoning behind a new design,,aweary,2018-02-16 23:54:31,2018-02-17 00:31:33
IS,Error while trying out createContext on v16 3 0 alpha 1,Do you want to request a feature or report a bug bug What is the current behavior error What is the expected behavior it should render correctly even though i havent implemented the consumer i also did but it didnt help Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React v16 3 0 alpha 1,,,2018-02-17 04:19:29,2018-02-17 12:49:02
PR,Fix 12200 regresssion select multiple,Problem When creating a select element and setting multiple the first element would be selected This was due to the multiple prop being set after the children we are appended An non react example case created by can been seen here Solution Have a special case where if the element type were of select set the properties before the children are appended Issue,,"gaearon,aweary,gaearon,gaearon,gaearon",2018-02-17 17:01:49,2018-02-17 18:19:25
IS,Select input field is not working but works when I change it to text input,reacttextgen I'm building a simple React text generator and I'm mostly finished except for this one problem I can not seem to solve The select input does not work I have read the documentation and I do not see a problem with my code I tried changing in from a select input to a text input and it worked The number input works fine and has pretty much the exact same code Here is my component Any help is greatly appreciated Also sorry if I messed up the formatting,,"milesj,aweary",2018-02-13 16:42:06,2018-02-17 19:27:25
IS,Daniel baker email messages,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug What is the current behavior If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below What is the expected behavior Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React,,,2018-02-19 11:19:37,2018-02-19 15:05:56
IS,getDerivedStateFromProps concern,Just read about getDerivedStateFromProps and am concerned the new api wo not be flexible enough to cover some common use cases For instance I have a scrolling tabs component Whenever the selectedTabId prop changes I use browser apis to scroll that tab into view What would be the best way to accomplish this without componentWillReceiveProps Currently code is something like this,,iamdustan,2018-02-19 15:58:35,2018-02-19 16:22:10
PR,Ignored fiber tags which shows unknow in performance tabs,Related to 12245,,"abhaynikam,gaearon",2018-02-19 18:55:17,2018-02-19 21:58:42
IS,Context Providers and maybe Consumers show up as Unknown in Performance tab,Noticed this with 16 3 alpha img width 238 alt screen shot 2018 02 18 at 21 58 15 src I think we just need to support it here Or else we could skip them here L162 altogether,,"gaearon,gaearon,abhaynikam,gaearon,gaearon",2018-02-18 22:00:04,2018-02-19 21:59:03
IS,Obfuscating bundle js for unauthenticated users,I am using React 15 6 1 and react router dom 4 1 2 with redux and react redux Simple scenario I have a website with ReactJS and a PHP backend RESTful service For the backend I do not want the bundle js code to be exposed to unauthenticated users I have looked everywhere for a solution to this and I just cannot seem to find one Is this possible at all in React or any JS frameworks I understand that if the user is unauthenticated then no data would be injected into the bundle but I would rather unauthenticated users cannot see anything about my admin panel Is there any solution at all to this,,gaearon,2018-02-20 09:39:47,2018-02-20 12:45:32
IS,Having a warning message in socket on,got problem in my socket spamming warning,,aweary,2018-02-21 02:07:52,2018-02-21 02:14:06
IS,How to display a pop up for the first time user visit in a react application,How do I make a first visit popup for my react application Is it possible to implement using the react popup module I used this module below but it does not seem to work Can you check and let me know what wrong here Below is my homepage component import React Component from areact' import ' HomePage css' import Carousel from 'nuka carousel' import HeaderComponent from ' components Header Header js' import Decorators from ' decorators js' import Popup from areact popup' export default class HomePage extends Component redirectPage window location ' dashboard' componentWillMount Popup alert 'my component' render var mixins Carousel ControllerMixin return Component Carousel,,,2018-02-21 11:28:49,2018-02-21 11:35:43
IS,componentDidCatch unhandled,Do you want to request a feature or report a bug Not sure tbh What is the current behavior I have global handler for unhandled errors window addEventListener 'error' evt Now when I use the componentDidCatch function it gets called correctly when render throws an exception but that global error event is also triggered and before the componentDidCatch call What is the expected behavior Since componentDidCatch handles the error I would prefer if the global event was not triggered same as with a usual try catch block Or is there at least some way to figure out from the evt object in the event handler that the exception is caught by react I hope this made sense,,gaearon,2018-02-21 15:46:30,2018-02-21 16:12:19
IS,Feature request checksum error reporting in production,We are in the process of enabling SSR on unsplash com and we would like to track checksum errors when they occur However to my knowledge checksum errors are not reported in production so there is no way of tracking them We need this because we might accidentally introduce a change that results in a checksum error and when we do we want to know as quickly as possible that this is the case To avoid checksum errors we must ensure the first client render matches the server render but it is very easy to slip up We are working on better infrastructure to make this impossible e g window state should only be accessible for enhanced renders i e after the first client render but in the meantime we need to know when we break something,,gaearon,2018-02-21 11:09:57,2018-02-21 16:13:26
IS,Create a first visit popup in react application using react popup module,How do I make a first visit popup for my react application Is it possible to implement using the react popup module I used this module below but it does not seem to work Can you check and let me know what wrong here Below is my homepage component import React Component from areact' import ' HomePage css' import Carousel from 'nuka carousel' import HeaderComponent from ' components Header Header js' import Decorators from ' decorators js' import Popup from areact popup' export default class HomePage extends Component redirectPage window location ' dashboard' componentWillMount Popup alert 'my component' render var mixins Carousel ControllerMixin return homepage content,,aweary,2018-02-21 11:38:09,2018-02-21 18:43:37
PR,Ignore RN events on unknown nodes,If we have multiple RN renderers running simultaneously we should be able to send a single event to all of them and only if it recognizes the event will it do anything with it Crucially this avoids the 'Unsupported top level event type s dispatched' invariant in those cases,,"sophiebits,bvaughn,sophiebits,sophiebits",2018-02-21 21:26:11,2018-02-21 21:47:18
PR,fabric Forked ReactNativeInjection and skip RCTEventEmitter for Fabric,Before submitting a pull request please make sure the following is done 1 Fork the repository and create your branch from master 2 Run yarn in the repository root 3 If you have fixed a bug or added code that should be tested add tests 4 Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development 5 Run yarn test prod to test in the production environment It supports the same options as yarn test 6 If you need a debugger run yarn debug test watch TestName open chrome and press Inspect 7 Format your code with prettier yarn prettier 8 Make sure your code lints yarn lint Tip yarn linc to only check changed files 9 Run the Flow typechecks yarn flow 10 If you have not already complete the CLA Learn more about contributing Additional tests yarn build then copied build react native ReactNativeRenderer dev js to ReactNative local copy verified that RN test app loaded and did not redbox,,"fkgozali,fkgozali,sebmarkbage,bvaughn,bvaughn,fkgozali",2018-02-21 23:16:43,2018-02-21 23:40:48
PR,Format danger percents better,Test Plan yolo yarn danger pr did not give me any useful output,,"sophiebits,gaearon,gaearon,sophiebits",2018-02-20 19:10:07,2018-02-21 23:48:38
PR,Add test exercising public API to test BeforeInputEventPlugin FallbackCompositionState,Part of the effort to refactor tests to use the Public API 11299 I have adopted a similar approach to the existing test for BeforeInputEventPlugin These tests simulate events and then assert the event handler for onBeforeInput is fired or not fired based on the test conditions The test scenarios are tested against IE11 Webkite and Presto environment simulations I have encorporated what I understand to be the functionality in the FallbackCompositionState test There are a few more test cases to add However the main reason I'm putting this diff up is to get feedback on approach get community support on resolving a failing test I'm encountering when testing the expected behavior of the compositionend fallback behavior on a contenteditable right now I avoid running these test cases by avoiding the failing tests when simulating an environment which relies on the fallback state testContentEditableComponent environments 2 scenarios splice 0 5,,"GordyD,gaearon,GordyD,gaearon,GordyD,gaearon",2017-12-14 04:01:29,2018-02-22 18:27:37
PR,Add a clearer error message for the Consumer render 12241,Deals with the issue that is currently open at 12241,,,2018-02-22 19:31:14,2018-02-22 20:06:18
IS,Children of Consumer without new line gives TypeError render is not a function,Do you want to request a feature or report a bug Bug What is the current behavior I get a confusing error when not using a new line in the children of a Consumer un the new Context API Error selection 108 Fix selection 109 What is the expected behavior Component just getting redered Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React 16 3 0 alpha 1 and 16 3 0 alpha 0 Chromium 63 Archilinux React 16 2 did not support the new Context Api,,"gaearon,aweary,aweary,gaearon",2018-02-17 17:20:41,2018-02-22 20:30:08
IS,Having a component return null with a Font Awesome i sibling throws a DOMException,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Bug What is the current behavior The following React code will throw an exception does Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React version 16 2 0 Chrome Version 64 0 3282 167 64 bit Mac OS X Firefox Version 57 0 1 64 bit Mac OS X,,,2018-02-23 00:35:50,2018-02-23 00:39:48
IS,React passes empty spaces as children to react components,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug report a bug What is the current behavior Passing an empty string inside a react element is treated as a child If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below With this syntax What is the expected behavior this props children property of MyReactComponent should only contain one children Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Version 16 2 0 Chrome Mac OS High Sierra,,aweary,2018-02-23 00:48:43,2018-02-23 01:16:52
IS,Warning invalid prop aria labeledby on a tag element,Do you want to request a feature or report a bug Bug What is the current behavior React throws warning on use of aria labeledby on a a warning js 33 Warning Invalid aria prop aria labeledby on a tag For details see image What is the expected behavior Wai aria shows some ways of implementations on WACG 2 0 ARIA7 about a aria labeledby a Here you have link to this Aria technique And im developing website for use on android with talkback and it runs fine with aria labeledby and not with other attrs like aria describedby Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React version 16 2 0 Browser version Chrome Versi n 64 0 3282 167 Build oficial 64 bits OS Ubuntu 16 04 Mobile extra info about talkback Android version 7 1 1 Talkback version 6 1 0,,,2018-02-23 08:45:48,2018-02-23 08:51:09
IS,Development or Production how to find out,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Primary just a question secondary maybe a tiny feature request Question Is there an official way to find out whether the imported React package is the development or the production module react development js vs react production min js Obviously you can do something like Of course there are also some other use cases where this feature would also be handy or even necessary but I hope the above use case is already convincing Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React 16 2 0,,"aweary,aweary,aweary",2018-02-23 21:21:30,2018-02-23 23:31:02
IS,Input replacement bug changing a controlled input,Do you want to request a feature or report a bug Appears to be a bug What is the current behavior CodeSandbox Quick development solutions are listed in the CodeSandbox README Demo react input replacement bug Warning react input replacement bug warning 1 Open the debugging console 2 Wait 8 secs for setTimeout line 65 to change state 3 Observe the warning in console Warning A component is changing a controlled input of type text to be uncontrolled This is happening as React is only updating what is necessary on the input elements React adds the additional properties placeholder title readonly and changes the existing property value of the input that is being replaced rather than replacing the entire input This results in the controlled status changing DOM is input element persists it is value too What is the expected behavior The old input element is replaced by the new input that uses placeholder text Use case is described in the origin section of the CodeSandbox README Actual desired behavior is unknown Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React version 16 2 0 Chrome version 64 0 3282 167 Official Build 64 bit Does not throw the warning may be production version and the DOM input value is not persisted Codepen React version 13 I think,,aweary,2018-02-23 07:35:07,2018-02-23 23:40:44
IS,event currentTarget value returns undefined in React 16,So I looked into the event that is being returned in both versions of React looks like in 16 the dispatchInstances is a FiberNode whereas in 15 is a ReactDOMComponent screenshot from 2018 02 23 10 44 44 React 16 screenshot from 2018 02 23 10 46 44 React 15 Is this an intentional change If so how do I go about passing this params to the callback I do not really want to use arrow functions since that affects the performance,,aweary,2018-02-23 15:50:18,2018-02-24 00:01:33
IS,React 16 is new error handling results in data loss on forms that react while typing,As discussed here We have similar problems if any error happens in ex a textarea widget it will unmount the entire app Previously the user could copy and paste the text out of the form even if the page was behaving strangely or print it or whatever Now any error anywhere in any part of the system even a third party dependency or a browser feature results in immediate data loss for the user ex a counter that shows the number of words as you type If there was a bug in it then users would sometimes lose all the text they typed I totally understand the motivations for this feature and how it models native apps crashing but it does not really work well at least for us with the web and tangle of third party dependencies that exist today I can see how it works well for Facebook since they control every dependency and can fix bugs across all of them as needed If you instead have a set of third party dependencies and one has a bug you can end up stuck where your app randomly breaks or shows blank to users I guess you could put an error boundary around every widget in the entire page but that is hard to enforce and still results in data loss just scoped My understanding is that we can not just render again per the discussion in the mentioned bug since it would throw again and because it destroys all the statefulness of the various browser widgets ex video or plugins Can this feature be made opt out,,aweary,2018-02-23 04:20:22,2018-02-24 00:04:33
IS,componentWillUnmount How to cancel requests,You write Perform any necessary cleanup in this method such as invalidating timers canceling network requests People here say there are no ways to cancel a request How do you mean canceling network requests Would you please share some knowledge,,aweary,2018-02-22 17:04:36,2018-02-24 00:06:01
PR,Add stack unwinding phase for handling errors,A rewrite of error handling with semantics that more closely match stack unwinding Errors that are thrown during the render phase unwind to the nearest error boundary like before But rather than synchronously unmount the children before retrying we restart the failed subtree within the same render phase The failed children are still unmounted as if all their keys changed but without an extra commit Commit phase errors are different They work by scheduling an error on the update queue of the error boundary When we enter the render phase the error is popped off the queue The rest of the algorithm is the same This approach is designed to work for throwing non errors too though that feature is not implemented yet Known differences from existing error handling semantics in synchronous mode When a component throws an error we continue rendering its siblings rather than unwind immediately Because of the previous point a single error boundary may capture more than one error during a single render if multiple child branches fail We call componentDidCatch for each error that a boundary captures instead of just the first one Error boundaries only catch error objects Non errors will propagate to the root and cause the tree to unmount as if it s an uncaught error Unresolved items x Add getDerivedStateFromCatch lifecycle behind a feature flag This is fired during the render phase so that we can retry without committing as opposed to componentDidCatch which fires in the commit phase We will keep componentDidCatch around for logging purposes If getDerivedStateFromCatch is not implemented but componentDidCatch is the fallback behavior is to unmount all the boundary is children This part is already implemented We may warn about the missing getDerivedStateFromCatch in a future release x Existing code that schedules recovery updates inside componentDidCatch will have mostly the same semantics with one key exception We no longer track whether an error boundary failed in a previous commit So it is now possible to fall into a recursive error loop in the same way as an unguarded setState inside componentDidUpdate,,"acdlite,acdlite,gaearon,acdlite,gaearon,gaearon,gaearon,gaearon,gaearon,gaearon,acdlite,acdlite,acdlite,acdlite,acdlite,gaearon,acdlite,gaearon,acdlite,gaearon,gaearon,acdlite,sebmarkbage,acdlite,sebmarkbage,acdlite,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,acdlite,sebmarkbage,acdlite,acdlite,sebmarkbage,sebmarkbage,acdlite,gaearon,bvaughn,gaearon,acdlite,acdlite,acdlite,gaearon,gaearon,acdlite,acdlite",2018-02-09 23:51:51,2018-02-24 01:38:42
IS,mgm,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug What is the current behavior If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below What is the expected behavior Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React,,,2018-02-24 14:49:18,2018-02-24 14:50:18
IS,Bensin,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug What is the current behavior If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below What is the expected behavior Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React,,,2018-02-25 02:46:58,2018-02-25 02:47:52
IS,Strange Behavior in Conditional Rendering,Do you want to request a feature or report a bug Bug url If this is not a bug where I have gone wrong Thanks,,,2018-02-25 08:53:42,2018-02-25 12:07:25
IS,Holl,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug What is the current behavior If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below What is the expected behavior Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React,,,2018-02-25 02:48:27,2018-02-25 17:03:27
IS,state updated doesnt update the dom,Hi I want to feature a bug So I have a condition to update the image of a chevron but nothing happen I use this code before and everythings was fine someone can help please version react 16 2 0 Cheers,,"jquense,nihgwu,nihgwu",2018-02-23 13:30:12,2018-02-26 07:29:03
IS,Syntax Error in react is package,When trying to use react is there is a syntax error stopping it from being imported 0 0 index js,,"aweary,bvaughn,bvaughn",2018-02-25 12:22:12,2018-02-26 18:04:37
PR,Temporarily disable Danger in CI,Looks like Danger has started failing recently and it is causing builds to fail Disabling it for now until we can figure out the problem Example failure tests containers 2,,"aweary,gaearon,aweary",2018-02-26 19:30:48,2018-02-26 19:40:23
PR,Replace danger token with a refreshed facebook open source bot token,Once this PR is landed it should be possible to revert 12291,,"hramos,gaearon",2018-02-27 00:19:48,2018-02-27 00:20:54
PR,Revert Temporarily disable Danger in CI,Reverts facebook react 12291 12295 should have fixed it,,aweary,2018-02-27 00:21:47,2018-02-27 00:33:50
IS,CI Danger failing with auth errors,See,,"aweary,aweary",2018-02-26 19:40:05,2018-02-27 00:35:09
PR,Fixes bug when initial mount of a host component is hidden,oldProps was null This went uncaught by the unit tests because ReactNoop did not use oldProps in either prepareUpdate or completeUpdate I added some invariants so we do not regress in the future,,"acdlite,acdlite,acdlite,sebmarkbage,acdlite,acdlite,sebmarkbage,sebmarkbage,sebmarkbage,acdlite",2018-02-26 23:58:42,2018-02-27 01:50:08
PR,Persistent Finalize children after we have actually inserted them,The order of this was wrong We also unconditionally mark for updates so killed that unused branch,,"sebmarkbage,aweary",2018-02-27 06:37:47,2018-02-27 07:34:54
PR,Do not expose ReactGlobalSharedState on React Native renderer,We should just go through the react package if need access to this one Remove the dependencies in React Native,,sebmarkbage,2018-02-27 02:07:26,2018-02-27 15:57:51
IS,Do not synchronize property value with attribute especially for the value attribute,Just read this repo,,jquense,2018-02-27 21:13:23,2018-02-27 21:19:40
PR,Do not clear errors after they are thrown,Instead to trigger a retry the consumer should invalidate the cache In the future we will likely add a way to invalidate only the failed records,,acdlite,2018-02-28 03:23:37,2018-02-28 04:02:44
IS,how inspect element hover,i using mouseEnter or mouseOver such as hover if i using html and css i know debug hover in inspect elememt but how debug mouseOver and mouseEnter inspect element in dev tools react or normal,,,2018-02-28 05:29:36,2018-02-28 08:36:10
IS,Best practice of new React Context API,New context API is really great a lot of thanks for your efforts on this It enabled us by a more efficient and easier way to write React app But I still consider it as too much boilerplate verbosity to use it on each leaf component Everytime you may write like this I'm not suggesting adding this as a official implement nor you would do that I think Just please give it a try and tell me what do you think really appreciate your attention,,aweary,2018-02-28 11:16:31,2018-02-28 16:32:28
PR,createResource returns an object with methods instead of a read function,Per our discussion changes createResource to return an object with read and preload methods Future methods may include set subscribe invalidate and so on,,acdlite,2018-02-28 04:43:08,2018-02-28 18:17:04
IS,How to get DOM HTMLElement instance reference in order to use scrollIntoView API,This is an implementation Usage question I would like to use the native Element scrollIntoView API in my React app to scroll to components from code To use that I need reference to the HTML Element I want to scroll into Using React is ref prop adding a ref to a dom element returns reference of React component and not the HTMLElement DOM instance so I can not use the desired API with it Is there a way to get access to the HTML DOM element in order to use the native scrollIntoView API Versions in use React 16 Chrome browser latest,,aweary,2018-02-28 15:38:28,2018-02-28 18:47:17
IS,Why setState executes in setTimeout will become sync,Why did lemen print behind banana,,bjrmatos,2018-03-01 03:11:54,2018-03-01 17:29:24
IS,ReactDOM render return null,question In a component componentDidMount function perform ReactDOM render return null but ReactDOM render render to the page normally If setTimeout is added to the componentDidMount function execute in setTimeout ReactDOM render but it returns normally object I do not know if this is a bug expectations ReactDOM render return an object correctly code,,,2018-03-01 14:00:00,2018-03-01 17:30:20
IS,MIT License and GPL dependency,bug report What is the current behavior The LICENSE is stated as MIT but both react and react dom have a GPL 2 0 dependency So I think either the license is the wrong one should be GPL or this dependency should be changed To test it use my package legally Result licenses The dependency is indirect react fbjs ua parser js Some devs say your dependencies matter vovabilonenko licenses of npm dependencies bacaa00c8c65 and some others say sarcastically that all code should be GPL then I am not a lawyer and have no lawyer department so please feel free to close this if it is a non issue But I think having a GPL dependency is a no go for many companies What is the expected behavior No dependency is GPL licensed since that would make your user is code GPL This GPL code is bundled and distributed with each of React is users' code so potentially every React project that has included this dependency is GPL Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Current version from the package json Affects This also affects react dom and of course create react app that I know of Note Feel free to close this and open it in fbjs repository which I could not find The linked fbjs repository from npm is clearly not the original one since npm states the dependencies of fbjs as core js isomorphic fetch loose envify object assign promise setimmediate ua parser js while this repository tells a totally different story it is even private This is very strange and reminds me to this horror story but of course there should be some legit reason for that right,,,2018-03-02 08:05:45,2018-03-02 08:14:42
IS,validateDOMNesting form cannot appear as a descendant of form,,,jquense,2018-03-02 10:33:21,2018-03-02 12:30:11
IS,Regarding new context API,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Neither a feature nor a bug hope you do not mind me asking a question here maybe some others are also interested Question In all of the examples I have seen regarding the new context API the context values are only relevant for the virtual element tree means only relevant in the render function But what about context values that are not relevant for the view at all but only for some side effects Is the only recommended way here to use higher order components Example Let is say the component requires some side effect handler that shall not be passed explicitly by props but passed implicitly by using context let is name it someMgr Now assume that this someMgr object will only be needed in componentDidMount and if you like maybe also in componentWillUnmount In the old days componentDidMount looked like follows no need for HOC Edit Of course no reasonable programmer would have used it directly that way just saying it was possible with the old API to do so Like already asked above shall we now just use some HOC to handle such use cases with the new context API or is there some other trick recommendation or maybe that use case is even considered as anti pattern Many thanks in advance for your answer Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React 16 2x versus 16 3x,,,2018-03-02 11:22:05,2018-03-02 12:35:30
IS,filter JSON not working,How to filter data from one JSON call using http get console says TypeError Cannot read property 'toLowerCase' of undefined,,jquense,2018-03-02 14:28:36,2018-03-02 14:48:32
IS,React Element React Node and some other types used by flow are undefined,I use flow in my project and started to get this message to console flow runtime Could not reference the given type try t typeOf value instead got undefined 1 After some search i found out the reason React Node is undefined same for other types described in flow docs 2 Am I do something wrong,,aweary,2018-03-02 15:51:03,2018-03-02 17:02:24
PR,Test description is inconsistent with test internals,,,acdlite,2018-03-01 21:59:52,2018-03-02 19:14:52
IS,iOS controlled input type date onChange not triggered by pressing clear,bug What is the current behavior Controlled Input type date does not trigger onChange by pressing the clear button on iOS Datepicker Keyboard This only happens on controlled input uncontrolled works fine Reproduced on iPhone 6 iOS 11 2 2 Safari Demo React 16 2 jsfiddle Demo React 15 6 2 jsfiddle What is the expected behavior Controlled Input date should trigger onChange by pressing the clear button Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React react 16 2 15 6 2 react dom 16 2 15 6 2 OS iOS 11 2 2 Browser Safari Device iPhone 6 iPhone SE,,nhunzaker,2018-03-01 08:30:21,2018-03-03 18:08:23
PR,Fix comment type in ReactElement,Hi all little typo This tag allow us This tag allows us Cheers,,nhunzaker,2018-03-01 10:13:00,2018-03-03 18:13:17
PR,Bug fix SSR setState in diff components do not mix,Previously the queue and replace arguments were leaking across loops even though they should be captured,,"sophiebits,sophiebits,nhunzaker,sophiebits,nhunzaker,nhunzaker,sophiebits,sophiebits",2018-03-03 17:51:14,2018-03-03 18:27:57
PR,annotation typo,If I guess correctly after than means after then,,"monkindey,monkindey,nhunzaker,monkindey",2018-02-23 06:37:51,2018-03-04 03:24:34
PR,added link to reactjs docs for test renderer,Add link to reactjs com documentation for react test renderer to the react test renderer README md for fellow googlers that end up on the npm yarn package page and think there is no documentation on how to use this thing,,"hartzis,nhunzaker,hartzis,nhunzaker,hartzis,nhunzaker",2018-02-26 23:38:54,2018-03-04 03:25:30
IS,I got a white screen with react 16 2 0,Hey there I'm FE developer I had met a big problem when I try to use the latest react 16 2 0 and react dom 16 2 0 The situation is that I got a white screen on my Huawei Honor v10 phone with android 8 browser as show below whether I create the app with official create react app script or make a config of webpack by myself image note I use eruda to look for mistake in this bowser but got nothing This app created by official create react app which got white screen only happen in the android vender browser and it display properly in my lastest chrome mobile And about the react version react 15 6 2 and react dom 15 6 2 works fine in both bowser Is there any way to solve this Tell me please Thanks,,gaearon,2018-03-04 03:17:46,2018-03-04 18:11:11
IS,React createElement type is invalid,Do you want to request a feature or report a bug bug What is the current behavior What is the expected behavior Rendered Dashboard component Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React react 16 2 0 react dom 16 2 0 react router 4 2 0,,,2018-03-05 12:58:31,2018-03-05 15:21:04
IS,react addons test utils 15 6 2 requires a peer of react dom 15 4 2 but none is installed,When I install node modules from scratch npm generates the above warning because React 16 x is now the latest I just verified that removing react addons test utils does not alter any tests npm 5 7 1 node v8 6 0 possum commit 7f8ae68 current master,,gaearon,2018-03-05 17:01:57,2018-03-05 18:58:27
IS,a simple slide show,I am trying to make a slide show by reactjs In the slide show the next button work perfectly but the previous button have problem You can show demo here The next button handler works perfectly and the prev button handler works perfectly until the slide do not arrive to first of array When the slide arrive to first of array the slide show does not work perfectly please help me to solve this problem my state and functions,,aweary,2018-03-05 09:29:50,2018-03-05 23:59:17
IS,TypeError Cannot read property 'valueTracker' of undefined,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug A bug What is the current behavior when i worked with the branch 15 6 dev this error happened img width 1066 alt 2018 02 24 5 28 38 src If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below the error shows each time when a radio be clicked on What is the expected behavior I had opened a pr about it 12230 Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React on branch 15 6 dev notice that this error has been fixed in v16,,"aweary,aweary",2018-02-24 09:36:07,2018-03-06 00:33:22
IS,Uncaught TypeError assign is not a function,image React 16 2 0 React Dom 16 2 0 What is the cause of this problem,,,2018-03-06 08:02:01,2018-03-06 08:28:17
PR,Reduces the code duplication in component state updater,I tried to reduce the duplication of code in these methods I'm not sure is it better than it was,,"ArtemFitiskin,aweary",2018-03-04 18:05:11,2018-03-06 23:34:03
PR,Remove DefaultProps type parameter from ReactNativeComponent,Removes the DefaultProps type parameter from ReactNativeComponent Also makes State optional and default to void This is the same convention employed by React PureComponent L86 Test Plan Ran yarn lint and flow successfully,,yungsters,2018-03-06 07:46:16,2018-03-07 01:45:46
IS,jsx is close tag name may optional,Do you want to request a feature or report a bug feature What is the current behavior,,gaearon,2018-03-07 11:40:07,2018-03-07 12:33:47
IS,with refs why is the final ref different than output of getElementById,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug bug question What is the current behavior react 16 2 0 I have a react application with redux I need to use a ref on a HTML pre because I want to copy paste its text in a button callback The ref callback looks like this for the pre ref this preRef ref In a button onClick event I noticed the final value of this preRef is not equal to the final output from document getElementId on the id of the HTML pre It is fine for me if the ref callback is called many times since it is by design of react But can someone explain me why the final ref is not equal to the final DOM element finally showing up on the page I want to avoid getELementById but it works with its returned value and its returned value is equal to the first this preRef not the last If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below see above What is the expected behavior see above Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React react 16 2 0,,"jquense,jquense",2018-03-06 13:34:08,2018-03-07 13:51:31
IS,Jest test fails because onChange is missing but have onClick here,Seeing this warning when running jest tests Has to be onClick for app specific purposes which works fine as if it were onChange Yet fbjs warns it should be onChange Can this be improved not to warn when onClick is detected as well Using v15 5 4 here,,aweary,2018-03-06 20:58:59,2018-03-07 17:51:46
IS,getDerivedStateFromProps and requestAnimationFrame problem,Thanks for all your hard work React is incredible The new static lifecycle methods don t work well with the common usage animation pattern The approach popularised by ReactMotion is to add an animate raf in componentDidMount Inside the animate function you update the state and keep adding a new animate raf until the animation finishes That way the animate raf only runs when there s work to do In componentWilReceiveProps you add a new animate raf to start the animation again if it s stopped There s no way to reliably translate this pattern to the new static lifecycle You can t move componentWillReceiveProps into getDerivedStateFromProps because you can t access the animate raf from a static function You can t move componentWillReceiveProps into componentDidUpdate because then the animate raf will run forever even when there s no work to do The componentDidUpdate has no way of knowing whether the update is because of new props or because the animate raf has run So it always has to add a new animate raf even when the animation s finished re running the animationNeeded check inside componentDidUpdate isn t always possible,,"jquense,bvaughn,bvaughn,bvaughn,bvaughn,aweary",2018-03-06 12:20:39,2018-03-07 17:52:56
IS,Use case,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug What is the current behavior If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below What is the expected behavior Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React,,,2018-03-08 05:28:19,2018-03-08 05:28:48
IS,mac os install a problem,npm WARN deprecated express 2 5 10 express 2 x series is deprecated npm WARN deprecated wrench 1 3 9 wrench js is deprecated You should check out fs extra for any operations you were using wrench for Thanks for all the usage over the years npm ERR code ETARGET npm ERR notarget No matching version found for rimraf 2 npm ERR notarget In most cases you or one of your dependencies are requesting npm ERR notarget a package version that does not exist npm ERR notarget npm ERR notarget It was specified as a dependency of 'mojito' npm ERR notarget npm ERR A complete log of this run can be found in npm ERR Users futing npm logs 2018 03 08T10 57 12 399Z debug log futingdeMacBook Pro www futing vim package json futingdeMacBook Pro www futing sudo npm install g create react app create react app demo npm WARN deprecated express 2 5 10 express 2 x series is deprecated npm WARN deprecated wrench 1 3 9 wrench js is deprecated You should check out fs extra for any operations you were using wrench for Thanks for all the usage over the years npm ERR code ETARGET npm ERR notarget No matching version found for rimraf 2 npm ERR notarget In most cases you or one of your dependencies are requesting npm ERR notarget a package version that does not exist npm ERR notarget npm ERR notarget It was specified as a dependency of 'mojito' npm ERR notarget npm ERR A complete log of this run can be found in npm ERR Users futing npm logs 2018 03 08T11 00 29 580Z debug log,,aweary,2018-03-08 11:04:22,2018-03-09 19:22:59
IS,dispatchEvent has no longer any effect on latest react version,Do you want to request a feature or report a bug This is a bug in latest react v16 2 0 What is the current behavior It does not listen to programatically generated key events with react 16 2 0 but with older react 15 5 2 It does the job If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below Find below link for codeSandbox this is a basic react app which is trying to dispatchEvent and fill the input field after click on 'Inject' button react version for this sandbox is react 15 5 2 if you check the console It is logging current state of React component What is the expected behavior if we change version of sandbox to 16 2 0 latest It does fills expected value in textbox but it does not get recognised in React internal state and console log is blank which means id did not even trigger any internal state change what can we do if we want to fill the input textbox programatically we are setting up our internal test framework where we would want to generate all events manually to observe the entire app behaviour Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React works with react 15 5 2 but not with latest 16 2 0,,aweary,2018-03-08 05:54:33,2018-03-09 19:23:39
PR,Test branching prs,Ignore this PR,,,2018-03-09 20:54:26,2018-03-09 20:55:44
IS,feature new api this id 'abc' 'component instance id abc' to make html have scope,HTML does not have a concept of scope but it do use concept like variable at many where like input id abc label for abc abc label We should add scope to html Maybe you say for label we can wrap input in label but it changes the html structure and there are many other scene using html variable like spectre filters So why not add an api this instance id or this generate id abc string this instance id ' ' abc or whatever others can make html scope,,dantman,2018-03-07 02:35:49,2018-03-12 03:02:49
IS,Cloned element using component created in render does not trigger onClick,Do you want to request a feature or report a bug Bug probably What is the current behavior Rerendering a cloned element using a component created in it is render on any event that is triggered while clicking will cause onClick to not be triggered Simplest implementation that causes this What is the expected behavior That onClick gets triggered Not cloning the element or not using a component created in render will fix this Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React version 16 2 0 and 15 6 2,,"aweary,aweary",2018-03-09 08:58:44,2018-03-12 04:47:19
IS,Potential Future Bug in getEventKey for Edge with Synthetic Event normalization,Bug Current behavior React currently normalizes keyboard events cross browser by falling back on the native KeyboardEvent keyCode property and using a dictionary object to normalize the key As noted in the source getEventKey is used for Normalization of deprecated HTML5 key values Edge currently does not implement the correct key values and this normalization will fall back to KeyboardEvent keyCode KeyboardEvent keyCode is deprecated and may be dropped at any time Microsoft as per have fixed this issue but it has not yet been released to insider preview releases This means there is the potential for the KeyboardEvent keyCode to be removed from Edge before the fix is made public It may be a good idea to not rely on keyCode in this instance Refer to Line 103 Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React react dom version 16 2 0 potentially affects future versions of Edge,,jquense,2018-03-12 16:16:24,2018-03-12 16:33:23
IS,React adds className to DOM instead of class in IE11,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug It is a bug What is the current behavior React adds className to the DOM instead of class property If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below Open the link below in IE11 and inspect the DOM There will be the following h1 h1 className test ie11 bug Hello React h1 Link to the test repo What is the expected behavior To add class to DOM when an element has property className Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 3 0 alpha 1 Internet Explorer 11 version 11 540 15063 0 It works as expected in React 16 2 0,,"aweary,gaearon",2018-03-09 09:16:39,2018-03-12 17:42:17
PR,Initialize React prop name attribute name mapping without Map,Fixes 12349 See issuecomment 372184873 Using new Map iterable is not supported in IE11 so it ends up trying to iterate through an empty map and these attributes do not get defined in properties Since this is only run once on startup inlining the attributeName array is probably fine,,"aweary,jquense",2018-03-12 03:31:52,2018-03-12 17:42:18
PR,Context providers and consumers should bailout on already finished work,Fixes bug where a consumer would re render even if its props and context had not changed x Confirm is fixed x Confirm is fixed x Integrate context fuzz tester into main fuzz tester since that would have caught this bug These tests are most effective when you combine as many features together as possible,,"acdlite,bvaughn,gaearon,acdlite,gaearon,acdlite,gaearon,acdlite,bvaughn,acdlite",2018-02-20 18:14:04,2018-03-12 20:39:19
PR,Add unstable prefix to observedBits prop until its proven to work in practice,Based on During a weekly team meeting we agreed to make this unstable until we can prove that it is a viable optimization strategy for Relay or some other library,,acdlite,2018-03-12 20:36:41,2018-03-12 20:57:33
IS,Context Consumer unexpectedly updates each time one of its child components call setState,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Report a bug What is the current behavior Each time a child component of Context Consumer calls setState its parent Context Consumer re renders If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below What is the expected behavior Presumably the expected behavior is one where setting the state of a child component does not affect any parent Context Consumer components particularly when that state does not change Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Versions 16 3 0 alpha 1 16 3 0 alpha 0 Browser Chrome OSX 10 13 3 64 0 3282 140 This works as expected when the previous context API is used,,"acdlite,acdlite",2018-02-12 22:13:26,2018-03-12 21:23:47
PR,Prefix internal context properties with underscore,So these are not mistaken for public properties Ideally we would use symbols or private fields Addresses,,acdlite,2018-03-12 21:23:11,2018-03-12 21:30:48
IS,Porting libraries from Preact Question,Hi I just want to ask a question Im a Preact user never tryed React I only did a course a couple of months ago But now I have to use React for a project and I'm trying to port one of my libraries This library aims for easy form setup My code works perfecly on Preact but Im facing issues on React for example input is loosing focus everytime I time on the form rather than update field value This is the React example This is the Preact which is working This library keeps an internal state to manage field values and events what Im doing wrong help appreciated,,aweary,2018-03-13 17:55:20,2018-03-13 18:51:27
PR,create subscription,Async safe subscriptions are hard to get right create subscription provides an simple async safe interface to manage a subscription View the formatted README to learn more,,"bvaughn,flarnie,bvaughn,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,sebmarkbage,bvaughn,bvaughn,bvaughn,gaearon,bvaughn,flarnie,flarnie,flarnie,flarnie,flarnie,kassens,flarnie,kassens,flarnie,flarnie,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,flarnie,bvaughn,koba04,kassens,acdlite,acdlite,acdlite,acdlite,acdlite,acdlite,acdlite,acdlite,acdlite,acdlite,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,benjamn,acdlite,bvaughn,bvaughn,acdlite,bvaughn,bvaughn,acdlite,bvaughn,bvaughn,bvaughn,acdlite,acdlite,bvaughn,acdlite,bvaughn,bvaughn,flarnie,flarnie,flarnie,flarnie,flarnie,bvaughn,bvaughn,gaearon,gaearon,bvaughn,acdlite,acdlite,bvaughn,bvaughn,flarnie,acdlite,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,flarnie,bvaughn,flarnie,bvaughn,flarnie,bvaughn,benjamn,bvaughn,benjamn,benjamn,bvaughn,bvaughn,flarnie,bvaughn,bvaughn,bvaughn,bvaughn",2018-03-04 04:12:28,2018-03-13 20:59:10
PR,resumeMountClassComponent should check for mount lifecycles not update,We have other tests that would have caught this if resuming were enabled in all cases but since it is currently only enabled for error boundaries the test I have added to prevent a regression is a bit contrived,,"acdlite,gaearon",2018-03-13 23:25:29,2018-03-13 23:36:32
IS,15 6 2 setState callback does not fire,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Bug What is the current behavior I have the following piece of code in my fairly simple component now we see this argument is ommited I do not know if that helps anyway the callback is not fired whatever I try to do If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below Here is a simple example for reproduction What is the expected behavior Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 15 6 1 15 6 2 not tested other 15 x NOT React 16 x,,aweary,2018-03-12 15:13:51,2018-03-13 23:45:26
IS,react 16 3 new context API basic intent,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug misunderstanding What is the current behavior Impossible to render a component which is a provider furnished by createContext function trying to follow those articles whats new in react baphemot whats new in react 16 3 d2c9b7b6193b react new context API If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below code sandBox example sourceCode of codeSandBox What is the expected behavior It should render closed Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React i'm testing with react 16 3 0 alpha 1 as it is new feature it cannot work in previous releases,,,2018-03-14 10:53:16,2018-03-14 11:22:59
IS,Formatting numbers with toLocalString in a controlled input,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug A bug suspected What is the current behavior I'm trying to use toLocaleString with a controlled input on a text or tel field Either the numbers are removed after after 3 entered or I get a NaN Possibly related What is the expected behavior Number is formatted using toLocaleString Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React 16 2 0 Chrome 64 Mac OS 10,,,2018-03-14 11:50:44,2018-03-14 12:02:26
PR,Renamed createRef value attribute to current,Based on team discussion about awkwardness of inputRef value value Docs have been updated as well via 12d7c16,,"bvaughn,trueadm,bvaughn,gaearon,gaearon,bvaughn,bvaughn,bvaughn",2018-03-14 16:03:26,2018-03-14 16:43:20
PR,RFC 30 React forwardRef implementation,Add new API React forwardRef implemented as a new element type Usage is e g Relates to reactjs rfcs pull 30,,"bvaughn,bvaughn,gaearon,gaearon,bvaughn,bvaughn,aweary,gaearon,aweary,bvaughn,aweary,bvaughn,bvaughn,sebmarkbage,sebmarkbage,bvaughn,bvaughn,acdlite,bvaughn,sebmarkbage,sebmarkbage,gaearon,gaearon,bvaughn,gaearon,gaearon,bvaughn,gaearon,jquense,bvaughn,sebmarkbage,jquense,sebmarkbage,bvaughn,aweary,bvaughn,aweary,acdlite,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn,bvaughn",2018-03-08 23:47:29,2018-03-14 20:07:58
IS,when use webpack4 0 1 bundle a react App ERROR like this,ERROR in node modules react 16 2 0 react cjs react production min js Module not found Error Ca not resolve 'fbjs lib emptyFunction' in ' Users zr work react family ink node modules react 16 2 0 react cjs' node modules react 16 2 0 react cjs react production min js 10 80 113 node modules react 16 2 0 react index js src app js multi src app js ERROR in node modules react 16 2 0 react cjs react production min js Module not found Error Ca not resolve 'fbjs lib emptyObject' in ' Users zr work react family ink node modules react 16 2 0 react cjs' node modules react 16 2 0 react cjs react production min js 10 46 77 node modules react 16 2 0 react index js src app js multi src app js ERROR in node modules react 16 2 0 react cjs react production min js Module not found Error Ca not resolve 'object assign' in ' Users zr work react family ink node modules react 16 2 0 react cjs' node modules react 16 2 0 react cjs react production min js 10 19 43 node modules react 16 2 0 react index js src app js multi src app js,,aweary,2018-03-14 14:38:05,2018-03-14 21:35:00
IS,Why setState re renders even if state stays the same,Edit zw28l3ynkm I know we can define a shouldComponentUpdate to check if this state nextState but why not check this by default Same goes for props,,,2018-03-15 02:10:34,2018-03-15 03:17:57
PR,Update ReactElement js,Optimized code,,,2018-03-15 11:53:40,2018-03-15 11:56:20
PR,Update ReactElement js,optimized code,,,2018-03-15 11:59:56,2018-03-15 12:07:13
PR,Update ReactElement js,optimized code,,,2018-03-15 12:14:32,2018-03-15 12:18:26
PR,Fix typo in unexpected ref object warning,Just fixing a typo,,,2018-03-15 07:20:45,2018-03-15 12:30:51
IS,Different behavior of updating DOM while using ternary operator vs inline approaches,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Not sure if this is bug of feature What is the current behavior There are 2 very similar cases often chosen by matter of preferences but work with DOM is different In the first case icon is updated in DOM If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below What is the expected behavior I expected update in both cases but might be wrong Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Windows 10 Chrome 64,,"hejld,jquense",2018-03-15 11:46:50,2018-03-15 15:40:13
PR,Removed an unnecessary wrapper object from state,,,"bvaughn,gaearon,bvaughn,bvaughn,bvaughn,gaearon,bvaughn,gaearon",2018-03-15 17:52:17,2018-03-15 18:43:01
PR,Unify context stack implementations,Implements the new context API on top of the existing ReactStack that we already use for host context and legacy context Now there is a single array that we push and pop from This makes the interrupt path slightly slower since when we reset the unit of work pointer we have to iterate over the stack like before and switch on the type of work not like before On the other hand this unifies all of the unwinding behavior in the UnwindWork module Also changes the context modules to use module constructors so that each renderer gets a separate instance which is currently broken when using react reconciler This is not a total unification of legacy context and the new context API A further step would be to implement the legacy contextTypes based API on top of React createContext,,"acdlite,acdlite,bvaughn,acdlite",2018-03-13 00:10:06,2018-03-16 02:27:45
PR,Feature flag Use custom requestIdleCallback even when native one exists,We will use this in www to test whether the polyfill is better at scheduling high pri async work than the native one My preliminary tests suggest yes but it is hard to say for certain given how difficult it is to consistently reproduce the starvation issues we have been seeing,,acdlite,2018-03-16 02:08:28,2018-03-16 02:28:21
PR,Update ReactElement js,optimized code,,,2018-03-16 02:54:52,2018-03-16 04:06:00
PR,Support ForwardRef type of work in TestRenderer,,,"jquense,jquense,bvaughn,bvaughn,bvaughn,bvaughn,jquense,jquense,jquense,bvaughn,bvaughn,bvaughn,bvaughn,jquense,jquense,bvaughn,bvaughn,bvaughn",2018-03-16 15:16:39,2018-03-16 18:18:51
IS,why im getting key iterator warnings,If I put back the keys then my form stops working please refer to,,,2018-03-17 13:25:38,2018-03-17 16:03:44
IS,Unhandled Rejection SyntaxError Unexpected token in JSON at position 0,Hello all I'm new with react I want import some datas of my file data json The code is Portfolio js Please I need your help,,aweary,2018-03-18 17:14:50,2018-03-18 17:38:01
IS,PROPOSAL Allow void elements to have children with override property,Do you want to request a feature or report a bug Feature What is the current behavior When creating one of the whitelisted void elements an error is thrown Much in the vein of dangerouslySetInnerHTML the property is named such that it Likely avoids name collisions from any existing consumer code Makes it explicit that setting this flag causes non standard and potentially undesirable effects for most usual use cases This feature should be implemented in a way that all existing unit tests pass without alteration New unit tests would be added to ensure that the new functionality works as intended The following files have been identified as the places to implement this feature packages react dom src shared assertValidProps js packages react dom src tests ReactDOMComponent test js packages react dom src shared DOMProperty js Did this work in previous versions of React If this worked in previous versions of React it was likely a bug,,aweary,2018-03-18 05:27:16,2018-03-18 17:48:04
IS,Gitter Room,please make a react room on gitter,,aweary,2018-03-16 06:11:53,2018-03-18 18:07:18
IS,Add a Top level API for detecting whether an element is a HTML element,Note if the issue is about documentation or the website please file it at Do you want to request a feature or report a bug Feature What is the current behavior In the React is Top level API isvalidelement there is a function for detecting whether an object is a valid React element But there is no official way to detect a HTML element specifically What is the expected behavior It would make sense to have another function for checking whether an object is a ReactHTMLElement What would be the use cases In TypeScript it would be a useful type guard Apart from TypeScript it would be cool eg if you needed your component to add a class to all of its children you would have to decide whether you can add the class directly or whether you have to wrap the child in span class foo span Implementation draft Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React All,,"jquense,aweary",2018-03-13 22:36:03,2018-03-18 18:15:35
IS,Impossible to change classname,I would like to change a class name to invoke a simple animation effect className as an attribute must be a string When I run render it appears to do more than simply update the class as the animation does not run even with keys set I also can not render once and then change the class as props is readonly,,"jquense,aweary",2018-03-13 19:49:07,2018-03-18 18:16:21
PR,Update ReactElement js,optimized code,,aweary,2018-03-16 04:15:55,2018-03-18 22:44:44
IS,Could we get more friendly error stack from ErrorBoudary,Do you want to request a feature or report a bug Maybe a feature What is the current behavior Currently the error Component Stack i e arguments 0 of componentDidCatch is something like This is almost useless for our debugging What is the expected behavior I want to request a feature which allow us to define our own static componentName field the reason why do not use displayName is that the displayName is used by react devtools or others libs if we use this static field for our components everyone could see our components project structure maybe there is others potential risk that is not what we expect So if react could support custom static componentName field e g myDisplayName then we could set myDisplayName field for our components and react devtools can not inspect this And react read myDisplayName field rather than displayName to get the component name and insert they into the error stack string and then call the componentDidCatch I know that if we implement this we still could get the components project structure by using some libs like babel to decompile or just make react devtools to support this field But that increase the cost,,"jquense,jquense,jquense,aweary",2018-03-16 12:16:51,2018-03-18 22:54:27
PR,first set of for of removals to get rid of eslint disables,work in progress Cleaning up the relics of the for of left from,,aweary,2018-03-19 14:42:36,2018-03-19 16:43:41
IS,React not able to get the application environment at UI with DefinePlugin,I am working on a React application In there I have to showcase different functionality based on whether app is running in dev mode or production My query is how do I get this application environment in my React code I tried below code but it did not work webpack config js plugins new webpack DefinePlugin appenv JSON stringify wouldev' any component js console log Env appenv error appenv is not defined I also tried EnvironmentPlugin of webpack but got same error Could anyone help TIA CC,,aweary,2018-03-19 09:44:22,2018-03-19 16:45:42
IS,server side react dom render hrefLang as hrefLang,Do you want to request a feature or report a bug bug What is the current behavior react dom server render hrefLang as hrefLang If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem What is the expected behavior Render hrefLang attribute as hreflang on server side Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React 16 0 0 16 4 0 Works in 15 6 2,,gaearon,2018-03-19 17:50:08,2018-03-19 19:37:22
IS,async safe way of reading this state,Do you want to request a feature or report a bug feature request question I'm having a problem that I'm sure some people have had though I feel like it should be much more solvable Suppose I have a component that receives state updates from many sources For example but my requirement is that this method that reads this state must be synchronous Also this form seems a bit odd to me if I do not actually intend to set any state It seems that this setState being asynchronous forcing my own application to have to make all reads of this state to be asynchronous as well I could instead keep track of my own state and entirely ignore this state This means I keep this state2 number 1 and replace calls of this setState with this state2 number this forceUpdate but this just solves the problem by bypassing React entirely My question is is there a way to force the immediate setting of state to read this state or what is a recommended solution for something like this,,"gaearon,gaearon,gaearon,gaearon,gaearon",2018-03-15 12:09:02,2018-03-20 10:00:31
IS,propagateContextChange Stuck in an Infinite Loop,Do you want to request a feature or report a bug Bug What is the current behavior In the process of converting my Navigation router to the new context API I found that propagateContextChange sometimes gets stuck in an infinite loop I ve created a JsFiddle of the problem If you click the 'Name' sort Hyperlink two times then on the second click it enters the infinite loop The JsFiddle is as simple as I could make it For example if you get rid of the 'Date of Birth' column then the problem doesn t happen If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below What is the expected behavior It should not get stuck in an infinite loop Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React version 16 3 0 alpha 2 This is to do with the new Context API introduced in 16 3,,"gaearon,gaearon,jquense,gaearon,jquense,gaearon,gaearon,gaearon,gaearon",2018-03-16 11:25:26,2018-03-20 13:07:00
PR,Fix an infinite loop in new context,Fixes The issue was caused by top level return pointer not getting updated before descending Then this condition L842 would never be true and we would loop forever It does not affect other cases because we update return in the loop The top level parent is just outside of the loop,,gaearon,2018-03-19 16:31:37,2018-03-20 13:07:00
PR,fabric register ReactFabric to be callable module,ReactFabric needs to be callable from native side for now to handle unmounting,,"fkgozali,fkgozali,gaearon,sebmarkbage,fkgozali,sebmarkbage,fkgozali",2018-03-20 00:23:00,2018-03-20 14:56:19
IS,Circle Ci failing test,Do you want to request a feature or report a bug Bug What is the current behavior Broken build process due to invalid response from If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it does not have dependencies other than React Paste the link to your JSFiddle or CodeSandbox example below Any new PR will have the facebook open source bot post something similar to this img width 775 alt screen shot 2018 03 20 at 6 39 41 am src this error will also cause the CircleCI tests to fail img width 768 alt screen shot 2018 03 20 at 6 43 38 am src What is the expected behavior Valid json response,,gaearon,2018-03-20 11:46:41,2018-03-20 14:59:09
IS,Passing elements to a function requires manual keys to be present,Do you want to request a feature or report a bug Bug feature What is the current behavior React requires manual keys present on each tag when passing an element via a function to render If not it gives a key warning I'm passing an element created from JSX via a mobx store This element requires manual keys to be present on each child tag Even for simple example this is incredibly hard to do and does not allow using any child component thus severely limiting this functionality The passed JSX can be considered static so the key requirement should not apply here at all Is it possible to tell React to consider an element as static Codesandbox minimal case What is the expected behavior Should not require manually setting keys to values like 1 2 3 etc Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React Latest stable dependencies via Codesandbox Chrome macOS but does not matter,,aweary,2018-03-20 16:30:09,2018-03-20 17:02:29
IS,Controlling radio input with checked and onClick props gives warning,Do you want to request a feature or report a bug Bug What is the current behavior In any input of type radio if I control it with the checked props and a handler to the onClick event I still receive a warning that the form field needs a onChange handler To suppress this warning I pass an useless inline function to the onChange props What is the expected behavior Not give a warning if I control the component with an event other than onChange I can not assure all possibilities but it is very common for me to control radio inputs with onClick handlers Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React 16 2 0 I did not test this behavior with a checkbox input but I wonder that the same behavior would be desirable,,jquense,2018-03-20 17:52:11,2018-03-20 17:56:20
IS,Write blog post about new async UNSAFE and static lifecycles,Follow up item for PR 12028 This blog post should correspond with the 16 3 release Its primary purpose is to let people know how to prepare for subsequent 16 4 release For application developers this post should explain how to run the codemod to rename the deprecated methods reactjs react codemod pull 195 as well as general strategies for how to use the new lifecycle s instead For library maintainers this should provide recommended update and release strategies including What kinds of code can be moved into render to remain backwards compatible vs what needs to either remain in UNSAFE componentWillReceiveProps or moved to the new static getDerivedStateFromProps method When peer dependency version changes are required What versions of React will support the new UNSAFE methods,,"bvaughn,jquense,bvaughn,jquense,jquense,bvaughn,gaearon,bvaughn,jquense,gaearon,bvaughn,bvaughn,gaearon,bvaughn",2018-01-18 20:56:10,2018-03-20 19:29:48
PR,Fix falling in dev mode,FiberNode stateNode could be null So I get TypeError I checked react native render render in dev it has the same check L73 L73,,"Yeti-or,gaearon,Yeti-or,gaearon",2018-03-20 15:58:04,2018-03-21 09:41:51
IS,It is not safe to read CurrentOwner current and assume it has a stateNode,This L217 might mean that owner stateNode is null So assumption like this leads to runtime failure in DEV L1131 We should fix up all such code sites,,"gaearon,abhaynikam,gaearon",2018-02-27 02:55:05,2018-03-21 09:42:32
PR,Updated ReactIncrementalSideEffects test internal js to ES6,I have completed all the checks and read through all the code of conduct and contribution documents This is my first time I'm submitting a pull request to a Facebook open source project I have completed the CLA I have updated one of the older test files to use new ES6 syntax If this is acceptable I will continue to update other older tests in the same way Would love some feedback,,"barrymichaeldoyle,barrymichaeldoyle,jquense,aweary,barrymichaeldoyle,barrymichaeldoyle,barrymichaeldoyle",2018-03-17 07:43:16,2018-03-21 10:49:35
IS,Why refs are immutable object is not extensible,Why I cannot set this refs Why refs are immutable,,gaearon,2018-03-21 11:24:26,2018-03-21 11:51:43
PR,Replaced an Object keys for each loop with a for key in object loop,Replaced an Object keys for each loop with a for key in object loop which improves unit performance by 300 forEach is a good solution in general but when it comes to using Object keys It is significantly quicker to to use for let key in obj Functionality remains the same code is also more legible and the loop performs faster this way so there are multiple benefits to doing it this way,,"barrymichaeldoyle,nhunzaker,barrymichaeldoyle,nhunzaker",2018-03-21 11:58:45,2018-03-21 13:45:46
PR,Clean shell scripts,Hi I fixed some stuff spotted by shellcheck,,"nhunzaker,nhunzaker",2018-03-13 19:38:50,2018-03-21 16:03:10
PR,Fix now missing errorInfo argument to componentDidCatch,It was removed probably accidentally in 12201 I'm adding it back and also adding it for getDerivedStateFromCatch,,"gaearon,sebmarkbage,gaearon,gaearon",2018-03-21 15:22:00,2018-03-21 16:38:25
PR,Added badge for react documentation,Added badge for react documentation in Readme md,,"nhunzaker,nhunzaker",2018-02-08 22:35:08,2018-03-21 17:05:03
IS,Wrong backgroundColor value after changing from valid to invalid color,Do you want to request a feature or report a bug Bug What is the current behavior When changing the backgroundColor from a valid color to null the valid color persists Steps to reproduce What is the expected behavior After changing the backgroundColor to an invalid format the backgroundColor should be set to null so then CSS is going to ignore the value due to it is an invalid value Which versions of React and which browser OS are affected by this issue Did this work in previous versions of React React 16 2 0 Chrome 65 0 3325 162 Official Build 64 bit,,,2018-03-21 17:16:18,2018-03-21 17:32:53
PR,Fixed a batched state update bug with getDerivedStateFromProps,Addresses a batched state update bug reported in 12047,,"bvaughn,acdlite,acdlite,bvaughn,acdlite,bvaughn,bvaughn,acdlite,bvaughn,bvaughn,bvaughn",2018-03-20 15:58:06,2018-03-21 18:42:53
